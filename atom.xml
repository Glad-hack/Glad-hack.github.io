<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dream-ak.top/"/>
  <updated>2020-02-07T12:57:37.371Z</updated>
  <id>https://dream-ak.top/</id>
  
  <author>
    <name>无向秃</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>zoj2770差分约束</title>
    <link href="https://dream-ak.top/2020/02/07/zoj2770%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/"/>
    <id>https://dream-ak.top/2020/02/07/zoj2770%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/</id>
    <published>2020-02-07T12:54:48.000Z</published>
    <updated>2020-02-07T12:57:37.371Z</updated>
    
    <content type="html"><![CDATA[<p>emmm,好久没刷题，手感都快没了，先来养下手感<a id="more"></a></p><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://vjudge.net/problem/ZOJ-2770#author=zuodiedai" target="_blank" rel="noopener">题目链接</a></h2><p>题意大概就是给我们$n$个营地，$c[i]$表示第$i$个营地最多的人数，第$u$-第$v$个营地一共有$w$个人。问最少有多少人。<br>对于这种题型，我们一般做法是首先确定一个数组表示前面$i$个营地的总人数</p><blockquote><p>挖掘隐藏条件，每一个营地的人数不可能为负数，所以$a[i]-a[i-1]\geq0$<br>每个营地最多有$i$人，我们可以知道，$a[i]-a[i-1]\leq c[i]$<br>$u-v$一共最少有$w$人，我们可以得出，$a[u]-a[v-1]\geq w$</p></blockquote><p>我们可以把第二个条件化简为</p><script type="math/tex; mode=display">a[i]-a[i-1]\leq a[i] \rightarrow a[i-1]-a[i] \geq -c[i]</script><p>由上化简，我们就把所有的代数式换成了大于等于的形式，开始建图了<br>题目要求的是最小的人数，那么也就是$min(a[n]-a[0])$那么我们就可以这么建图：</p><blockquote><p>我们按照从被减数向减数建一条边，边权为右边的值。</p></blockquote><p>这样建图有什么好处？因为我们要求的是$min(a[n]-a[0])$，而我们这么建图就会使源点$0$到达的任意一个$v$最长路长度都是最少的人数，为什么是最长路？大于等于符号决定的呀，<strong>当大于等于时，只有最长路不会和其他方向的边冲突，小于等于时，我们只有最短路不会和其他方式的边冲突</strong>。<br>接下来看代码，spfa版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">//#include&lt;windows.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e5+5;</span><br><span class="line">int deq[N*2],a[N],head[N],tot=0;</span><br><span class="line">struct ED</span><br><span class="line">&#123;</span><br><span class="line">    int pre,to,w;</span><br><span class="line">&#125;ed[2*N];</span><br><span class="line">int vis[N],dis[N],num[N];</span><br><span class="line">void spfa(int x)&#123;</span><br><span class="line">    memset(dis,-1,sizeof dis);</span><br><span class="line">    memset(vis,0,sizeof vis);</span><br><span class="line">    memset(deq,0,sizeof deq);</span><br><span class="line">    memset(num,0,sizeof num);</span><br><span class="line">    dis[0]=0;</span><br><span class="line">    int l=1,r=0;</span><br><span class="line">    deq[++r]=0;</span><br><span class="line">    while(l&lt;=r)&#123;</span><br><span class="line">        int u=deq[l];</span><br><span class="line">        l++;</span><br><span class="line">        vis[u]=0;</span><br><span class="line">        //printf(&quot;%dsss\n&quot;,u);</span><br><span class="line">        for(int i=head[u];~i;i=ed[i].pre)&#123;</span><br><span class="line">            int v=ed[i].to;</span><br><span class="line">            //printf(&quot;%d %d %d %d %d\n&quot;,u,v,dis[u],ed[i].w,dis[v]);</span><br><span class="line">            if(dis[v]&lt;dis[u]+ed[i].w) &#123;</span><br><span class="line">                dis[v]=dis[u]+ed[i].w;</span><br><span class="line">                if(vis[v]) continue;</span><br><span class="line">                deq[++r]=v;</span><br><span class="line">                num[v]++;</span><br><span class="line">                if(num[v]&gt;=x) &#123;</span><br><span class="line">                    printf(&quot;Bad Estimations\n&quot;);</span><br><span class="line">                    return ;</span><br><span class="line">                &#125;</span><br><span class="line">                vis[v]=1;</span><br><span class="line">                //printf(&quot;%d %d\n&quot;,u,v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(dis[x]==-1)&#123;</span><br><span class="line">        printf(&quot;Bad Estimations\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,dis[x]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void add(int u,int v,int w)&#123;</span><br><span class="line">    ed[++tot].pre=head[u];</span><br><span class="line">    ed[tot].to=v;</span><br><span class="line">    ed[tot].w=w;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    while (scanf(&quot;%d %d&quot;,&amp;n,&amp;m)==2)</span><br><span class="line">    &#123;</span><br><span class="line">        tot=0;</span><br><span class="line">        for(i=0;i&lt;=n;i++)&#123;</span><br><span class="line">            head[i]=-1;</span><br><span class="line">        &#125;</span><br><span class="line">        for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">            add(i-1,i,0);</span><br><span class="line">            add(i,i-1,-a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        int u,v,w;</span><br><span class="line">        for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">            scanf(&quot;%d %d %d&quot;,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            add(u-1,v,w);</span><br><span class="line">        &#125;</span><br><span class="line">        spfa(n);</span><br><span class="line">    &#125;</span><br><span class="line">    //system(&quot;pause&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>不用队列，方便优化</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;emmm,好久没刷题，手感都快没了，先来养下手感&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="https://dream-ak.top/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="https://dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>python爬取王者数据</title>
    <link href="https://dream-ak.top/2020/02/06/python%E7%88%AC%E5%8F%96%E7%8E%8B%E8%80%85%E6%95%B0%E6%8D%AE/"/>
    <id>https://dream-ak.top/2020/02/06/python%E7%88%AC%E5%8F%96%E7%8E%8B%E8%80%85%E6%95%B0%E6%8D%AE/</id>
    <published>2020-02-06T10:24:34.000Z</published>
    <updated>2020-02-06T12:31:56.093Z</updated>
    
    <content type="html"><![CDATA[<p>正则已经学完了，就要开始玩爬虫了呀，我们首先爬一个王者的数据，来好好看看吧<a id="more"></a></p><h1 id="requests"><a href="#requests" class="headerlink" title="$requests$"></a>$requests$</h1><p>首先我们安装这一个requests模块，在终端输入</p><ol><li>pip install requests</li></ol><p>利用$r=requests.get()$来进行对一个网页的获取，返回一个二进制字符串，为了不把字符转乱码，我们一般使用正确的编码格式，这个编码格式一般在网页上写着！或者使用$r.apparent_encoding$的函数自动获取，不过不保证完全准确！<br>转字符串时可以使用$html=r.text$返回字符串</p><h2 id="强行爬虫"><a href="#强行爬虫" class="headerlink" title="强行爬虫"></a>强行爬虫</h2><p>在爬<a href="https://www.vmgirls.com/时会发现不允许爬取，那么有一个玄学的爬取方法，这个网站是通过判断代理服务来判断是不是爬虫，在requests时会发送一个爬虫请求，该网站如果发现是爬虫时，那么我们就可以把requests发送的代理服务改掉,通过在**$requests(&#39;https://vmgirls.com/&#39;,headers=&quot;本地代理&quot;)$**。" target="_blank" rel="noopener">https://www.vmgirls.com/时会发现不允许爬取，那么有一个玄学的爬取方法，这个网站是通过判断代理服务来判断是不是爬虫，在requests时会发送一个爬虫请求，该网站如果发现是爬虫时，那么我们就可以把requests发送的代理服务改掉,通过在**$requests(&#39;https://vmgirls.com/&#39;,headers=&quot;本地代理&quot;)$**。</a><br>本地代理可以在网页上查看！</p><h1 id="re-findall"><a href="#re-findall" class="headerlink" title="$re.findall()$"></a>$re.findall()$</h1><p>我们一般使用这个来获取自己需要的信息。</p><ol><li>()括号内表示需要的信息，没有括号则表示不需要的信息</li><li>[]匹配时我们需要写一个自己的字符分类，然后去选择自己的信息</li><li>findall(r’’,txt)是格式,r后跟着自己的匹配方式。</li></ol><h1 id="os"><a href="#os" class="headerlink" title="os"></a>os</h1><p>文件读写：</p><ol><li>对于文件读写我们一般是使用$with$ $open(“文件路径”,’读写方式’,’encoding=编码规则’) as f:$</li><li>对于文件路径可以使用绝对路径，编码规则须和字符串的编码规则相同。</li></ol><h1 id="time"><a href="#time" class="headerlink" title="time"></a>time</h1><p>为了网站的稳定性能我们一般要去使用$time.sleep()$来控制爬取速度。</p><h1 id="最后来看一下我们是如何爬取王者的："><a href="#最后来看一下我们是如何爬取王者的：" class="headerlink" title="最后来看一下我们是如何爬取王者的："></a>最后来看一下我们是如何爬取王者的：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">r = requests.get(&apos;https://pvp.qq.com/web201605/herolist.shtml&apos;)</span><br><span class="line">r.encoding=&quot;gbk&quot;</span><br><span class="line">html = r.text</span><br><span class="line">http = &quot;https://pvp.qq.com/web201605/&quot;</span><br><span class="line">dirs = os.path.abspath(&apos;.&apos;)</span><br><span class="line">dir_name = re.findall(r&apos;&lt;li&gt;&lt;a href=&quot;([a-z0-9/.]*)&quot; target=&quot;_blank&quot;&gt;&lt;img+\s&apos;,html)</span><br><span class="line">for i in dir_name:</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    r = requests.get(http+i)</span><br><span class="line">    r.encoding=&apos;gbk&apos;</span><br><span class="line">    html1=r.text</span><br><span class="line">    hero = re.findall(r&apos;&lt;h2 class=&quot;cover-name&quot;&gt;(.*?)&lt;/h2&gt;&apos;,html1)</span><br><span class="line">    print(hero)</span><br><span class="line">    skin = re.findall(r&apos;&lt;ul class=&quot;pic-pf-list pic-pf-list3&quot; data-imgname=&quot;([\S]*)&quot;&gt;&apos;,html1)</span><br><span class="line">    skill_name = re.findall(r&apos;&lt;p class=&quot;skill-name&quot;&gt;&lt;b&gt;(.*?)&lt;/b&gt;&lt;span&gt;(.*?)&lt;/span&gt;&lt;span&gt;(.*?)&lt;/span&gt;&lt;/p&gt;&apos;,html1)</span><br><span class="line">    skill_decs = re.findall(r&apos;&lt;p class=&quot;skill-desc&quot;&gt;(.*?)&lt;/p&gt;&apos;,html1)</span><br><span class="line">    skill_tips = re.findall(r&apos; &lt;div class=&quot;skill-tips&quot;&gt;(.*?)&lt;/div&gt;&apos;,html1)</span><br><span class="line">    lens = len(skill_tips)</span><br><span class="line">    with open(dirs+&apos;/&apos;+&apos;王者荣耀&apos;+&apos;/&apos;+hero[0]+&apos;.txt&apos;,&apos;w&apos;,encoding=&apos;gbk&apos;) as f:</span><br><span class="line">        f.write(&quot;英雄名称：&quot;+hero[0]+&apos;\n&apos;)</span><br><span class="line">        f.write(&quot;皮肤：&quot;+skin[0]+&apos;\n\n&apos;)</span><br><span class="line">        for j in range(0,lens,1):</span><br><span class="line">            f.write(&quot;技能名称：&quot;+skill_name[j][0]+&apos;\n&apos;)</span><br><span class="line">            f.write(&quot;技能冷却：&quot;+skill_name[j][1]+&apos;\n&apos;)</span><br><span class="line">            f.write(&quot;技能消耗：&quot;+skill_name[j][2]+&apos;\n&apos;)</span><br><span class="line">            f.write(&quot;技能描述：&quot;+skill_decs[j]+&apos;\n&apos;)</span><br><span class="line">            f.write(&quot;技能用途：&quot;+skill_tips[j]+&apos;\n&apos;)</span><br><span class="line">            f.write(&apos;\n&apos;)</span><br></pre></td></tr></table></figure><p>还是有点不会写文件的保存格式，呜呜呜，只会狂写编码了。。。<br>最后来看一下效果：<br><img src="/2020/02/06/python%E7%88%AC%E5%8F%96%E7%8E%8B%E8%80%85%E6%95%B0%E6%8D%AE/1.png" alt="信息"><br><img src="/2020/02/06/python%E7%88%AC%E5%8F%96%E7%8E%8B%E8%80%85%E6%95%B0%E6%8D%AE/2.png" alt="东西"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则已经学完了，就要开始玩爬虫了呀，我们首先爬一个王者的数据，来好好看看吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="https://dream-ak.top/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="https://dream-ak.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://dream-ak.top/2020/02/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://dream-ak.top/2020/02/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-02-05T10:48:23.000Z</published>
    <updated>2020-02-06T13:01:44.067Z</updated>
    
    <content type="html"><![CDATA[<p>$emmmm$，开始来学一些能够飘得的玩意了，虽然以前我玩过这个$python$的爬虫，但是今天来系统学习一下，$hhh$<br><a id="more"></a></p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="匹配方式"><a href="#匹配方式" class="headerlink" title="匹配方式"></a>匹配方式</h2><div class="table-container"><table><thead><tr><th style="text-align:center">字符表达</th><th style="text-align:center">意义</th><th style="text-align:center">例子</th><th style="text-align:center">例子解释</th></tr></thead><tbody><tr><td style="text-align:center">\d</td><td style="text-align:center">匹配一个数字</td><td style="text-align:center">\d{3}</td><td style="text-align:center">匹配三个数字</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配一个字母</td><td style="text-align:center">\w{3}</td><td style="text-align:center">匹配三个字母</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">可选匹配，前面括号内符号可以匹配一次或者零次</td><td style="text-align:center">(wo)?man</td><td style="text-align:center">匹配man或者woman</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">匹配零次或多次</td><td style="text-align:center">(wo)*man</td><td style="text-align:center">代表可以匹配man、wowoman等等</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">匹配一次或多次</td><td style="text-align:center">((wo)+man)</td><td style="text-align:center">代表可以匹配woman、wowoman等等</td></tr><tr><td style="text-align:center">{}</td><td style="text-align:center">指定匹配次数</td><td style="text-align:center">(wo){2,5}man</td><td style="text-align:center">可以匹配wo重复2到5遍的此类字符串</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">管道，指定多种字符模式，返回第一次出现的文本它是一竖</td><td style="text-align:center">‘Batman 1 Tina Fey’</td><td style="text-align:center">表示查找Batman和Tina Fey的第一次出现的字符</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">直接从头开始匹配</td><td style="text-align:center">^hello</td><td style="text-align:center">从头开始匹配hello</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">必须以该字符结束</td><td style="text-align:center">3$</td><td style="text-align:center">必须以3结尾</td></tr></tbody></table></div><p><strong>正则匹配是一种贪心匹配(能长则长)，而花括号的匹配是一种非贪心匹配(能短则短)</strong></p><ol><li>search：每一次返回第一次找到的字符串</li><li>findall：返回整个text的所有的字符串</li></ol><h2 id="字符分类"><a href="#字符分类" class="headerlink" title="字符分类"></a>字符分类</h2><h3 id="字符表达式"><a href="#字符表达式" class="headerlink" title="字符表达式"></a>字符表达式</h3><div class="table-container"><table><thead><tr><th style="text-align:center">字符分类</th><th style="text-align:center">表达式</th></tr></thead><tbody><tr><td style="text-align:center">\d</td><td style="text-align:center">0到9的任何数字</td></tr><tr><td style="text-align:center">\D</td><td style="text-align:center">除0到9的任何数字</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">任何字母、数字、下划线字符</td></tr><tr><td style="text-align:center">\W</td><td style="text-align:center">除字母、数字、下划线字符外的任意字符</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">空格、制表符、换行符</td></tr><tr><td style="text-align:center">\S</td><td style="text-align:center">除空格、制表符、换行符以外的任意字符</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">匹配除换行以外所有字符</td></tr><tr><td style="text-align:center">.*</td><td style="text-align:center">匹配所有字符</td></tr></tbody></table></div><h3 id="建立自己的字符分类"><a href="#建立自己的字符分类" class="headerlink" title="建立自己的字符分类"></a>建立自己的字符分类</h3><ol><li>[quit]表达可以匹配quit里面的任意一个字符</li><li>[ ^quit ]表达非quit里面任意一个字符的字符<br><strong>可以通过短横来表达字母或数字的范围[a-zA-Z0-9]将匹配所有字母和数字</strong></li></ol><h2 id="文本替换"><a href="#文本替换" class="headerlink" title="文本替换"></a>文本替换</h2><p>正则表达式不仅能找到文本模式，而且能够用新的文本替换掉这些模式。$Regex$对象的 $sub()$方法需要传入两个参数。第一个参数是一个字符串，用于取代发现的匹 配。第二个参数是一个字符串，即 正则表达式。$ sub()$方法返回替换完成后的字符串。<br>举个例子：</p><pre><code>&gt;&gt;&gt; namesRegex = re.compile(r&#39;Agent \w+&#39;) &gt;&gt;&gt; namesRegex.sub(&#39;CENSORED&#39;, &#39;Agent Alice gave the secret documents to Agent Bob.&#39;)&#39;CENSORED gave the secret documents to CENSORED.&#39;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$emmmm$，开始来学一些能够飘得的玩意了，虽然以前我玩过这个$python$的爬虫，但是今天来系统学习一下，$hhh$&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="https://dream-ak.top/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="https://dream-ak.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python刷题</title>
    <link href="https://dream-ak.top/2020/02/04/python%E5%88%B7%E9%A2%98/"/>
    <id>https://dream-ak.top/2020/02/04/python%E5%88%B7%E9%A2%98/</id>
    <published>2020-02-04T05:47:10.000Z</published>
    <updated>2020-02-04T05:55:22.525Z</updated>
    
    <content type="html"><![CDATA[<p>终于$python$有点上道了，开始我的磕磕绊绊刷题计划<a id="more"></a></p><h1 id="一行内多次输入"><a href="#一行内多次输入" class="headerlink" title="一行内多次输入"></a>一行内多次输入</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n,m=int(input.slipt())</span><br></pre></td></tr></table></figure><p>这样就可以一行输入两个数了，hhh(抄的)</p><h1 id="一行多输出"><a href="#一行多输出" class="headerlink" title="一行多输出"></a>一行多输出</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&apos; &apos;.join(map(str,a)))</span><br></pre></td></tr></table></figure><p>这个能把一个数组中间加入空格并输出。</p><h2 id="看题目"><a href="#看题目" class="headerlink" title="看题目"></a>看题目</h2><p>现在来看$Nod51$题目：<br>冒办法，我找了半天就只有$codeforce$和$Nod51$支持$python3$了</p><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a><a href="51nod.com/Challenge/Problem.html#problemId=2738">全排列</a></h3><p>题面很好懂，解法很好想，就是被输出卡了。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line">n,m=map(int,input().split())</span><br><span class="line">def dfs(l,r):</span><br><span class="line">    if m==r:</span><br><span class="line">        print(&apos; &apos;.join(map(str,a)))</span><br><span class="line">        return </span><br><span class="line">    else :</span><br><span class="line">        for i in range(l+1,n+1,1):</span><br><span class="line">            a.insert(r,i)</span><br><span class="line">            dfs(i,r+1)</span><br><span class="line">            a.pop(r)</span><br><span class="line">        return </span><br><span class="line">dfs(0,0)</span><br></pre></td></tr></table></figure></p><p>a序列放前面一点就能被后面函数调用了，hhh，强行全局</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于$python$有点上道了，开始我的磕磕绊绊刷题计划&lt;/p&gt;
    
    </summary>
    
    
      <category term="python刷题" scheme="https://dream-ak.top/categories/python%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="ACM" scheme="https://dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>map与reduce</title>
    <link href="https://dream-ak.top/2020/02/04/map%E4%B8%8Ereduce/"/>
    <id>https://dream-ak.top/2020/02/04/map%E4%B8%8Ereduce/</id>
    <published>2020-02-04T03:19:31.000Z</published>
    <updated>2020-02-04T03:21:46.520Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="python基础" scheme="https://dream-ak.top/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="https://dream-ak.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>函数</title>
    <link href="https://dream-ak.top/2020/02/03/%E5%87%BD%E6%95%B0/"/>
    <id>https://dream-ak.top/2020/02/03/%E5%87%BD%E6%95%B0/</id>
    <published>2020-02-03T09:04:38.000Z</published>
    <updated>2020-02-04T02:37:43.781Z</updated>
    
    <content type="html"><![CDATA[<p>终于到激动人心的时刻了，我们开始学习$python$函数了，有点小快啊，hhh<a id="more"></a></p><h1 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h1><h2 id="def"><a href="#def" class="headerlink" title="$def$"></a>$def$</h2><p>定义一个函数要使用$def$语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。<br>拿一个从$l$加到$r$的和的函数来讲<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def sum(l,r):</span><br><span class="line">    sum = 0</span><br><span class="line">    for i in range(l,r+1,1):</span><br><span class="line">        sum += i</span><br><span class="line">    return sum</span><br><span class="line">l = int(input(&quot;l=&quot;))</span><br><span class="line">r = int(input(&quot;r=&quot;))</span><br><span class="line">print(sum(l,r))</span><br></pre></td></tr></table></figure></p><blockquote><p>$output$<br>l=1<br>r=100<br>5050</p></blockquote><h2 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h2><p>比如上面的参数就叫做位置参数，调用$sum$函数时，必须给予两个固定参数</p><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>看一个代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def mul(a,b = 3):</span><br><span class="line">    print(a*b)</span><br><span class="line">mul(2)</span><br><span class="line">mul(2,4)</span><br></pre></td></tr></table></figure><blockquote><p>$output$<br>6<br>8</p></blockquote><p>这个和上面的参数比较不同点在于，在定义参数的时候对一个参数赋值，这种写法叫做默认参数</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>我们调用函数时，对于默认参数可以选择性增加调用值。更大的符合了用户的情况</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>对于默认参数我们一般默认，变化大的在前，变化小的在后</li><li>且对于默认参数放在位置参数以后</li><li>对于默认参数赋值必须赋为不变对象</li></ol><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>可变参数：调用时，输入的长度可以是任意个。在传入以后自动组成一个$tuple$<br>比如我们要对一个$list$或$tuple$进行和运算，由于每一个$list$的长度不定。所以我们需要一个可变参数。<br>来看一个代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def sum1(*lis):</span><br><span class="line">    sum = 0</span><br><span class="line">    for i in lis:</span><br><span class="line">        sum += i</span><br><span class="line">    return sum</span><br><span class="line">a = [1,2,5,7]</span><br><span class="line">b = [5,9,8]</span><br><span class="line">print(sum1(*a))</span><br><span class="line">print(sum1(*b))</span><br></pre></td></tr></table></figure><blockquote><p>$output$<br>15<br>22</p></blockquote><p>可以发现，好像就是C语言传入指针了，对的，C语言遮掩好像也可以，就是长度问题而已。<br>下面这些要用的时候再补充吧，暂时请参考<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017261630425888" target="_blank" rel="noopener">廖雪峰</a></p><h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><p>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。<br>他的功能，给与用户想给的一些多余的信息，也可以进行收集。</p><h2 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h2><p>对于关键字参数进行一定的限制</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于到激动人心的时刻了，我们开始学习$python$函数了，有点小快啊，hhh&lt;/p&gt;
    
    </summary>
    
    
      <category term="python基础" scheme="https://dream-ak.top/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="https://dream-ak.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>dict和set</title>
    <link href="https://dream-ak.top/2020/02/03/dict%E5%92%8Cset/"/>
    <id>https://dream-ak.top/2020/02/03/dict%E5%92%8Cset/</id>
    <published>2020-02-03T07:01:13.000Z</published>
    <updated>2020-02-03T09:02:14.419Z</updated>
    
    <content type="html"><![CDATA[<p>$dict$我发现与$c++$的$map$十分相似,而$set$好像名字都没变，由于$c++$只学皮毛，就不瞎说了，慢慢学吧<a id="more"></a></p><h1 id="dict"><a href="#dict" class="headerlink" title="$dict$"></a>$dict$</h1><h2 id="dict-的结构"><a href="#dict-的结构" class="headerlink" title="$dict$的结构"></a>$dict$的结构</h2><p>这里按照廖雪峰的介绍给出两种方式</p><ol><li>按照字典树的方式建立一棵字典树，优点不会出现冲突，可直接使用，缺点相较于哈希来说，查找较慢</li><li>直接建立一个哈希表，每一次按照$key$直接哈希地址然后得到答案，优点，查找方便。缺点：容易出现哈希冲突。</li></ol><p>$dict$是第二种建立方式，因此$key$的值是唯一的，不可重复，<strong>如果重复了那么就会将前面得到的数据丢失冲掉。</strong></p><h2 id="dict-的建立"><a href="#dict-的建立" class="headerlink" title="$dict$的建立"></a>$dict$的建立</h2><p>首先来看一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=&#123;&#125;</span><br><span class="line">a[&apos;peng&apos;] = 4</span><br><span class="line">a[&apos;我&apos;] = 5</span><br><span class="line">print(a[&apos;我&apos;])</span><br></pre></td></tr></table></figure><blockquote><p>$output$<br>5</p></blockquote><p>可以看到我们是通过大括号{}来定义一个空$dict$然后添加直接赋值就好了。调用直接访问$key$就行了，但是一定要保证这个$key$存在。<br>判断$key$存在性的办法：</p><blockquote><ol><li>$print$(‘我’ $in$ $a$)</li><li>$print(a.get(‘我’,x))$<blockquote><p>解释一下$x$的作用，当不存在$key$的时候返回$x$</p></blockquote></li></ol></blockquote><p>对于第一种，如果存在，返回$true$。不存在返回false。</p><h2 id="dict-的删除"><a href="#dict-的删除" class="headerlink" title="$dict$的删除"></a>$dict$的删除</h2><p>这个的删除我们前提是$key$存在,如果存在，我们就可以像$list$一样删除它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.pop(&apos;peng&apos;)</span><br><span class="line">print(a.get(&apos;peng&apos;,777))</span><br></pre></td></tr></table></figure><blockquote><p>$output$<br>777</p></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>$dict$可以用在需要高速查找的很多地方，在$Python$代码中几乎无处不在，正确使用$dict$非常重要，需要牢记的第一条就是$dict$的key必须是不可变对象。</p><p>这是因为$dict$根据$key$来计算$value$的存储位置，如果每次计算相同的$key$得出的结果不同，那$dict$内部就完全混乱了。这个通过$key$计算位置的算法称为哈希算法$（Hash）$。</p><p>要保证$hash$的正确性，作为$key$的对象就不能变。在$Python$中，字符串、整数等都是不可变的，因此，可以放心地作为$key$。而$list$是可变的，就不能作为$key$</p><h1 id="set"><a href="#set" class="headerlink" title="$set$"></a>$set$</h1><p>$set$一般用于去重和集合操作，它可以对集合进行”与”、”或”操作.</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>创建一个$set$我们一般是要一个$list$做输入集合<br>看一段代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [1,1,5,9,3,8,9]</span><br><span class="line">a = set(l)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p><blockquote><p>$output$<br>{1, 3, 5, 8, 9}</p></blockquote><p>很明显它自己去重了，同时<strong>不要被表面所迷惑$set$是无序的</strong></p><h2 id="set-怎么添加元素？"><a href="#set-怎么添加元素？" class="headerlink" title="$set$怎么添加元素？"></a>$set$怎么添加元素？</h2><p>答案下行揭晓<br>$a.add(x)$参数$x$是你要添加的$key$<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.add(2)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p><blockquote><p>$output$<br>{1, 2, 3, 5, 8, 9}</p></blockquote><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><p>我们一般通过$a.remove(x)$删除,$x$是你要删除的$key$<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.remove(2)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p><blockquote><p>$output$<br>{1, 3, 5, 8, 9}</p></blockquote><h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><p>直接&amp;或者|就好了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b=set([1,2])</span><br><span class="line">print(a&amp;b)</span><br><span class="line">print(a|b)</span><br></pre></td></tr></table></figure></p><blockquote><p>$output$<br>{1}<br>{1, 2, 3, 5, 8, 9}</p></blockquote><h2 id="不可变变量"><a href="#不可变变量" class="headerlink" title="不可变变量"></a>不可变变量</h2><p>字符串属于不可变变量，同时$list$是一个可变变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &quot;abc&quot;</span><br><span class="line">print(a.replace(&apos;a&apos;,&apos;A&apos;))</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$dict$我发现与$c++$的$map$十分相似,而$set$好像名字都没变，由于$c++$只学皮毛，就不瞎说了，慢慢学吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="python基础" scheme="https://dream-ak.top/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="https://dream-ak.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>条件与循环</title>
    <link href="https://dream-ak.top/2020/02/03/%E6%9D%A1%E4%BB%B6%E4%B8%8E%E5%BE%AA%E7%8E%AF/"/>
    <id>https://dream-ak.top/2020/02/03/%E6%9D%A1%E4%BB%B6%E4%B8%8E%E5%BE%AA%E7%8E%AF/</id>
    <published>2020-02-03T06:31:15.000Z</published>
    <updated>2020-02-04T02:12:54.899Z</updated>
    
    <content type="html"><![CDATA[<p>$hhh$还记得我之前说的$python$是如何将区分作用域划分代码块吗？没错就是$’:’$这个，他会自动缩进<a id="more"></a></p><h1 id="if-判断"><a href="#if-判断" class="headerlink" title="$if$判断"></a>$if$判断</h1><p>首先我们来看一段代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">socre=int(input())</span><br><span class="line">if score&gt;=60:</span><br><span class="line">    print(&quot;pass\n&quot;)</span><br><span class="line">else :</span><br><span class="line">    print(&quot;No pass\n&quot;)</span><br></pre></td></tr></table></figure><br>这个就可以把你的分数转化成过和没过了，挂科了没，一目了然！<br>对于这段代码的解释我就对他与C语言的比较了。<br><strong>没有C语言的小括号，$if$后面全是判断一直到$’:’$</strong><br>对于else 我们也需要$’:’$<br>如果进行多次判断由C语言的$else if$ $\rightarrow$ $elif 判断:$</p><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="for-…-in-循环"><a href="#for-…-in-循环" class="headerlink" title="$for$ … $in$循环"></a>$for$ … $in$循环</h2><p>这种循环我们一般是用一个变量每一次迭代$in$里面的内容(可以是$list,tuple$等数据结构)，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">x=(5,2,0)</span><br><span class="line">for i in x:</span><br><span class="line">    print(i)</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">&gt; $output$</span><br><span class="line">5</span><br><span class="line">2</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">## $for$ ... $in$ $range(x,y,z)$循环</span><br><span class="line">我们看这个循环 其中省略号代表变量，我们假设为$i$</span><br><span class="line">现在来解释一下参数</span><br><span class="line">1. $x$代表$i$的初始值</span><br><span class="line">2. $y$代表$i$的上界或下界,**不得小于等于$y$**</span><br><span class="line">3. $z$代表$i$的步进大小每一次加上多少</span><br><span class="line"></span><br><span class="line">来看一段代码</span><br></pre></td></tr></table></figure><p>for i in range(3,1,-1):<br>    print(i)<br>```</p><blockquote><p>$output$<br>3<br>2</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$hhh$还记得我之前说的$python$是如何将区分作用域划分代码块吗？没错就是$’:’$这个，他会自动缩进&lt;/p&gt;
    
    </summary>
    
    
      <category term="python基础" scheme="https://dream-ak.top/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="https://dream-ak.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>list和tuple</title>
    <link href="https://dream-ak.top/2020/02/02/list%E5%92%8Ctuple/"/>
    <id>https://dream-ak.top/2020/02/02/list%E5%92%8Ctuple/</id>
    <published>2020-02-02T13:34:09.000Z</published>
    <updated>2020-02-03T06:52:06.529Z</updated>
    
    <content type="html"><![CDATA[<p>对于这个list的了解我一直感觉就和C语言数组一样，但是仔细看了一下，到底不同，就让本蒟蒻带您去看看那些地方不同吧。<a id="more"></a></p><h1 id="list"><a href="#list" class="headerlink" title="$list$"></a>$list$</h1><p>这种数据类型使列表<strong> $list$是一种有序的集合，可以随时添加和删除其中的元素。</strong><br>对于这个我们可以看下面这个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=[&apos;s&apos;,&apos;a&apos;,&apos;r&apos;,&apos;s&apos;]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p><blockquote><p>$ output$:<br>$[‘s’, ‘a’, ‘r’, ‘s’]$</p></blockquote><p>而一个$list$的长度怎么看？还记得看字符串长度的$len$函数吗？<br>我们就是通过$len$来查看list的长度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(len(a))</span><br></pre></td></tr></table></figure></p><blockquote><p>$output:$<br>4</p></blockquote><p>同时我们还可以通过像C语言一样的手法访问下标来查看元素，同样不能越上界<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(a[0])</span><br><span class="line">print(a[3])</span><br><span class="line">print(a[-1])</span><br></pre></td></tr></table></figure></p><blockquote><p>$output$<br>s<br>s<br>s<br>应该发现了，可以有负数，-1的意思就是倒数第一个咯。但是也不能超过$list$的长度</p><h2 id="list-包含的数据类型"><a href="#list-包含的数据类型" class="headerlink" title="$list$包含的数据类型"></a>$list$包含的数据类型</h2><p><strong>$list$里面包含的数据类型可以混合加入</strong><br>例如我们可以在一个list里面放入数字、字符串甚至是一个$list$也行！</p></blockquote><h2 id="list-的操作"><a href="#list-的操作" class="headerlink" title="$list$的操作"></a>$list$的操作</h2><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.pop(0)</span><br><span class="line">print(a)</span><br><span class="line">print(a[0])</span><br></pre></td></tr></table></figure><blockquote><p>$output:$<br>$[‘a’, ‘r’, ‘s’]$<br>$a$</p></blockquote><p>我们可以看到，要删除第i个数字就是直接$pop(i)$，同时会把后面的往前面移动</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.insert(0,a)</span><br><span class="line">print(a)</span><br><span class="line">print(a[0])</span><br></pre></td></tr></table></figure><blockquote><p>$output:$<br>$[‘s’, ‘a’, ‘r’, ‘s’]$<br>$s$<br>每一次插入，我们都是把第$i$个元素之后往后移动，然后插入</p><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><p>$a.append(strr)$默认从尾部增加元素</p><h1 id="tuple"><a href="#tuple" class="headerlink" title="$tuple$"></a>$tuple$</h1><p>$tuple$也是一种有序列表，它的特点是一旦初始化成功后就不得修改</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = (&apos;s&apos;,&apos;a&apos;,&apos;r&apos;,&apos;s&apos;);</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>$output$<br>(‘s’, ‘a’, ‘r’, ‘s’)</p></blockquote><p>大家可能发现了，$list$的定义时中括号$[]$而$tuple$是$()$<br><strong>注意</strong>我们定义空$tuple$时我们是$a=()$,但是如果定义一个元素时例如$a=(1,)$时，我们注意要打逗号，不然会被误解为$a=1$为$int$型变量</p><h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>$tuple$因其不可修改的性质所以从安全角度上来说比$list$更加安全，我们一般能用$tuple$绝不用$list$</p><h2 id="一个“可变的”-tuple"><a href="#一个“可变的”-tuple" class="headerlink" title="一个“可变的”$tuple$"></a>一个“可变的”$tuple$</h2><p>首先注意引号，他还是不可变的，可为什么又可以变呢？<br>我们尝试如下定义</p><blockquote><p>$a=(‘a’,’b’,[‘a’,’b’])$</p></blockquote><p>可以发现这一个$tuple$所指向的内容含有字符和一个$list$<br>$tuple$里面的内容的确不可以变，但$list$改变了之后list的地址还是不变的，所以就改了撒，看不懂可评论。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于这个list的了解我一直感觉就和C语言数组一样，但是仔细看了一下，到底不同，就让本蒟蒻带您去看看那些地方不同吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python基础" scheme="https://dream-ak.top/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="https://dream-ak.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python字符串和数组元组</title>
    <link href="https://dream-ak.top/2020/02/02/python%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://dream-ak.top/2020/02/02/python%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-02-02T12:21:42.000Z</published>
    <updated>2020-02-04T03:26:12.993Z</updated>
    
    <content type="html"><![CDATA[<p>首先我得说一句，这里得字符串编码有点玄学，如果讲开了有点可怕，所以我就在最开始得地方放一个大佬的链接算了，方便以后查阅<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017075323632896" target="_blank" rel="noopener">廖雪峰的笔记</a><br><a id="more"></a></p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>对于$python3$的编码格式是一个$Unicode$编码</p><h2 id="unicode-编码"><a href="#unicode-编码" class="headerlink" title="$unicode$编码"></a>$unicode$编码</h2><p>粗略解释一下，详情请访问廖雪峰的笔记：</p><blockquote><p>$Unicode$解决了各国语言的编码冲突，利用两个字节。<br>$UTF-8$编码是因为$Unicode$对于空间来说浪费高，所以折中出现了utf-8编码</p></blockquote><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>在计算机内存中，统一使用$Unicode$编码，当需要保存到硬盘或者需要传输的时候，就转换为$UTF-8$编码。</p><ol><li>用记事本编辑的时候，从文件读取的$UTF-8$字符被转换为$Unicode$字符到内存里，编辑完成后，保存的时候再把$Unicode$转换为$UTF-8$保存到文件。</li><li>浏览网页的时候，服务器会把动态生成的$Unicode$内容转换为$UTF-8$再传输到浏览器：<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2>$python3$的字符串是$Unicode$编码，也就是适合各种语言啦<blockquote><p>对于单个字符来说，我们支持$ord()$获得字符整数表示，$chr()$把编码转为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(chr(20320))</span><br><span class="line">print(ord(&apos;你&apos;))</span><br></pre></td></tr></table></figure><p>输出<br>你<br>20320</p></blockquote></li></ol><h3 id="len-计算字符串的字符数"><a href="#len-计算字符串的字符数" class="headerlink" title="$len$计算字符串的字符数"></a>$len$计算字符串的字符数</h3><p>$len(str)$返回一个整数，表示$str$所含有的字符数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strr=&quot;我爱你&quot;</span><br><span class="line">print(len(strr))</span><br></pre></td></tr></table></figure></p><blockquote><p>$output:$<br>3</p><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><p>$python$的格式化和C语言的大致相同<br>|占位符|替换内容|<br>|:-:|:-:|<br>|%s|字符串|<br>|%d|整数|<br>|%f|浮点数|<br>|%x|16进制整数|<br>不过有个区别我表示的重点提醒：<strong>print(“%s” % strr),不像C语言中间用逗号分隔</strong><br>顺带一个妙招，当你忘了要用什么的时候可以使用%s哦，他会自动转字符串，hhh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;%s %s&quot; % (520,False))</span><br></pre></td></tr></table></figure></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>对于$python$里的字符中不能直接相加，需要先把它用$ord$转成数字然后再用$chr$转回来！</li><li>对于字符串里面字符修改必须使用$repalce(old,new,count)$进行生成新的字符串对象！</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def index(head):</span><br><span class="line">    head=str(head)</span><br><span class="line">    if head[0]&gt;=&apos;a&apos;and head[0]&lt;=&apos;z&apos;:</span><br><span class="line">        return head.replace(head[0],chr(ord(head[0])-32),1)#返回一个新的字符串对象</span><br><span class="line">    return head</span><br><span class="line">L1 = [&apos;adam&apos;, &apos;LISA&apos;, &apos;barT&apos;]</span><br><span class="line">L2 = map(index,L1)</span><br><span class="line">print(list(L2))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先我得说一句，这里得字符串编码有点玄学，如果讲开了有点可怕，所以我就在最开始得地方放一个大佬的链接算了，方便以后查阅&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/1016959663602400/1017075323632896&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;廖雪峰的笔记&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python基础" scheme="https://dream-ak.top/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="https://dream-ak.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python启动</title>
    <link href="https://dream-ak.top/2020/02/02/python%E5%90%AF%E5%8A%A8/"/>
    <id>https://dream-ak.top/2020/02/02/python%E5%90%AF%E5%8A%A8/</id>
    <published>2020-02-02T08:27:48.000Z</published>
    <updated>2020-02-02T12:38:36.259Z</updated>
    
    <content type="html"><![CDATA[<p>在家无聊，想到python貌似挺好玩的，我就来试试，hhh，祝病毒早日被消灭<a id="more"></a></p><h1 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h1><h2 id="python编码格式"><a href="#python编码格式" class="headerlink" title="python编码格式"></a>python编码格式</h2><p>python的编码格式是按照缩进方式，代码就像下面这个一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = 100</span><br><span class="line">if a &gt;= 0:</span><br><span class="line">    print(a)</span><br><span class="line">else:</span><br><span class="line">    print(-a)</span><br></pre></td></tr></table></figure><br>和C语言的差别是c语言用大括号等价于这里的缩进</p><h2 id="python的注释"><a href="#python的注释" class="headerlink" title="python的注释"></a>python的注释</h2><blockquote><p>python的注释是通过#,以#开头全部注释掉<br>每遇到一个’$:$’号都会进行自动缩进，视为一个代码块<br>python大小写敏感。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><p>范围和C语言的$longlong$一致，应用方式和C语言用法一致</p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>字符串，他的用法和C语言的字符串用法类似，但是<strong>增加了$a[-x]$表示从后开始第x个字符</strong>，一般是由’或者”组成。</p><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><p>在一个字符串(仅包含数字)前加上int则会自动转换为int型数据类型,如下代码检测<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;123456&apos;</span><br><span class="line">print(type(a))</span><br><span class="line">a=int(a)</span><br><span class="line">print(type(a))</span><br></pre></td></tr></table></figure></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>python的输入使input();<br>在输入的时候加上提示的话就是在input(“hello world”);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = input(&quot;please input a math:&quot;)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><br>注意input输入的东西为字符串,以下验证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=input()</span><br><span class="line">print(type(a));</span><br></pre></td></tr></table></figure><br>对于这种情况我们一般直接在input前面加上一个int就好了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=int(input())</span><br><span class="line">print(type(a))</span><br></pre></td></tr></table></figure></p><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>与C语言相似的是我们一样可以采用”\n”换行，<strong>但增加了一个…换行的方式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;hhh...hhh...hhh&quot;)</span><br></pre></td></tr></table></figure><br>今日份复习到此结束，hhh，晚上在介绍一下其他的基础。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在家无聊，想到python貌似挺好玩的，我就来试试，hhh，祝病毒早日被消灭&lt;/p&gt;
    
    </summary>
    
    
      <category term="python基础" scheme="https://dream-ak.top/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="https://dream-ak.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>迪杰斯特拉堆优化</title>
    <link href="https://dream-ak.top/2020/02/01/%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E5%A0%86%E4%BC%98%E5%8C%96/"/>
    <id>https://dream-ak.top/2020/02/01/%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E5%A0%86%E4%BC%98%E5%8C%96/</id>
    <published>2020-02-01T06:53:49.000Z</published>
    <updated>2020-02-02T08:29:07.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迪杰斯特拉算法的堆优化"><a href="#迪杰斯特拉算法的堆优化" class="headerlink" title="迪杰斯特拉算法的堆优化"></a>迪杰斯特拉算法的堆优化</h1><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>使得最短路算法时间复杂度再次加快了一个档次变成了$n*\log_2 n$，让人更加头秃<a id="more"></a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>来说原理的话我建议可以讲一下迪杰斯特拉的算法思想，利用贪心，每一次走距离当前点$u$最近的点$v$，那么我们由原点到$v$一定会是最近的，因为$u$一开始就是最近的，那么<script type="math/tex">dis[u]+min(u\rightarrow v)\leq dis[u]+!min(u\rightarrow v)</script>根据这个我们可以知道我们只需</p><ol><li>维护一个最小堆来得到当前最小的$dis[u]$得到$u$的位置，然后找到$u$能到的点$v$的最短路径，得到$dis[v]$然后加入堆</li><li>循环1操作直到堆为空就好了。<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e+5;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id,w;</span><br><span class="line">&#125;ed[N];</span><br><span class="line">int head[N],tot=0,dis[N],vis[N];</span><br><span class="line">void add(int u,int v,int w)&#123;</span><br><span class="line">    ed[++tot].pre=head[u];</span><br><span class="line">    ed[tot].id=v;</span><br><span class="line">    ed[tot].w=w;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;int,int&gt; &gt;q;</span><br><span class="line">void dij_heap(int x)&#123;</span><br><span class="line">    int i;</span><br><span class="line">    memset(dis,0x3f,sizeof dis);</span><br><span class="line">    memset(vis,0,sizeof vis);</span><br><span class="line">    dis[x]=0;</span><br><span class="line">    q.push(make_pair(0,x));</span><br><span class="line">    while(!q.empty())&#123;</span><br><span class="line">        int u=q.top().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        if(vis[u]) continue;</span><br><span class="line">        vis[u]=1;</span><br><span class="line">        for(i=head[u];i;i=ed[i].pre)&#123;</span><br><span class="line">            if(dis[u]+ed[i].w&lt;=dis[ed[i].id])&#123;</span><br><span class="line">                dis[ed[i].id]=dis[u]+w;</span><br><span class="line">                q.push(-dis[ed[i].id],ed[i].id);//这里用负数使最大堆变最小堆</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    dij_heap();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;迪杰斯特拉算法的堆优化&quot;&gt;&lt;a href=&quot;#迪杰斯特拉算法的堆优化&quot; class=&quot;headerlink&quot; title=&quot;迪杰斯特拉算法的堆优化&quot;&gt;&lt;/a&gt;迪杰斯特拉算法的堆优化&lt;/h1&gt;&lt;h2 id=&quot;性能&quot;&gt;&lt;a href=&quot;#性能&quot; class=&quot;headerlink&quot; title=&quot;性能&quot;&gt;&lt;/a&gt;性能&lt;/h2&gt;&lt;p&gt;使得最短路算法时间复杂度再次加快了一个档次变成了$n*\log_2 n$，让人更加头秃&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="https://dream-ak.top/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="https://dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>差分约束</title>
    <link href="https://dream-ak.top/2020/01/30/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/"/>
    <id>https://dream-ak.top/2020/01/30/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/</id>
    <published>2020-01-30T13:33:49.000Z</published>
    <updated>2020-02-02T10:33:15.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="差分约束"><a href="#差分约束" class="headerlink" title="差分约束"></a>差分约束</h1><p>hhh，这几天病毒感染，真的不敢乱溜达，干脆狂写blog算了，hhh<br><a id="more"></a></p><h2 id="一般形式"><a href="#一般形式" class="headerlink" title="一般形式"></a>一般形式</h2><p>差分约束题一般是给出大量的一些不    等式</p><script type="math/tex; mode=display">a_i-b_i\leq x \rightarrow a_i\leq x + b_i</script><p>由上面这个不等式我们应该可以联想到最短路的不等式</p><script type="math/tex; mode=display">dis[u]\leq dis[v] + x(u \rightarrow v)</script><p>因此，我们可以将差分约束化成一个最短路来求，我们的$dis[u]$保存由远点到$u$的可以选择的最大范围!<br>==为什么是最大范围？==<br>我们每一次选择的是$min(u \rightarrow v)$，那么一开始我们就会选择一个从原点$s$最小的范围，且没有其他路径会是她变得更小(三角形)，那么这个由原点出发的范围将会是$s \rightarrow u$的范围，选择最大的话，就是这个范围啦。</p><h2 id="求最长路"><a href="#求最长路" class="headerlink" title="求最长路"></a>求最长路</h2><p>当求最大的范围时是最短路，已经说过了，但是如果求最小范围呢？<br>看一下基本形式</p><script type="math/tex; mode=display">a_i-b_i\geq x \rightarrow a_i \geq x + b_i</script><p>这个又是什么意思呢？试着把$a_i，b_i$也当作两个点，那么这就是</p><script type="math/tex; mode=display">dis[a_i]\geq dis[b_i] + x</script><p>也就是最长路的样子啦</p><h3 id="最长路"><a href="#最长路" class="headerlink" title="最长路"></a>最长路</h3><p>实现最长路的办法，我们试着用最短路的办法去试</p><ol><li>floyd $O(n^3)$很明显暴力枚举下面肯定是可以的，但是复杂度实在太高，放弃</li><li>dijstra基于贪心的算法，我们最长路的贪心是做不到的，从三角形来看是很明显的，遂继续放弃</li><li>bellman_ford差不多就是暴力对所有的边进行n-1次遍历了==一条最长路最多经过$n-1$次松弛==，在这里最长路也是这样啊，时间复杂度的话，我们可以考虑<s>已经死了的</s> spfa呀，<s>死了不要紧</s>我们可以优化<h3 id="spfa玄学优化"><a href="#spfa玄学优化" class="headerlink" title="spfa玄学优化"></a>spfa玄学优化</h3></li><li>双端队列优化，一个非常常见的优化，当边权小于队首时从队首加入，否则队尾！</li><li>双端慢了？没事我们可以数组模拟，强行加速！</li><li>啊，还是tle？淡定加容错优化，我们首先把所有边权加起来开个根号后加上一个容错值$x$然后当当前边权小于队首边权加上容错时从队首加入，否则队尾，继续强行加速！</li><li>听说还是tle？emmm，等死吧</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;差分约束&quot;&gt;&lt;a href=&quot;#差分约束&quot; class=&quot;headerlink&quot; title=&quot;差分约束&quot;&gt;&lt;/a&gt;差分约束&lt;/h1&gt;&lt;p&gt;hhh，这几天病毒感染，真的不敢乱溜达，干脆狂写blog算了，hhh&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="https://dream-ak.top/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="https://dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>vscode背景配置</title>
    <link href="https://dream-ak.top/2020/01/30/vscode%E8%83%8C%E6%99%AF%E9%85%8D%E7%BD%AE/"/>
    <id>https://dream-ak.top/2020/01/30/vscode%E8%83%8C%E6%99%AF%E9%85%8D%E7%BD%AE/</id>
    <published>2020-01-30T13:00:23.000Z</published>
    <updated>2020-02-03T08:01:28.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode背景"><a href="#vscode背景" class="headerlink" title="vscode背景"></a>vscode背景</h1><p>vscode花里胡哨的背景怎么能却得了？我也来瞎搞俩！<br><a id="more"></a></p><h2 id="安装background"><a href="#安装background" class="headerlink" title="安装background"></a>安装background</h2><p>扩展商店安装就好了<br>这里会弹出code损坏，莫急，往下看</p><h2 id="下载-Fix-vscode-checksum"><a href="#下载-Fix-vscode-checksum" class="headerlink" title="下载 Fix vscode checksum"></a>下载 Fix vscode checksum</h2><p>扩展商店下载好以后按下ctrl+shift+p<br>输入 Fix checksum 选择apply就行了<br><img src="/2020/01/30/vscode%E8%83%8C%E6%99%AF%E9%85%8D%E7%BD%AE/2.png" alt="2"></p><h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><p>管理员运行vscode，打开以后按如下图操作打开setting.json<img src="/2020/01/30/vscode%E8%83%8C%E6%99%AF%E9%85%8D%E7%BD%AE/1.png" alt="1"></p><h2 id="编辑setting-json"><a href="#编辑setting-json" class="headerlink" title="编辑setting.json"></a>编辑setting.json</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;background.enabled&quot;: true,</span><br><span class="line">    &quot;background.useDefault&quot;: false,</span><br><span class="line">    &quot;background.customImages&quot;: [</span><br><span class="line">        &quot;file:///E:background/vscode.png&quot;//你的图片的绝对路径</span><br><span class="line">    ],</span><br><span class="line">  &quot;background.style&quot;: &#123;</span><br><span class="line">    &quot;content&quot;: &quot;&apos;&apos;&quot;,</span><br><span class="line">    &quot;pointer-events&quot;: &quot;none&quot;,</span><br><span class="line">    &quot;position&quot;: &quot;absolute&quot;,</span><br><span class="line">    &quot;z-index&quot;: &quot;99999&quot;,</span><br><span class="line">    &quot;width&quot;: &quot;100%&quot;,</span><br><span class="line">    &quot;height&quot;: &quot;100%&quot;,</span><br><span class="line">    &quot;background-size&quot;: &quot;cover&quot;,</span><br><span class="line">    &quot;background-position&quot;: &quot;50% 50%&quot;,</span><br><span class="line">    &quot;background-repeat&quot;: &quot;no-repeat&quot;,</span><br><span class="line">    &quot;opacity&quot;: 0.1</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;workbench.iconTheme&quot;: &quot;vscode-icons&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来可能会要求你重启就完成了</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vscode背景&quot;&gt;&lt;a href=&quot;#vscode背景&quot; class=&quot;headerlink&quot; title=&quot;vscode背景&quot;&gt;&lt;/a&gt;vscode背景&lt;/h1&gt;&lt;p&gt;vscode花里胡哨的背景怎么能却得了？我也来瞎搞俩！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="vscode" scheme="https://dream-ak.top/categories/vscode/"/>
    
    
      <category term="安装指南" scheme="https://dream-ak.top/tags/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>vscode配置c</title>
    <link href="https://dream-ak.top/2020/01/29/vscode%E9%85%8D%E7%BD%AEc/"/>
    <id>https://dream-ak.top/2020/01/29/vscode%E9%85%8D%E7%BD%AEc/</id>
    <published>2020-01-28T16:45:47.000Z</published>
    <updated>2020-01-30T13:31:33.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscodec-c-环境配置"><a href="#vscodec-c-环境配置" class="headerlink" title="vscodec/c++环境配置"></a>vscodec/c++环境配置</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>vscode编辑器比较强大，被朋友介绍以后感觉不错，至少不用一个语言就开一个编辑器了，省心，目录也看着挺方便的，我就捣鼓一会也弄了一个。<br><a id="more"></a></p><h2 id="1-下载DEV"><a href="#1-下载DEV" class="headerlink" title="1.下载DEV"></a>1.下载DEV</h2><p>也许有人会问不是vscode嘛？为啥下载这个，因为vscode是编辑器我们需要下载一个编译器，我们就把DEV里面的mingw单独拿出来添加环境变量，提供编译环境。<br>下载网址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dl.pconline.com.cn/download/908942-1.html</span><br></pre></td></tr></table></figure><br>进入后点击普通下载，安装好。</p><h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h2><p>1.右击电脑属性后<br>2.进入高级设置点击环境变量<br>3.在系统变量Path里面增加mingw64/bin的路径<br>声明一下mingw64/bin就在之前下的DEV文件里面，桌面右击快捷方式打开文件所在地址就可以找到该文件了<br><img src="/2020/01/29/vscode%E9%85%8D%E7%BD%AEc/1.png" alt="1"><br>从左至右逐一执行后<strong>点击确定</strong>。<br>打开cmd输入gcc如果返回的是<br>gcc: fatal error: no input files<br>compilation terminated.<br>那么环境就配好了，否则重启一下电脑再试一下，再不行的话就是环境配置失败，再来吧</p><h2 id="3-下载vscode"><a href="#3-下载vscode" class="headerlink" title="3.下载vscode"></a>3.下载vscode</h2><p>下载地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://code.visualstudio.com/Download</span><br></pre></td></tr></table></figure><br>下载过程中一路确定就好了。<br>声明：<strong>安装路径不得含有中文！不然之后的操作会有玄学错误，gdb退出代码为-3</strong></p><h2 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h2><p>chinese 汉化工具<br>打开vscode工具，使用快捷键组合【command+Shift+p】，在搜索框中输入“configure display language”，点击确定后；修改locale.json文件下的属性“locale”为“zh-CN”;</p><p>重启vscode工具</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>c/c++ c配置必须的<br>vscode-icons美化图标工具<br>chinese 汉化工具<br>Bracket Pair Colorizer 一起安装算了<br>beautify 美化工具</p><p><img src="/2020/01/29/vscode%E9%85%8D%E7%BD%AEc/5.png" alt="5"></p><h2 id="4-文件配置"><a href="#4-文件配置" class="headerlink" title="4.文件配置"></a>4.文件配置</h2><p>1.我们首先写一个test.cpp文件<br><strong>代码里面必须含有一个输入getchar或者scanf都行</strong>,不然后面看不到输出效果，直接说返回值为1</p><h3 id="launch文件"><a href="#launch文件" class="headerlink" title="launch文件"></a>launch文件</h3><p>2.从左到右操作，创建launch.json文件<br><img src="/2020/01/29/vscode%E9%85%8D%E7%BD%AEc/2.png" alt="2"><br>3.使用gdb创建<br><img src="/2020/01/29/vscode%E9%85%8D%E7%BD%AEc/3.png" alt="3"><br>之后点击gcc.exe生成一个文件，在该文件里面添加下面这段代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    // 悬停以查看现有属性的描述。</span><br><span class="line">    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;gcc.exe build and debug active file&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: true, //这里是控制台时候打开运行一般是true！</span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,</span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;D:\\progress\\Dev-Cpp\\MinGW64\\bin\\gdb.exe&quot;, //你的环境gdb.exe文件地址，我这里是在DEV-cpp里面，如果你安装方式和我差不多的话，那你的也在dev里面。</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: true</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;gcc.exe build active file&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>两个要注意的地方</strong><br>1.miDebuggerPath这是你的gdb.exe文件地址，注意要修改正确！（好像还有一个gdb32.exe你看那一个成功用那个吧）<br>2.externalConsole这里是true！</p><h3 id="tasks-json文件"><a href="#tasks-json文件" class="headerlink" title="tasks.json文件"></a>tasks.json文件</h3><p>这个文件我们手动添加，在.vscode文件里面创建<strong>tasks.json</strong>注意别打错了添加如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;label&quot;: &quot;gcc.exe build active file&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;D:\\progress\\Dev-Cpp\\MinGW64\\bin\\gcc.exe&quot;,//你的文件地址</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-g&quot;,</span><br><span class="line">                &quot;$&#123;file&#125;&quot;,</span><br><span class="line">                &quot;-o&quot;,</span><br><span class="line">                &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;options&quot;: &#123;</span><br><span class="line">                &quot;cwd&quot;: &quot;D:\\progress\\Dev-Cpp\\MinGW64\\bin&quot;//你的文件地址</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面代码两个地方需要修改，请仔细看！<br>此时再回到test.cpp里面按F5运行一下，应该能输出了。<br><img src="/2020/01/29/vscode%E9%85%8D%E7%BD%AEc/4.png" alt="4"></p><h2 id="到此环境安装结束！撒花"><a href="#到此环境安装结束！撒花" class="headerlink" title="到此环境安装结束！撒花"></a>到此环境安装结束！撒花</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vscodec-c-环境配置&quot;&gt;&lt;a href=&quot;#vscodec-c-环境配置&quot; class=&quot;headerlink&quot; title=&quot;vscodec/c++环境配置&quot;&gt;&lt;/a&gt;vscodec/c++环境配置&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;vscode编辑器比较强大，被朋友介绍以后感觉不错，至少不用一个语言就开一个编辑器了，省心，目录也看着挺方便的，我就捣鼓一会也弄了一个。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="vscode" scheme="https://dream-ak.top/categories/vscode/"/>
    
    
      <category term="安装指南" scheme="https://dream-ak.top/tags/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>欧拉函数</title>
    <link href="https://dream-ak.top/2020/01/28/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    <id>https://dream-ak.top/2020/01/28/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</id>
    <published>2020-01-28T03:19:55.000Z</published>
    <updated>2020-02-07T13:28:07.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h1><blockquote><p><code>欧拉函数是一个用于求1~n里面所有的与n互质数字的个数</code><br><a id="more"></a></p><h2 id="欧拉函数的性质"><a href="#欧拉函数的性质" class="headerlink" title="欧拉函数的性质"></a>欧拉函数的性质</h2><div class="table-container"><table><thead><tr><th style="text-align:center">公式</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">$φ(x <em> y) = φ(x) </em> φ(y)$</td><td style="text-align:center"><strong>当且(x,y)==1</strong></td></tr><tr><td style="text-align:center">$φ(x) = x - 1$</td><td style="text-align:center"><strong>当且仅当x为质数时</strong></td></tr><tr><td style="text-align:center">$φ(n) = (p-1) * p^{k-1}$</td></tr><tr><td style="text-align:center">$φ(n)=n∗∏(1−1/p_i)$</td><td style="text-align:center"><strong>pi是n的质因子</strong></td></tr><tr><td style="text-align:center">$a^{φ(m)}==1%m$</td><td style="text-align:center"><strong>当且仅当(a,m)==1</strong></td></tr><tr><td style="text-align:center">$s = n * (φ(n)/2)$</td><td style="text-align:center"><strong>s：小于n且与n互质的数之和</strong></td></tr><tr><td style="text-align:center">$φ(n <em> p)=φ(n) </em> p$</td><td style="text-align:center"><strong>当p为质数且n%p==0</strong></td></tr><tr><td style="text-align:center">$φ(n <em> p)=φ(n) </em> (p-1)$</td><td style="text-align:center"><strong>当p为质数且n%p!=0</strong></td></tr></tbody></table></div></blockquote><h2 id="计算欧拉值的打表代码-时间复杂度O-n"><a href="#计算欧拉值的打表代码-时间复杂度O-n" class="headerlink" title="计算欧拉值的打表代码,时间复杂度O(n)"></a>计算欧拉值的打表代码,时间复杂度O(n)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">phi[1]=1;</span><br><span class="line">for(int i=2;i&lt;n;i++)&#123;</span><br><span class="line">if(vis[i]==0) pri[++tot]=i,phi[i]=i-1;</span><br><span class="line">for(int j=1;j&lt;=tot&amp;&amp;1ll*i*pri[j]&lt;n;j++)&#123;</span><br><span class="line">vis[i*pri[j]]=1;//标记此点经过非质数</span><br><span class="line">if(i%pri[j]==0) &#123;</span><br><span class="line">phi[i*pri[j]]=phi[i]*pri[j];//性质7</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">else phi[i*pri[j]]=phi[i]*(pri[j]-1);//性质8</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用性质4计算单个欧拉值"><a href="#用性质4计算单个欧拉值" class="headerlink" title="用性质4计算单个欧拉值"></a>用性质4计算单个欧拉值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int ph(int n)&#123;</span><br><span class="line">int res=n,i;</span><br><span class="line">    for(i=2;i*i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(n%i==0)</span><br><span class="line">        &#123;</span><br><span class="line">            res=res-res/i;</span><br><span class="line">            while(n%i==0) n/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(n&gt;1)</span><br><span class="line">        res=res-res/n;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;欧拉函数&quot;&gt;&lt;a href=&quot;#欧拉函数&quot; class=&quot;headerlink&quot; title=&quot;欧拉函数&quot;&gt;&lt;/a&gt;欧拉函数&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;欧拉函数是一个用于求1~n里面所有的与n互质数字的个数&lt;/code&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="数论" scheme="https://dream-ak.top/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>割点</title>
    <link href="https://dream-ak.top/2020/01/20/%E5%89%B2%E7%82%B9/"/>
    <id>https://dream-ak.top/2020/01/20/%E5%89%B2%E7%82%B9/</id>
    <published>2020-01-20T14:21:29.000Z</published>
    <updated>2020-01-29T13:32:39.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="割点"><a href="#割点" class="headerlink" title="割点"></a>割点</h1><h3 id="割点定义："><a href="#割点定义：" class="headerlink" title="割点定义："></a>割点定义：</h3><p>对于一个无向图，如果把一个点删除后这个图的极大连通分量数增加了，那么这个点就是这个图的割点（又称割顶）。<br><br><a id="more"></a><br><img src="/2020/01/20/%E5%89%B2%E7%82%B9/bridge1.png" alt="割点"><br><br>易得割点是2号点。</p><h3 id="具体操作："><a href="#具体操作：" class="headerlink" title="具体操作："></a>具体操作：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.用dfs给每一个点打上一个时间戳，把每一个点的时间戳保存至num【】里面；</span><br><span class="line">2.通过dfs来统计每一个点能到达的最小的时间戳。&lt;br&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/20/%E5%89%B2%E7%82%B9/bridge2.png" alt="时间戳"><br></p><h3 id="割点的判定方式："><a href="#割点的判定方式：" class="headerlink" title="割点的判定方式："></a>割点的判定方式：<br></h3><ol><li>如果存在一个点他的子节点能到达的最小时间戳大于等于父节点的时间戳那么这个点是一个割点。(也就是不能回到祖先，那么当前点就是割点咯)</li><li>假设一个点存在两个子节点，那么该点就是割点。<br><br><img src="/2020/01/20/%E5%89%B2%E7%82%B9/bridge3.png" alt="判定2"><br><br>我们在访问 1 的儿子时候，假设先 DFS 到了 2，然后标记用过，然后递归往下，来到了 4，4 又来到了 3，当递归回溯的时候，会发现 3 已经被访问过了，所以不是割点。<br><br>更新 low 的伪代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果 v 是 u 的儿子 low[u] = min(low[u], low[v]);</span><br><span class="line">否则</span><br><span class="line">low[u] = min(low[u], num[v]);//这里是num[v]而不是low[v]的原因是如下图</span><br><span class="line">//按照节点编号从小到大遍历，4节点先到1，如果是low[v]的话，节点6的low值等于1，很明显是不可以的，所以是num</span><br></pre></td></tr></table></figure><img src="/2020/01/20/%E5%89%B2%E7%82%B9/gedian.png" alt="这是栗子"><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><a href="https://www.luogu.com.cn/problem/P3388" target="_blank" rel="noopener">板子题</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;stack&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N=2e5+5;</span><br><span class="line">typedef long long ll;</span><br><span class="line">struct ED&#123;</span><br><span class="line">int pre,id;</span><br><span class="line">&#125;ed[N];</span><br><span class="line">int head[N],tot=1,cnt=0;</span><br><span class="line">int vis[N],num[N],low[N],inde,res,flag[N];</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">ed[++tot].id=v;</span><br><span class="line">ed[tot].pre=head[u];</span><br><span class="line">head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">void tarjan(int u,int fa)&#123;</span><br><span class="line">vis[u]=1;</span><br><span class="line">low[u]=num[u]=++inde;</span><br><span class="line">int ch=0,i;</span><br><span class="line">for(i=head[u];i;i=ed[i].pre)&#123;</span><br><span class="line">int v=ed[i].id;</span><br><span class="line">if(!vis[v])&#123;</span><br><span class="line">ch++;</span><br><span class="line">tarjan(v,u);</span><br><span class="line">low[u]=min(low[u],low[v]);</span><br><span class="line">if(fa!=u&amp;&amp;low[v]&gt;=num[u]&amp;&amp;!flag[u]) flag[u]=1,res++;</span><br><span class="line">&#125;</span><br><span class="line">else if(v!=fa)&#123;</span><br><span class="line">low[u]=min(low[u],num[v]);//这里非常关键，如果写成low[u]=min(low[u],low[v])在题目里面会wa</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(ch&gt;= 2&amp;&amp;fa==u&amp;&amp;!flag[u])&#123;</span><br><span class="line">flag[u]=1;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n,m,i,j,k;</span><br><span class="line">scanf(&quot;%d %d&quot;,&amp;n,&amp;m);</span><br><span class="line">for(i=1;i&lt;=n;i++) head[i]=0,vis[i]=0;</span><br><span class="line">int u,v;</span><br><span class="line">for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">scanf(&quot;%d %d&quot;,&amp;u,&amp;v);</span><br><span class="line">add(u,v);</span><br><span class="line">add(v,u);</span><br><span class="line">&#125;</span><br><span class="line">for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">if(!vis[i])&#123;</span><br><span class="line">inde=0;</span><br><span class="line">tarjan(i,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;,res);</span><br><span class="line">for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">if(flag[i]) printf(&quot;%d &quot;,i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;割点&quot;&gt;&lt;a href=&quot;#割点&quot; class=&quot;headerlink&quot; title=&quot;割点&quot;&gt;&lt;/a&gt;割点&lt;/h1&gt;&lt;h3 id=&quot;割点定义：&quot;&gt;&lt;a href=&quot;#割点定义：&quot; class=&quot;headerlink&quot; title=&quot;割点定义：&quot;&gt;&lt;/a&gt;割点定义：&lt;/h3&gt;&lt;p&gt;对于一个无向图，如果把一个点删除后这个图的极大连通分量数增加了，那么这个点就是这个图的割点（又称割顶）。&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="https://dream-ak.top/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>扩展欧几里得</title>
    <link href="https://dream-ak.top/2020/01/14/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/"/>
    <id>https://dream-ak.top/2020/01/14/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/</id>
    <published>2020-01-14T11:59:52.000Z</published>
    <updated>2020-01-29T13:32:38.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="扩展欧几里得"><a href="#扩展欧几里得" class="headerlink" title="扩展欧几里得"></a>扩展欧几里得</h1><p>应用：计算逆元，解方程<br><a id="more"></a></p><h2 id="证明方式："><a href="#证明方式：" class="headerlink" title="证明方式："></a>证明方式：</h2><p>首先贝祖原理我大概就不解释了，直接照搬结论：<br></p><ol><li>ax+by=(a,b);贝祖原理<br></li><li>有ax+by=(b,a%b);<br></li><li>假设解为x1,y1则有a <em> x1+b </em> y1=(b,a%b)<br></li><li>由3式从右往左代替可得b <em> x1+(a%b) </em> y1 = (b,a%b);<br><br>b <em> x1 + (a-(a/b) </em> b) <em> y1 = (b,a%b);<br><br>a </em> y1 +b <em> (x1 - (a/b) </em> y1) = a <em> x + b </em> y<br><br>由上可知x = y1,y = x1 - (a/b) * y1。</li></ol><p>对于上式，我们可以比较一下欧几里得求最大公约数的算法：</p><ol><li>(a,b)=(b,a%b)，一直到b等于0时结束递归，而当b等于0时的x=1,y=0();</li></ol><p>然后又可以通过上面代数式4回退时计算出x与y的值！</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ll x,y;</span><br><span class="line">ll ex_gcd(ll a,ll b)&#123;</span><br><span class="line">if(!b)&#123;</span><br><span class="line">x=1,y=0;</span><br><span class="line">return a;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=ex_gcd(b,a%b);</span><br><span class="line">ll t=x;</span><br><span class="line">x=y;</span><br><span class="line">y=t-a/b*y;</span><br><span class="line">return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h3><p>当求一个数字x对于p的逆元时，我们将其写成代数式将是如下形式：</p><ol><li>a*x=1%p;</li></ol><p>对其进行化简可得a <em> x+y </em> p=1，已知x,p求a就好了化简成这样以后再看，简直就是扩展欧几里得板子！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;扩展欧几里得&quot;&gt;&lt;a href=&quot;#扩展欧几里得&quot; class=&quot;headerlink&quot; title=&quot;扩展欧几里得&quot;&gt;&lt;/a&gt;扩展欧几里得&lt;/h1&gt;&lt;p&gt;应用：计算逆元，解方程&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数论" scheme="https://dream-ak.top/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="https://dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>欧拉筛</title>
    <link href="https://dream-ak.top/2020/01/14/%E6%AC%A7%E6%8B%89%E7%AD%9B/"/>
    <id>https://dream-ak.top/2020/01/14/%E6%AC%A7%E6%8B%89%E7%AD%9B/</id>
    <published>2020-01-14T07:33:59.000Z</published>
    <updated>2020-02-07T13:16:21.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h1><p>欧拉函数打表简单版！<br><a id="more"></a></p><h2 id="欧拉筛证明："><a href="#欧拉筛证明：" class="headerlink" title="欧拉筛证明："></a>欧拉筛证明：</h2><p>首先介绍一下算术基本原理：$x=p_1^{e1} <em> p_2^{e_2} </em> p_3^{e_3}$…(p为质数，e为正数，x为任意不为1的正整数)<br>由上可以知道任意一个合数都是由一个质数乘以一个其他数字组成！<br>所以我们可以通过枚举一个质数和一个其他非$1$的正整数来判断来其他合数。<br>但是为了提高其运算速率，我们想要对于任意一个合数仅判断一次时我们可以考虑，采用其最小的质数就行了，因为<strong>最小的质数只有一个且另一个非$1$正整数数仅用一次，那么任意一个合数只会判断一次</strong>咯</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void erlu(int n)&#123;</span><br><span class="line">int i,j,k;</span><br><span class="line">  for(i=1;i&lt;=n;i++) vis[i]=pri[i]=0;</span><br><span class="line">for(i=2;i&lt;=n;i++)&#123;枚举非1正整数</span><br><span class="line">if(!vis[i])&#123;</span><br><span class="line">pri[++tot]=i;</span><br><span class="line">&#125;</span><br><span class="line">for(j=1;j&lt;=tot&amp;&amp;(i*pri[j]&lt;=n);j++)&#123;//枚举素数</span><br><span class="line">vis[i*pri[j]]=pri[j];//保存质数表，每一个空间表示该下标的最小质数！</span><br><span class="line">if(i%pri[j]==0) break;//原因在下注明</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>break的原因是如果该循环继续下去的话(i*pri[j]的最小素数其实不是pri[j]，而是之前能被整除的那个素数，不break的话，一个合数的判断次数就会增加)</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;欧拉筛&quot;&gt;&lt;a href=&quot;#欧拉筛&quot; class=&quot;headerlink&quot; title=&quot;欧拉筛&quot;&gt;&lt;/a&gt;欧拉筛&lt;/h1&gt;&lt;p&gt;欧拉函数打表简单版！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数论" scheme="https://dream-ak.top/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="https://dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>差分数组实例</title>
    <link href="https://dream-ak.top/2019/11/26/IncDec%E5%BA%8F%E5%88%97%20%20%20%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/"/>
    <id>https://dream-ak.top/2019/11/26/IncDec%E5%BA%8F%E5%88%97%20%20%20%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/</id>
    <published>2019-11-26T06:25:59.000Z</published>
    <updated>2020-02-03T06:52:06.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接请点击此处"><a href="#题目链接请点击此处" class="headerlink" title="题目链接请点击此处"></a><a href="https://www.acwing.com/problem/content/description/102/" target="_blank" rel="noopener">题目链接请点击此处</a></h2><p>大致讲一下题意，给一个数组，让我用最少的次数将这个数组重置为相同的值，也就是数组内所有数字大小必须相同，<strong>而每一次操作仅允许对一个区间进行+1或者-1的操作。</strong><br><a id="more"></a><br>区间修改，而且是修改相同的值，就让我想到了差分数组，<a href="https://blog.csdn.net/qq_42937891/article/details/97548366" target="_blank" rel="noopener">差分数组不熟悉的请点击</a>让每一个值都相同其实就是让<strong>差分数组从第二个开始都为0！当从第二个开始都为0时那么整个数组都会变成第一个值的大小。</strong><br>那么首先就先将这一题所给原数组转化为差分数组，然后计算从第二个位置开始数组元素全部转化为0的步数。这里可以<strong>逆向思考，从0恢复到原数组元素的步数就是题目所问的最少步数，而恢复原数组的最快步数就是ans=max(正数之和，负数之和的绝对值)</strong>；解释一下：因为差分数组每一次变化都会产生一对相反数，而那么我只需要注意绝对值大的就行了，至于多出来的正数或者负数其实是可以放在最后的也就是n+1或者放到<strong>第一个位置(这里一开始没有运算</strong>!)的位置。至此步数就解决了！！！<br>现在解决有多少种的问题：首先我之前说了一句，在经过最少次数变化以后，整个数组都会变成第一个数字的值，那么种类个数只需要考虑一下第一个数字有多少种可能就行了！<strong>在之前说过可以放第一个位置，为什么呢，因为放到这里可以改变整个数组的值，也就是中间可以放多少个，就可以改变多少次，所以答案就是（正数-负数）的绝对值+1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[100009],n,m,i,j,k;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(i=1;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    int c[100009],ko=a[1];</span><br><span class="line">    for(i=2;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i]=a[i]-ko;</span><br><span class="line">        ko=a[i];</span><br><span class="line">    &#125;//差分数组</span><br><span class="line">    long long sum2=0,sum1=0,maxx=0,minn=c[1];</span><br><span class="line">    for(i=2;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(c[i]&gt;0) sum1+=c[i];</span><br><span class="line">        else sum2-=c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%lld\n&quot;,max(sum1,sum2));</span><br><span class="line">    printf(&quot;%lld\n&quot;,abs(sum1-sum2)+1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接请点击此处&quot;&gt;&lt;a href=&quot;#题目链接请点击此处&quot; class=&quot;headerlink&quot; title=&quot;题目链接请点击此处&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/description/102/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接请点击此处&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;大致讲一下题意，给一个数组，让我用最少的次数将这个数组重置为相同的值，也就是数组内所有数字大小必须相同，&lt;strong&gt;而每一次操作仅允许对一个区间进行+1或者-1的操作。&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="基础算法" scheme="https://dream-ak.top/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM" scheme="https://dream-ak.top/tags/ACM/"/>
    
  </entry>
  
</feed>
