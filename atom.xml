<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>添砖Java</title>
  
  <subtitle>屡败屡战，终有一胜！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.dream-ak.top/"/>
  <updated>2020-05-06T15:05:17.037Z</updated>
  <id>https://www.dream-ak.top/</id>
  
  <author>
    <name>无向秃</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CCPC Wannafly Winter Camp Day2</title>
    <link href="https://www.dream-ak.top/2020/05/02/Day2/"/>
    <id>https://www.dream-ak.top/2020/05/02/Day2/</id>
    <published>2020-05-02T11:35:21.000Z</published>
    <updated>2020-05-06T15:05:17.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="持续更新中，，，"><a href="#持续更新中，，，" class="headerlink" title="持续更新中，，，"></a>持续更新中，，，</h1><p>2020年5月2日，过了这么久我来写朋友们1月份写过的wls集训营的题目，看了一下，，，懵了。唉，在家直接颓废了，思维都跟不上了。<a id="more"></a><br>今天队友过来A，我过了C说句实在的A我还是有点懵，但是C我是知道了。先来一个C的题解。</p><h2 id="C博弈"><a href="#C博弈" class="headerlink" title="C博弈"></a>C博弈</h2><p>关于这题呢，求有多少种必胜方案。题目明显是一个$nim$博弈，同时先空的输，因而我们可以知道，<strong>先手必胜也就是先手拿完以后，进入平衡态，剩余数组异或值为0</strong>，那么首先朴素算法。</p><h3 id="朴素做法"><a href="#朴素做法" class="headerlink" title="朴素做法"></a>朴素做法</h3><p>暴力枚举：$CurNor \oplus a_i &lt; a_i$的数量，输出该数量就是答案了。($CurNor$当前的异或值)<br>枚举$i$明显超时。</p><h3 id="bouton定理"><a href="#bouton定理" class="headerlink" title="bouton定理"></a>bouton定理</h3><p>没错，这里又是一个定理。异或和的最高的为1的二进制位，所有这一位是1的y显然都是必胜态，这一位是0的不是必胜态。<br>为啥？<br>如果是必胜态，那么一定存在</p><script type="math/tex; mode=display">CurNor \oplus a_i \leq a_i</script><p>因为$a_i$里面的某一位变成了$0$以后，不管后面数字怎么变都只会变小，所以上式成立。<br>同时如果不是必胜态，那么一定存在<script type="math/tex">CurNor \oplus a_i > a_i</script><br>因为$a_i$里面有一位变成了$1$，不管后面怎么变，都会变大。所以也成立。<br>证毕。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e5+5;</span><br><span class="line">typedef long long ll;</span><br><span class="line">#define rep(i,a,b) for(i=(a);i&lt;=b;i++)</span><br><span class="line">#define pt(a) printf(&quot;%d\n&quot;,(a))</span><br><span class="line">ll a[N];</span><br><span class="line">int cnt[N],ans[N];</span><br><span class="line">ll sum=0;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m,i,j,k,t=0;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    rep(i,1,n)&#123;</span><br><span class="line">        scanf(&quot;%lld&quot;,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,1,n)&#123;</span><br><span class="line">        int pos=0;</span><br><span class="line">        rep(j,0,60)&#123;</span><br><span class="line">            if(a[i]&amp;(1ll&lt;&lt;j)) cnt[j]++;</span><br><span class="line">        &#125;</span><br><span class="line">        sum^=a[i];</span><br><span class="line">        if(sum==0)&#123;</span><br><span class="line">            ans[i]=0;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        pos = 0;</span><br><span class="line">        rep(j,0,60)&#123;</span><br><span class="line">            if(sum&amp;(1ll&lt;&lt;j)) pos=j;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[i]=cnt[pos];</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,1,n)&#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    //system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="E树上启发式合并"><a href="#E树上启发式合并" class="headerlink" title="E树上启发式合并"></a>E树上启发式合并</h2><p>普及概念：</p><ol><li>重点： 表示其子节点中子树最大的子结点。</li><li>重边：一个节点的重边是自身节点与重点的连边。</li></ol><p>赛时队友提问：请问有啥好的数据结构能做到在插入是$log$情况下还能二分的吗？本憨批回答，无。我怕不是真憨批。$set$呀！！！错亿，这锅我背了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e5+5;</span><br><span class="line">typedef long long ll;</span><br><span class="line">#define rep(i,a,b) for(i=(a);i&lt;=b;i++)</span><br><span class="line">#define pt(a) printf(&quot;%lld\n&quot;,(a))</span><br><span class="line">set&lt;int&gt; q[N];</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id;</span><br><span class="line">&#125;ed[N];</span><br><span class="line">int head[N],tot=0,sz[N],son[N];</span><br><span class="line">ll ans[N];</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">    ed[++tot].pre=head[u];</span><br><span class="line">    ed[tot].id=v;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">void dfs1(int u)&#123;</span><br><span class="line">    int x = 0,sum=1;</span><br><span class="line">    for(int i=head[u];i;i=ed[i].pre)&#123;</span><br><span class="line">        int v =ed[i].id;</span><br><span class="line">        dfs1(v);</span><br><span class="line">        sum+=sz[v];</span><br><span class="line">        if(sz[v]&gt;sz[x]) x=v;</span><br><span class="line">    &#125;</span><br><span class="line">    sz[u]=sum;</span><br><span class="line">    son[u]=x;</span><br><span class="line">&#125;</span><br><span class="line">void query(int u,int x)&#123;</span><br><span class="line">    set&lt;int&gt;:: iterator it = q[u].lower_bound(x);</span><br><span class="line">    if(q[u].empty())&#123;</span><br><span class="line">        q[u].insert(x);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    if(it==q[u].begin())&#123;</span><br><span class="line">        ll r = *it;</span><br><span class="line">        ans[u]+=1ll*(r-x)*(r-x);</span><br><span class="line">        q[u].insert(x);</span><br><span class="line">        //printf(&quot;%d %lld l\n&quot;,x,r);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    if(it==q[u].end())&#123;</span><br><span class="line">        ll l = *--it;</span><br><span class="line">        ans[u]+=1ll*(x-l)*(x-l);</span><br><span class="line">        q[u].insert(x);</span><br><span class="line">        //printf(&quot;%d r\n&quot;,x);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    ll r = *it,l=*(--it);</span><br><span class="line">    ans[u]-=(r-l)*(r-l);</span><br><span class="line">    ans[u]+=1ll*(r-x)*(r-x);</span><br><span class="line">    ans[u]+=1ll*(x-l)*(x-l);</span><br><span class="line">    q[u].insert(x);</span><br><span class="line">&#125;</span><br><span class="line">void dfs3(int u,int pos)&#123;</span><br><span class="line">    for(int i=head[u];i;i=ed[i].pre)&#123;</span><br><span class="line">        int v = ed[i].id;</span><br><span class="line">        dfs3(v,pos);</span><br><span class="line">    &#125;</span><br><span class="line">    query(pos,u);</span><br><span class="line">&#125;</span><br><span class="line">void dfs2(int u)&#123;</span><br><span class="line">    for(int i=head[u];i;i=ed[i].pre)&#123;</span><br><span class="line">        int v = ed[i].id;</span><br><span class="line">        dfs2(v);</span><br><span class="line">    &#125;</span><br><span class="line">    q[u].swap(q[son[u]]);</span><br><span class="line">    ans[u]=ans[son[u]];</span><br><span class="line">    for(int i=head[u];i;i=ed[i].pre)&#123;</span><br><span class="line">        int v = ed[i].id;</span><br><span class="line">        if(v==son[u]) continue;</span><br><span class="line">        q[v].clear();</span><br><span class="line">        dfs3(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    query(u,u);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m,i,j,k,t=0;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    rep(i,2,n)&#123;</span><br><span class="line">        int u;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;u);</span><br><span class="line">        add(u,i);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(1);</span><br><span class="line">    dfs2(1);</span><br><span class="line">    rep(i,1,n)&#123;</span><br><span class="line">        pt(ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    //system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>写完这个代码，嗯，说句实在的，感觉算法不是很难理解，唯独在于时间复杂度，他是$n*log_n$的，比较难以理解。<br>同时加深set的理解：</p><ol><li>用$q[u]=q[v]$的话时间复杂度是$O(N)$而使用q[u].swap(q[v])就会是$O(1)$，把我t飞了。</li><li>关于$set$的$lower_bound()$返回的是第一个大于等于他的位置，如果查询值是最大的，返回一个迭代器，指向最后一个元素的后一个节点，要把它修回来。。。</li></ol><h2 id="H-欧拉回路"><a href="#H-欧拉回路" class="headerlink" title="H 欧拉回路"></a>H 欧拉回路</h2><p>到底是这题提议玄学还是我憨批，我怎么看了那么久题意，刚刚才懂。。。<br>题意懂了以后就很明显地知道是个构造题，构造一个欧拉路。(比赛的时候题意看偏了，以为是随便整个数字就好了，还一直在想为啥样例为啥最大只能到4，是真够憨的我)。</p><blockquote><p>对于一个欧拉路径存在定理: <strong>一个图里面奇度为$0$时存在欧拉回路，为$2$时存在欧拉路径</strong></p></blockquote><p>所以我们先找到合适的点就好了，当点数时奇数时，每一个点的度数都是偶数，存在欧拉回路，当点数时偶数$x$时，每个点度数都是奇数，最少需要加入$x/2-1$条边变成两个奇度顶点。单调性容易证明，可以直接二分，如果数学可以的话我发现其实可以直接算出来。不过赛时二分也不错，写起来也快。<br>算出最大的顶点后直接跑欧拉路就好了，唯一坑点，注意格式！！！格式错误是$30%$<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e6+5;</span><br><span class="line">typedef long long ll;</span><br><span class="line">#define rep(i,a,b) for(i=(a);i&lt;=b;i++)</span><br><span class="line">#define pt(a) printf(&quot;%d\n&quot;,(a))</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id,w;</span><br><span class="line">&#125;ed[2*N];</span><br><span class="line">ll check(int x)&#123;</span><br><span class="line">    if(x%2) return 1ll*x*(x-1)/2;</span><br><span class="line">    else return 1ll*x*(x-1)/2+(x/2)-1;</span><br><span class="line">&#125;</span><br><span class="line">int head[N],tot=0;</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">    ed[++tot].id=v;</span><br><span class="line">    ed[tot].pre=head[u];</span><br><span class="line">    ed[tot].w=1;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;int&gt; ans;</span><br><span class="line">void sol(int x)&#123;</span><br><span class="line">    for(int &amp;i=head[x];i;i=ed[i].pre)&#123;</span><br><span class="line">        int v = ed[i].id;</span><br><span class="line">        if(ed[i].w==0) continue;</span><br><span class="line">        ed[i].w=ed[i^1].w=0;</span><br><span class="line">        sol(v);</span><br><span class="line">    &#125;</span><br><span class="line">    ans.push_back(x);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int m,i,j,k,t=0;</span><br><span class="line">    ll n;</span><br><span class="line">    scanf(&quot;%lld&quot;,&amp;n);</span><br><span class="line">    ll l=1,r=1.5e9;</span><br><span class="line">    while(l&lt;r)&#123;</span><br><span class="line">        ll mid = ((l+r)+1)/2;</span><br><span class="line">        if(check(mid)&lt;n) l=mid;</span><br><span class="line">        else r = mid-1;</span><br><span class="line">    &#125;</span><br><span class="line">    int poi = l;</span><br><span class="line">    if(n&gt;2e6) &#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,poi);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    tot=1;</span><br><span class="line">    for(i=1;i&lt;=poi;i++)&#123;</span><br><span class="line">        rep(j,i+1,poi)&#123;</span><br><span class="line">            add(i,j),add(j,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(poi%2==0)&#123;</span><br><span class="line">        for(int i=3;i&lt;=poi;i+=2) add(i,i+1),add(i+1,i);</span><br><span class="line">    &#125;</span><br><span class="line">    ans.clear();</span><br><span class="line">    sol(1);</span><br><span class="line">    for(i=ans.size();i&lt;=n;i++)&#123;</span><br><span class="line">        ans.push_back(1);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;,poi);</span><br><span class="line">    rep(i,0,n-1)&#123;</span><br><span class="line">        if(i!=n-1) printf(&quot;%d &quot;,ans[i]);</span><br><span class="line">        else printf(&quot;%d\n&quot;,ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    //system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;持续更新中，，，&quot;&gt;&lt;a href=&quot;#持续更新中，，，&quot; class=&quot;headerlink&quot; title=&quot;持续更新中，，，&quot;&gt;&lt;/a&gt;持续更新中，，，&lt;/h1&gt;&lt;p&gt;2020年5月2日，过了这么久我来写朋友们1月份写过的wls集训营的题目，看了一下，，，懵了。唉，在家直接颓废了，思维都跟不上了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="比赛日志" scheme="https://www.dream-ak.top/categories/%E6%AF%94%E8%B5%9B%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>codeforces1343F-set操作</title>
    <link href="https://www.dream-ak.top/2020/04/23/codeforces1343F-set%E6%93%8D%E4%BD%9C/"/>
    <id>https://www.dream-ak.top/2020/04/23/codeforces1343F-set%E6%93%8D%E4%BD%9C/</id>
    <published>2020-04-23T11:27:55.000Z</published>
    <updated>2020-04-23T12:42:13.210Z</updated>
    
    <content type="html"><![CDATA[<p>这道F题说句实在的，题意能把人看蒙了，看懂了倒是挺简单的，反正我一开始把题意看难了。<a id="more"></a></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://codeforces.ml/contest/1343/problem/F" target="_blank" rel="noopener">题目</a></h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>存在一个长度为$n$的排列$a$，然后给出$n-1$个子排列，其中每个子排列的元素为$[a_l,a_{l+1},…,a_r]$，其中$r$是由$2-n$里面的数字，每一个数字必将出现一次。求原来的排列。</p><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>看到这个每一个数字必将出现一次，就可能想到一个问题了，如果我把$r$前面所有的数字全部确定了，那么第$r$个数字也应该确定了！<br>证明：假设当前确定了$1$到$r-1$的数字，那么可以发现如果把确定的数字在子排列中标记的话，那么将会<strong>出现一段子排列刚好只剩下一个数字没有标记，这就是第r个数字</strong>，同时还可以发现，这样的子排列只有一个，因为如果有<strong>两个的话，那么第r个数字就有两个，可是只有一个位置</strong>，很明显冲突了，可用作剪枝。<strong>注意这里只是一个必要条件，它不能充分保证得出的排列一定成立，但是能保证原排列一定符合这个性质</strong>，所以我们还需要判断是否符合条件。其时间复杂度为$n^3*log_2 n$</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>想挺容易的，做起来我真的没想到，$set$这么骚，要不是学了一点面向对象，我差点理解不了。<br>每一个子序列都可以放到一个集合里面，每一次标记都是把这个数字从集合里面删除。判断的时候直接看集合是否相同。<br>介绍几个骚操作：以$set<int> d$为例</int></p><ol><li><code>*d.begin()</code> 为遍历set</li><li><code>set&lt;set&lt;int&gt; &gt; d(q.begin(),q.end())</code> q在这里为<code>vector&lt;set&lt;int&gt; &gt; q</code> ,这个语句的作用是将q这个数组的所有元素存到d这个集合里面。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e5+5;</span><br><span class="line">typedef long long ll;</span><br><span class="line">#define rep(i,a,b) for(i=(a);i&lt;=b;i++)</span><br><span class="line">#define pt(a) printf(&quot;%d\n&quot;,(a))</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m,i,j,k,t=0;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">    while(t--)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">        vector&lt;set&lt;int&gt; &gt; q;</span><br><span class="line">        vector&lt;int&gt; ans;</span><br><span class="line">        rep(i,1,n-1)&#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">            set&lt;int&gt; cur;</span><br><span class="line">            rep(j,1,m)&#123;</span><br><span class="line">                int x;</span><br><span class="line">                scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">                cur.insert(x);</span><br><span class="line">            &#125;</span><br><span class="line">            q.push_back(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,1,n)&#123;</span><br><span class="line">            ans.clear();</span><br><span class="line">            vector&lt;set&lt;int&gt; &gt; p = q;</span><br><span class="line">            int cur = i;</span><br><span class="line">            ans.push_back(cur);</span><br><span class="line">            rep(j,1,n-1)&#123;</span><br><span class="line">                int pos = 0 , cnt = 0;</span><br><span class="line">                rep(k,0,n-2)&#123;</span><br><span class="line">                    if(p[k].count(cur)) p[k].erase(cur);</span><br><span class="line">                    if(p[k].size()==1) cnt++,pos = *p[k].begin();//遍历set</span><br><span class="line">                &#125;</span><br><span class="line">                if(cnt!=1) break;</span><br><span class="line">                else cur = pos,ans.push_back(cur);</span><br><span class="line">            &#125; </span><br><span class="line">            if(j==n)&#123;</span><br><span class="line">                set&lt;set&lt;int&gt; &gt; d(q.begin(),q.end());//自动把q数组全部放到set里面</span><br><span class="line">                bool ok = true;</span><br><span class="line">                for(int r=1;r&lt;n;r++)&#123;</span><br><span class="line">                    set&lt;int&gt; f;</span><br><span class="line">                    f.clear();</span><br><span class="line">                    bool flag = false;</span><br><span class="line">                    for(int l=r;l&gt;=0;l--)&#123;</span><br><span class="line">                        f.insert(ans[l]);</span><br><span class="line">                        //printf(&quot;%d &quot;,ans[l]);</span><br><span class="line">                        if(d.count(f)) &#123;</span><br><span class="line">                            flag = true;</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                   // printf(&quot;yes%d %d\n&quot;,i,flag);</span><br><span class="line">                    if(!flag) &#123;</span><br><span class="line">                        ok = false;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if(ok)&#123;</span><br><span class="line">                    for(int l=0;l&lt;n;l++)&#123;</span><br><span class="line">                        printf(&quot;%d &quot;,ans[l]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    printf(&quot;\n&quot;);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://codeforces.ml/blog/entry/76352" target="_blank" rel="noopener">cf题解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道F题说句实在的，题意能把人看蒙了，看懂了倒是挺简单的，反正我一开始把题意看难了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://www.dream-ak.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>next添加邮箱与qq</title>
    <link href="https://www.dream-ak.top/2020/04/22/next%E6%B7%BB%E5%8A%A0%E9%82%AE%E7%AE%B1%E4%B8%8Eqq/"/>
    <id>https://www.dream-ak.top/2020/04/22/next%E6%B7%BB%E5%8A%A0%E9%82%AE%E7%AE%B1%E4%B8%8Eqq/</id>
    <published>2020-04-22T03:37:55.000Z</published>
    <updated>2020-04-22T04:09:01.567Z</updated>
    
    <content type="html"><![CDATA[<p>昨天受大佬启发，感觉还是需要添加一些个人的链接放到博客上面，于是兴冲冲的开始去设置了，最后直接爆炸。<a id="more"></a></p><h1 id="next添加邮箱"><a href="#next添加邮箱" class="headerlink" title="next添加邮箱"></a>next添加邮箱</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>我们按照普遍方法在$social$里面添加了地址后，部署到$coding$后发现，在邮件和qq前面自动添加了一堆前缀网址(因为已经修好了，所以展示不出来，如果你也出现了这个问题，你会一眼看出来的)，使原本网址无效了，可能是版本原因还是怎么，查了很久，一直出错，最后没办法改了$hexo$的源码，在这里发出来。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>修改文件位置的话，看下这张图片吧，文件放得太深了。<br><img src="/2020/04/22/next%E6%B7%BB%E5%8A%A0%E9%82%AE%E7%AE%B1%E4%B8%8Eqq/TIM截图20200422120636.png" alt="文件位置"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if theme.social %&#125;</span><br><span class="line">  &lt;div class=&quot;links-of-author motion-element&quot;&gt;</span><br><span class="line">    &#123;%- for name, link in theme.social %&#125;</span><br><span class="line">      &lt;span class=&quot;links-of-author-item&quot;&gt;</span><br><span class="line">      &#123;%- set sidebarURL = link.split(&apos;||&apos;)[0] | trim %&#125;//获取添加的链接</span><br><span class="line">      &#123;%- if theme.social_icons.enable %&#125;</span><br><span class="line">        &#123;%- set sidebarIcon = &apos;&lt;i class=&quot;fa fa-fw fa-&apos; + link.split(&apos;||&apos;)[1] | trim + &apos;&quot;&gt;&lt;/i&gt;&apos; %&#125;//获取添加的小图标</span><br><span class="line">      &#123;%- else %&#125;</span><br><span class="line">        &#123;%- set sidebarIcon = &apos;&apos; %&#125;//没有则为空</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">      &#123;%- if theme.social_icons.enable and theme.social_icons.icons_only %&#125;</span><br><span class="line">        &#123;%- set sidebarText = &apos;&apos; %&#125;</span><br><span class="line">      &#123;%- else %&#125;</span><br><span class="line">        &#123;%- set sidebarText = name %&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">      &#123;%- if name == &apos;E-Mail&apos; %&#125;//我添加E-Mail的解决办法</span><br><span class="line">      &lt;a href=&quot;&#123;&#123; sidebarURL &#125;&#125;&quot; rel=&quot;alternate&quot; title=&quot;E-Mail&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt; &lt;i class=&quot;fa fa-fw fa-envelope&quot;&gt;&lt;/i&gt; E-Mail&lt;/a&gt;</span><br><span class="line">      &#123;%- elif name == &apos;QQ&apos; %&#125;//我添加的QQ解决办法</span><br><span class="line">      &lt;a href=&quot;&#123;&#123; sidebarURL &#125;&#125;&quot; rel=&quot;alternate&quot; title=&quot;QQ&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt; &lt;i class=&quot;fa fa-fw fa-qq&quot;&gt;&lt;/i&gt;QQ&lt;/a&gt;</span><br><span class="line">      &#123;%- else %&#125;</span><br><span class="line">      &#123;&#123; next_url(sidebarURL, sidebarIcon + sidebarText, &#123;title: name + &apos; → &apos; + sidebarURL&#125;) &#125;&#125;//原本的解决办法，这个貌似只能处理链接为http或https开头的链接</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &#123;%- endfor %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><br>由于本人对于swig一知半解，为深入学习，对这个的理解写在注释了，注释方法可能错了(用的是C语言的注释法)，注意删除(不是不想写对，实在百度不到他的只是方案，有途径大佬会的话，可以留言或私聊我，欢迎斧正，对了也可以告诉我哦)。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天受大佬启发，感觉还是需要添加一些个人的链接放到博客上面，于是兴冲冲的开始去设置了，最后直接爆炸。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.dream-ak.top/categories/hexo/"/>
    
    
      <category term="前端" scheme="https://www.dream-ak.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>树的直径</title>
    <link href="https://www.dream-ak.top/2020/04/21/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/"/>
    <id>https://www.dream-ak.top/2020/04/21/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/</id>
    <published>2020-04-21T09:42:24.000Z</published>
    <updated>2020-04-22T04:29:42.458Z</updated>
    
    <content type="html"><![CDATA[<p>时隔14天，洒家终于有准备开始刷题了，暂时开篇第一个就是树的直径！<a id="more"></a></p><h1 id="树的直径"><a href="#树的直径" class="headerlink" title="树的直径"></a>树的直径</h1><p>这个时候可能就有朋友问了，什么是树的直径？<br>来看，树的直径就是<strong>树上的最长简单路</strong>。<br>换个说法，就是树上两点之间最长的距离。<br>我这里介绍一个暴力算法，dfs的</p><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><blockquote><p>首先，我们以任意一点$w$去$dfs$搜出距离根节点最远的点（也可以说是，深度最大的点）任意一个($v$)<br>然后以它做根节点去搜以它为根节点时最大的深度，节点为$u$，此即直径。</p><p>简单证明:<br>如果w在直径上，那么u一定是直径的一个端点。反证：若u不是端点，则从直径另一端点到w再到u的距离比直径更长，与假设矛盾。<br>如果w不在直径上，且w到其距最远点u的路径与直径一定有一交点c，那么由上一个证明可知，u是直径的一个端点。<br>如果w到最远点u的路径与直径没有交点，设直径的两端为S与T，那么(w-&gt;u)&gt;(w-&gt;c)+(c-&gt;T)，推出(w-&gt;u)+(S-&gt;c)+(w-&gt;c)&gt;(S-&gt;c)+(c-&gt;T)=(S-&gt;T)与假设矛盾。<br>因此w到最远点u的路径与直径必有交点。<br>S—————-c—————-T<br>                |<br>                w———u</p></blockquote><p>看个例题<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4612" target="_blank" rel="noopener">warm up</a><br>求在图里面连一条边后最少的割边。<br>由于是割边，我们可以先缩图成DAG图也就是一颗树，然后求其直径(答案就是：桥的数量-直径)，剖去Tarjan缩图，就是个直径板子。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e5+5;</span><br><span class="line">const int M = 2e6+5;</span><br><span class="line">typedef long long ll;</span><br><span class="line">#define rep(i,a,b) for(i=(a);i&lt;=b;i++)</span><br><span class="line">#define pt(a) printf(&quot;%d\n&quot;,(a))</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id,w;</span><br><span class="line">&#125;ed1[M],ed2[M];</span><br><span class="line">int head1[N],head2[N],tot1=0,tot2=0;</span><br><span class="line">void add1(int u,int v)&#123;</span><br><span class="line">    ed1[++tot1].id=v;</span><br><span class="line">    ed1[tot1].pre=head1[u];</span><br><span class="line">    ed1[tot1].w = 1;</span><br><span class="line">    head1[u]= tot1;</span><br><span class="line">&#125;</span><br><span class="line">void add2(int u,int v)&#123;</span><br><span class="line">    ed2[++tot2].id=v;</span><br><span class="line">    ed2[tot2].pre=head2[u];</span><br><span class="line">    head2[u]=tot2;</span><br><span class="line">&#125;</span><br><span class="line">int clo[N],dfn[N],sta[N],low[N],top=0,vis[N],cnt=0,siz=0;</span><br><span class="line">int edge=0;</span><br><span class="line">void tarjan(int x)&#123;</span><br><span class="line">    dfn[x]=++cnt;</span><br><span class="line">    low[x]=cnt;</span><br><span class="line">    vis[x]=1;</span><br><span class="line">    sta[++top]=x;</span><br><span class="line">    //printf(&quot;dfs %d %d\n&quot;,x,fa);</span><br><span class="line">    for(int i=head1[x];i;i=ed1[i].pre)&#123;</span><br><span class="line">        int v=ed1[i].id;</span><br><span class="line">        //printf(&quot;dfs %d %d\n&quot;,x,ed1[i].id);</span><br><span class="line">        if(ed1[i].w==0) continue;</span><br><span class="line">        ed1[i].w = 0;</span><br><span class="line">        ed1[i^1].w = 0;</span><br><span class="line">        if(!dfn[v])&#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            low[x]=min(low[x],low[v]);</span><br><span class="line">            if(dfn[x]&lt;low[v]) edge++;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(vis[v])&#123;</span><br><span class="line">            low[x]=min(low[x],dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(dfn[x]==low[x])&#123;</span><br><span class="line">        clo[x]=++siz;</span><br><span class="line">        vis[x]=0;</span><br><span class="line">        int sum=1;</span><br><span class="line">        while(sta[top]!=x)&#123;</span><br><span class="line">            clo[sta[top]]=siz;</span><br><span class="line">            vis[sta[top--]]=0;</span><br><span class="line">            //printf(&quot;%dsss\n&quot;,sta[top+1]);</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[sta[top--]]=0;</span><br><span class="line">        //printf(&quot;sum %d %d %d\n&quot;,sum,x,clo[x]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int ans = 0,pos=0;</span><br><span class="line"></span><br><span class="line">void dfs(int x,int fa)&#123;</span><br><span class="line">    vis[x]=1;</span><br><span class="line">    dfn[x] = dfn[fa]+1;</span><br><span class="line">    for(int i=head2[x];i;i=ed2[i].pre)&#123;</span><br><span class="line">        if(fa!=ed2[i].id&amp;&amp;vis[ed2[i].id]==0)&#123;</span><br><span class="line">            //printf(&quot;%d %d %d %dsss\n&quot;,ed2[i].id,x,fa,dfn[x]);</span><br><span class="line">            dfs(ed2[i].id,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(dfn[x]&gt;ans)&#123;</span><br><span class="line">        ans = dfn[x];</span><br><span class="line">        pos = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline int ReadInt()</span><br><span class="line">&#123;</span><br><span class="line">    char ch = getchar();</span><br><span class="line">    int data = 0;</span><br><span class="line">    while (ch &lt; &apos;0&apos; || ch &gt; &apos;9&apos;)</span><br><span class="line">    &#123;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">        data = data*10 + ch-&apos;0&apos;;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;while (ch &gt;= &apos;0&apos; &amp;&amp; ch &lt;= &apos;9&apos;);</span><br><span class="line">        return data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    top=cnt=siz=edge=0;</span><br><span class="line">    tot1=tot2=1;</span><br><span class="line">    memset(vis,0,sizeof(vis));</span><br><span class="line">    memset(dfn,0,sizeof(dfn));</span><br><span class="line">    memset(low,0,sizeof(low));</span><br><span class="line">    memset(head2,0,sizeof(head2));</span><br><span class="line">    memset(head1,0,sizeof(head1));</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m,i,j,k,t=0;</span><br><span class="line">    while(scanf(&quot;%d %d&quot;,&amp;n,&amp;m)!=EOF)&#123;</span><br><span class="line">        if(!n&amp;&amp;!m) break;</span><br><span class="line">        init();</span><br><span class="line">        rep(i,1,m)&#123;</span><br><span class="line">            int u,v;</span><br><span class="line">            u = ReadInt();</span><br><span class="line">            v = ReadInt();</span><br><span class="line">            add1(u,v);</span><br><span class="line">            add1(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">        tarjan(1);</span><br><span class="line">        for(int i=1;i&lt;=n;i++)</span><br><span class="line">            for(int j=head1[i];j;j=ed1[j].pre)</span><br><span class="line">            &#123;</span><br><span class="line">                int to=ed1[j].id;</span><br><span class="line">                if(clo[to]!=clo[i]) &#123;add2(clo[to],clo[i]);add2(clo[i],clo[to]);&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ans = 0;</span><br><span class="line">        memset(vis,0,sizeof vis);</span><br><span class="line">        dfn[0]=-1;</span><br><span class="line">        dfs(1,0);</span><br><span class="line">        memset(vis,0,sizeof vis);</span><br><span class="line">        dfn[0]=-1;</span><br><span class="line">        dfs(pos,0);</span><br><span class="line">        pt(edge-ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>多讲一点点，因为下面这个和直径思路差不多</p><h1 id="树的重心"><a href="#树的重心" class="headerlink" title="树的重心"></a>树的重心</h1><p>何谓树的重心？<br>树的重心：找到一个点，其所有的子树中最大的子树节点数最少,那么这个点就是这棵树的重心,删去重心后，生成的多棵树尽可能平衡。<br>树的重心可以通过简单的两次搜索求出，第一遍搜索求出每个结点的子结点数量son[u]，第二遍搜索找出使max{son[u],n-son[u]-1}最小的结点。<br>实际上这两步操作可以在一次遍历中解决。对结点u的每一个儿子v，递归的处理v，求出son[v]，然后判断是否是结点数最多的子树，处理完所有子结点后，判断u是否为重心。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">struct CenterTree&#123;</span><br><span class="line">    int n;</span><br><span class="line">    int ans;</span><br><span class="line">    int siz;</span><br><span class="line">    int son[maxn];</span><br><span class="line">    void dfs(int u,int pa)&#123;</span><br><span class="line">        son[u]=1;</span><br><span class="line">        int res=0;</span><br><span class="line">        for (int i=head[u];i!=-1;i=edges[i].next)&#123;</span><br><span class="line">            int v=edges[i].to;</span><br><span class="line">            if (v==pa) continue;</span><br><span class="line">            if (vis[v]) continue;</span><br><span class="line">            dfs(v,u);</span><br><span class="line">            son[u]+=son[v];</span><br><span class="line">            res=max(res,son[v]-1);</span><br><span class="line">        &#125;</span><br><span class="line">        res=max(res,n-son[u]);</span><br><span class="line">        if (res&lt;siz)&#123;</span><br><span class="line">            ans=u;</span><br><span class="line">            siz=res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    int getCenter(int x)&#123;</span><br><span class="line">        ans=0;</span><br><span class="line">        siz=INF;</span><br><span class="line">        dfs(x,-1);</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Cent;</span><br></pre></td></tr></table></figure></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://oi-wiki.org/graph/tree-centroid/" target="_blank" rel="noopener">oi-wiki</a><br><a href="https://www.cnblogs.com/zinthos/p/3899075.html" target="_blank" rel="noopener">树的直径、树的重心与树的点分治</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时隔14天，洒家终于有准备开始刷题了，暂时开篇第一个就是树的直径！&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="https://www.dream-ak.top/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>Java连接数据库</title>
    <link href="https://www.dream-ak.top/2020/04/07/Java%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://www.dream-ak.top/2020/04/07/Java%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-04-07T12:57:27.000Z</published>
    <updated>2020-04-20T02:02:17.015Z</updated>
    
    <content type="html"><![CDATA[<p>用vscode编译Java一直乱码，我还以为是vscode的问题(毕竟vscode的乱码挺多的)。用回了eclipse以后，发现乱换ide是个不好的习惯，那玩意怎么用啊！于是疯狂捣鼓vscode，终于弄好了Java连接数据库且不乱码了。<a id="more"></a></p><h1 id="Java方面报错"><a href="#Java方面报错" class="headerlink" title="Java方面报错"></a>Java方面报错</h1><p>关于Java方面报错，有个很无语的地方，就是你用控制台输入中文，他会输出空格！一个很诡异的错误，不管怎么调编码格式都没用。找了很久最后看到一个大佬的做法。</p><blockquote><p>第一步：<br>首先在launch.json中关于该文件的地方加上$encoding: “GBK”,$之后你就会发现输入输出都不行了，这时候进行第二步！<br><img src="/2020/04/07/Java%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/GBK.png" alt="GBK"></p><p>第二步：<br>将launcher.bat文件修改一下，将@chcp.com 65001 &gt; NUL 修改成@chcp.com 936 &gt; NUL。个人建议在被修改语句前加个rem就好了，<del>怕以后出问题</del>，bat的注释符号。<br><img src="/2020/04/07/Java%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/launcher.png" alt="launcher.bat"><br><img src="/2020/04/07/Java%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/rem.png" alt="rem"></p><p>第三步：<br>再次尝试运行，你就会发现好了，输入中文也不会乱码。</p></blockquote><h1 id="MySQL数据库的编码格式"><a href="#MySQL数据库的编码格式" class="headerlink" title="MySQL数据库的编码格式"></a>MySQL数据库的编码格式</h1><p>看到这里大家都可能明白我强调Java数据库连接且不乱码了。<br><del>我整了两天一直以为是因为他是gdk编码，怎么传怎么错，学了n久的编码与解码。。。秀的我头皮发麻</del><br>就在刚才，我发现数据库的编码格式有点诡异。<br>首先我们查看数据库的编码格式</p><blockquote><p>show variables like ‘character_set_database’;</p></blockquote><p>紧接着查看数据表的编码格式</p><blockquote><p>show create table &lt;表名&gt;;</p></blockquote><p>修改数据表的编码格式</p><blockquote><p>alter database &lt;数据库名&gt; character set utf8;</p></blockquote><p>创建表格时定义编码格式：</p><blockquote><p>create table tb_books (<br>    name varchar(45) not null,<br>    price double not null,<br>    bookCount int not null,<br>    author varchar(45) not null ) default charset = utf8;</p></blockquote><p>注意这里的编码格式要与$Java$传入参数的编码格式一样！不然会出现乱码，玄学乱码！杀手般的存在。</p><p>到了这里大家伙就会发现已经把问题解决的差不多啦。<del>我解决了你们呢？</del></p><p>关于vscode连接数据库的话，按照$eclipse$的教程其实也不会出多大问题，就是在加入外部包时把整个包放$lib$(没有的，可以自己建一个)文件进去后修改$.classpath$文件路径，增加该路径就差不多加入了。<br><img src="/2020/04/07/Java%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/导入外部包.png" alt=".classpath"></p><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><h2 id="4-20"><a href="#4-20" class="headerlink" title="4.20"></a>4.20</h2><p>昨天发现按照上述导入后还是用不了，检查了各个地方都没有问题，最后发现在Java dependencies这里点击加号把这个包再导一次，就没事了。(白修一天bug，气煞我也)。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnblogs.com/zeug/p/10516915.html" target="_blank" rel="noopener">查看mysql数据库及表编码格式</a><br><a href="http://blog.ixk.me/vscode-java-output-chinese-garbled-problem-solving.html/comment-page-1" target="_blank" rel="noopener">VSCode Java输出中文乱码问题解决</a><br><a href="http://blog.ixk.me/vscode-java-manually-imports-jar-and-source-package.html" target="_blank" rel="noopener">导入jdbc外部包</a><br><a href="https://blog.csdn.net/QingtaiSensei/article/details/105430845" target="_blank" rel="noopener">导入包</a> (按照博主说法，可以直接导入，我还没有尝试直接导入)。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用vscode编译Java一直乱码，我还以为是vscode的问题(毕竟vscode的乱码挺多的)。用回了eclipse以后，发现乱换ide是个不好的习惯，那玩意怎么用啊！于是疯狂捣鼓vscode，终于弄好了Java连接数据库且不乱码了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>kmp与exkmp</title>
    <link href="https://www.dream-ak.top/2020/04/03/kmp%E4%B8%8Eexkmp/"/>
    <id>https://www.dream-ak.top/2020/04/03/kmp%E4%B8%8Eexkmp/</id>
    <published>2020-04-03T11:41:54.000Z</published>
    <updated>2020-04-04T02:04:00.138Z</updated>
    
    <content type="html"><![CDATA[<p>思考良久，是时候拾起以前的字符串了，动态规划先放下吧，毕竟人笨，先把部分板子搞定！<a id="more"></a></p><h1 id="复习kmp算法"><a href="#复习kmp算法" class="headerlink" title="复习kmp算法"></a>复习kmp算法</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>该算法一般用来做字符串匹配，比如在$A$串中寻找与$B$相同的子串。</p><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><h3 id="朴素思想"><a href="#朴素思想" class="headerlink" title="朴素思想"></a>朴素思想</h3><p>枚举$A$里面所有长度与$B$相同长度的字符串进行比较，每一个都枚举出来，有的话就一定匹配成功，就会有答案。</p><h4 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h4><p>枚举所有子串，复杂度$O(N*M)$</p><h3 id="kmp匹配思想"><a href="#kmp匹配思想" class="headerlink" title="kmp匹配思想"></a>kmp匹配思想</h3><p>把一个匹配分成两个阶段，我先介绍完两个阶段，最后解释两个阶段的含义以及用途</p><ol><li>第一个阶段，对于$B$字符串我们首先对其单独进行一次处理，形成一个$next[]$数组，同时$next[i]$表示前$i-1$个字符的前缀与后缀的最长匹配。<br>“前缀”指除了最后一个字符以外，一个字符串的全部头部组合；<br>“后缀”指除了第一个字符以外，一个字符串的全部尾部组合。</li><li>利用朴素枚举匹配，查看在$A$串中以$i$开始的最长匹配长度$max$(<strong>也就是A中以$i$开始，$B$中以第1个字符开始，能够匹配的最长相同的字符</strong>)。当$max==lenB$($B$字符串的长度)时，那么就可以返回$i$，表示查找成功了。不相等时：那么下一次匹配时$A$的枚举位置就可以直接跳到$(i+len+1)$，$B$的枚举位置就要跳到$len+1$。因为这种情况下$A$串中$i~i+len$与$B$串中$1~len$所包含字符一模一样，就可以直接跳跃</li></ol><h4 id="时间复杂度分析："><a href="#时间复杂度分析：" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h4><p>不会画图，在这里我直接给出答案$O(N)$，<a href="https://blog.csdn.net/niukai1768/article/details/79579709" target="_blank" rel="noopener">详细解答</a></p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="第一阶段："><a href="#第一阶段：" class="headerlink" title="第一阶段："></a>第一阶段：</h5><p>继续定义一个$next$数组表示最长前缀与最长后缀的匹配长度，其中$next[i]$表示从第1个字符到第$i-1$个的最长匹配！<br>这个我们对于这个$next$数组实现，用如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void GetNext(string B, int next[])</span><br><span class="line">&#123;</span><br><span class="line">    int B_len = B.size();</span><br><span class="line">    int i = 0;   // B 的下标</span><br><span class="line">    int j = -1;  </span><br><span class="line">    next[0] = -1;</span><br><span class="line"></span><br><span class="line">    while (i &lt; B_len)</span><br><span class="line">    &#123;</span><br><span class="line">        if (j == -1 || B[i] == B[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            next[i] = j;//相同，就可以更新next[i]了</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">            j = next[j];//将j跳转至以第j-1个字符的最长匹配值的位置。为什么可以跳转待会解释</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为什么那里是跳转？先看这个图<br><img src="/2020/04/03/kmp%E4%B8%8Eexkmp/跳转.png" alt="跳转"><br>注意这里变量与上面代码变量完全一致，也就是说假设$j$与$i$在如图所示位置，那么当$B[i]==B[j]$时，$next[i]$直接就是$j$了,因为$next[i-1]=j-1$，而$B[i]==B[j]$所以他直接等于$j$。当$B[i]!=B[j]$时，我们怎么办？看下图<br><img src="/2020/04/03/kmp%E4%B8%8Eexkmp/跳转2.png" alt="跳转2"><br>那么可以发现$next[j]$我们是处理好了的，且$next[j]$表示从$0 \rightarrow j-1$的最长公共前后缀匹配长度，这里前面第一个椭圆表示$0 \rightarrow j-1$的最长公共前缀，第二个最长公共后缀，他俩长一样的。对此我们往后看到$next[j]$要表示的值，也就是后面的两个椭圆与前面两个椭圆是什么关系？应该也要是一样的，理由：<strong>$0 \rightarrow j-1$与 $i \rightarrow i-1$是一样的($next[i-1]==j-1$且$a[i-1]==a[j-1]$)</strong>，进而得出这四个椭圆包含的字符串是一样的！所以为了求$next[i]$我们经过上面的关系转换，我们就可以不断的使用$next[j]$划分小椭圆来实现。</p><p>如果你理解了，我就再提一个问题！<strong>求$B$串的最小循环节怎么算？</strong><br>提示：与我这里的椭圆划分有关哦！不过从结论上看不出来。</p><h5 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h5><p>$A$串与$B$串开始匹配<br>先上代码，上面那个都理解了，下面没什么好说的了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">int KMP(string A, string B, int next[])</span><br><span class="line">&#123;</span><br><span class="line">    GetNext(B, next);</span><br><span class="line"></span><br><span class="line">    int i = 0;  // A 的下标</span><br><span class="line">    int j = 0;  // B 的下标</span><br><span class="line">    int A_len = A.size();</span><br><span class="line">    int B_len = B.size();</span><br><span class="line"></span><br><span class="line">    while (i &lt; A_len &amp;&amp; B &lt; p_len) // 因为末尾 &apos;\0&apos; 的存在，所以不会越界</span><br><span class="line">    &#123;</span><br><span class="line">        if (j == -1 || A[i] == B[j])  // B 的第一个字符不匹配或 A[i] == B[j]</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">            j = next[j];  // 当前字符匹配失败，跳转到B的最长前后匹配字串位置</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (j == B_len)  // 匹配成功</span><br><span class="line">        return i - j;</span><br><span class="line">    </span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>乍一看以为一模一样，实际上呢？就是不需要更新$next$而已，而且这里的跳转也不是为了划分椭圆而是寻找上一次的最大前后缀匹配，并跳到那个位置。</p><h1 id="扩展EXkmp算法"><a href="#扩展EXkmp算法" class="headerlink" title="扩展EXkmp算法"></a>扩展EXkmp算法</h1><p>挖坑，明天写。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;思考良久，是时候拾起以前的字符串了，动态规划先放下吧，毕竟人笨，先把部分板子搞定！&lt;/p&gt;
    
    </summary>
    
    
      <category term="字符串" scheme="https://www.dream-ak.top/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>lcs与lis</title>
    <link href="https://www.dream-ak.top/2020/03/29/lcs%E4%B8%8Elis/"/>
    <id>https://www.dream-ak.top/2020/03/29/lcs%E4%B8%8Elis/</id>
    <published>2020-03-29T14:06:16.000Z</published>
    <updated>2020-03-30T09:59:58.259Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到很多这种lcs与lis得题目，就来写一个关于这种题目的一个总结<br>更新<br>经我仔细思考，之前有以下漏洞：</p><ol><li>二分法$lis$已经把树状数组所有功能全部重合，具体写法写到里面了。<a id="more"></a><h1 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h1>顾名思义，就是求最长上升子序列的最大长度，这样的求法一共有三种！<br>分别介绍一下：<h2 id="n-2-的-dp-写法"><a href="#n-2-的-dp-写法" class="headerlink" title="$n^2$的$dp$写法"></a>$n^2$的$dp$写法</h2>定义$dp[i]$为从第$i$个数字结尾的上升子序列(该上升子序列一定以$a[i]$结尾)的长度。我们每一次枚举一个$j$，往前枚举$i$找到一个比$a[j]$小的最大的$dp[i]$，更新$dp[j]$。<br>换句话说就是找到前面一个比当前值小且以他结尾的最长上升子序列。<br>代码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int a[MAXN], d[MAXN];</span><br><span class="line">int dp() &#123;</span><br><span class="line">  d[1] = 1;</span><br><span class="line">  int ans = 1;</span><br><span class="line">  for (int i = 2; i &lt;= n; i++) &#123;</span><br><span class="line">    for (int j = 1; j &lt; i; j++)</span><br><span class="line">      if (a[j] &lt; a[i]) &#123;</span><br><span class="line">        d[i] = max(d[i], d[j] + 1);</span><br><span class="line">        ans = max(ans, d[i]);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分-贪心法"><a href="#二分-贪心法" class="headerlink" title="二分+贪心法"></a>二分+贪心法</h2><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>对于一个序列，我们枚举一个值，考虑这个值如果在最长$LIS$里面，那么这个值的位置所在的地方是在哪？在前面比该值小的后面。也就是说，这样对于每一个数字，我们都可以知道，如果他在最长上升序列的位置，记录一下最大的位置就是最长长度！</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>拿一个数组存储在最长上升子序列中第$i$个位置所能出现的最小值，后面不用更新。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><blockquote><p>2 5 1 3 4<br>2<br>2 5<br>1 5//更新第一个位置的值，使其变小<br>1 3//更新第二个位置的值，使其变小<br>1 3 4</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; n; ++i) scanf(&quot;%d&quot;, a + i);</span><br><span class="line">memset(dp, 0x1f, sizeof dp);//预处理为最大值</span><br><span class="line">mx = dp[0];</span><br><span class="line">for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">  pos = lower_bound(dp, dp + n, a[i]) - dp;//找到大于等于a[i]的第一个值，然后把a[pos]变小。</span><br><span class="line">  dp[pos] = a[i];//注意此时的dp[1~pos]就是以a[i]结尾的最长上升子序列，树状数组。。。多余了</span><br><span class="line">&#125;</span><br><span class="line">ans = 0;</span><br><span class="line">while (dp[ans] != mx) ++ans;</span><br></pre></td></tr></table></figure><p>复杂度$O(Nlog(N))$，该方法也可以$nlogn$求具体最大字串，具体实现可自己想。(提示：参照前向星写法)</p><h2 id="树状数组写法"><a href="#树状数组写法" class="headerlink" title="树状数组写法"></a>树状数组写法</h2><p><strong><a href="https://oi-wiki.org/ds/fenwick/" target="_blank" rel="noopener">不了解树状数组请参考</a></strong><br>可能好奇上面已经够了呀，干嘛还要这个写法呢？给出一点，他能求出具体的以a[i]结尾的最长上升子序列字符串。(二分法也行，不过已经写了，就不删除了，当思维扩展吧)</p><h3 id="思想-1"><a href="#思想-1" class="headerlink" title="思想"></a>思想</h3><p>树状数组可以连续修改一个区间，以及查询一个区间。<br>我们从第一个值开始枚举，每次按照贪心思想，把比他大的值全部更新为当前值！那么就可以得到以$a[i]$结尾的最大上升子序列的具体值了。</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>首先离散化，<a href="https://oi-wiki.org/misc/discrete/" target="_blank" rel="noopener">不懂点击</a>，然后用树状数组查出比第$i$个值大的第一个值得位置，然后对该位置以及以后位置更新为当前值！</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define REP(i, a, b) for(register int i = (a); i &lt; (b); i++)</span><br><span class="line">#define _for(i, a, b) for(register int i = (a); i &lt;= (b); i++)</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int MAXN = 1e3 + 10;</span><br><span class="line">int a[MAXN], b[MAXN], n, m, ans; </span><br><span class="line">int dp[MAXN], f[MAXN];</span><br><span class="line"></span><br><span class="line">inline int lowbit(int x) &#123; return x &amp; (-x); &#125; </span><br><span class="line"></span><br><span class="line">void motify(int x, int p)</span><br><span class="line">&#123;</span><br><span class="line">    for(; x &lt;= m; x += lowbit(x))</span><br><span class="line">        f[x] = max(f[x], p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int get_max(int x)</span><br><span class="line">&#123;</span><br><span class="line">    int res = 0;</span><br><span class="line">    for(; x; x -= lowbit(x))</span><br><span class="line">        res = max(res, f[x]);</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">    _for(i, 1, n) scanf(&quot;%d&quot;, &amp;a[i]), b[i] = a[i];</span><br><span class="line">    sort(b + 1, b + n + 1);</span><br><span class="line">    m = unique(b + 1, b + n + 1) - b - 1;</span><br><span class="line">    _for(i, 1, n) a[i] = lower_bound(b + 1, b + m + 1, a[i]) - b;</span><br><span class="line">    int ans = 0;</span><br><span class="line">    _for(i, 1, n)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i] = get_max(a[i]) + 1;//查询大于等于a[i]得第一个位置</span><br><span class="line">        ans = max(ans, dp[i]);//最长上升子序列</span><br><span class="line">        motify(a[i], dp[i]); //把该位置往后得所有值全部更新</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, ans);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个大家可能不熟悉，写全了。(百度抄的，改成了这样子的)</p><h1 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h1><p>这里有两种解决办法</p><h2 id="动态规划-n-2"><a href="#动态规划-n-2" class="headerlink" title="动态规划($n^2$)"></a>动态规划($n^2$)</h2><p>$dp[i][j]$表示从字符串a的前i个字符与字符串b的前j个字符串的最长公共子序列的长度。说到这里大家伙可能就都知道了，直接贴代码，代码里面解释。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for(i=1;i&lt;=n+1;i++)&#123;</span><br><span class="line">    for(j=1;j&lt;=m+1;j++)&#123;</span><br><span class="line">        if(a[i]==b[j]) dp[i][j]=dp[i-1][j-1]+1;//俩子序列结尾相同时为前面值加一</span><br><span class="line">        else dp[i][j]=max(dp[i][j-1],dp[i-1][j]);//不同时为这个。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个路径可以利用转移方程按前向星思路保存路径</p><h2 id="LCS-转-LIS"><a href="#LCS-转-LIS" class="headerlink" title="$LCS$转$LIS$"></a>$LCS$转$LIS$</h2><p><strong>使用条件，字串里面元素不得出现重复</strong></p><h3 id="思想-2"><a href="#思想-2" class="headerlink" title="思想"></a>思想</h3><p>我们按照第一个字串的顺序映射第一个字串元素在第二个子串中的位置(数组C)。那么$LCS$就转为$LIS$了。没看懂的话，我下面解释一下：<br>第一个字串按顺序映射位置，那么当位置单调递增，也就是在第二个字串中按顺序排列的，那么这几个位置就会是最长公共子序列！</p><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><p>假设两个字串</p><blockquote><p>a 1 7 5 4 8 3 9<br>b 1 4 3 5 6 2 8 9</p></blockquote><p>映射后</p><blockquote><p>a 1 7 5 4 8 3 9<br>b 1 4 3 5 6 2 8 9<br>c 1 0 4 2 0 0 7 8</p></blockquote><p>C数组$LIS$得到答案和路径长度4，路径1 4 7 8<br>到B里面就是 $1b[1] 5(b[4]) 8(b[7]) 9(b[8])$</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>下面是二分法，树状数组请自己改编<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for(i=1;i&lt;=n+1;i++) vis[a[i]]=i;</span><br><span class="line">for(i=1;i&lt;=m+1;i++) b[i]=vis[b[i]];</span><br><span class="line">for(i=1;i&lt;=m+1;i++) dp[i]=2e9;</span><br><span class="line">for(i=1;i&lt;=m+1;i++)&#123;</span><br><span class="line">    tot = lower_bound(dp+1,dp+m+1,b[i])-dp;</span><br><span class="line">    ans=max(ans,tot);</span><br><span class="line">    dp[tot]=b[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="练习题目"><a href="#练习题目" class="headerlink" title="练习题目"></a>练习题目</h1><p><a href="https://www.luogu.com.cn/problem/P1020" target="_blank" rel="noopener">导弹拦截</a><br><a href="https://vjudge.net/problem/UVA-10635" target="_blank" rel="noopener">LCS</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/sugewud/p/9823222.html" target="_blank" rel="noopener">树状数组得最长不下降子序列</a><br><a href="https://oi-wiki.org/ds/fenwick/" target="_blank" rel="noopener">树状数组</a><br><a href="https://oi-wiki.org/misc/discrete/" target="_blank" rel="noopener">离散话</a><br><a href="https://oi-wiki.org/dp/basic/" target="_blank" rel="noopener">oi-wiki</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看到很多这种lcs与lis得题目，就来写一个关于这种题目的一个总结&lt;br&gt;更新&lt;br&gt;经我仔细思考，之前有以下漏洞：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;二分法$lis$已经把树状数组所有功能全部重合，具体写法写到里面了。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="动态规划" scheme="https://www.dream-ak.top/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>codeforces1307D</title>
    <link href="https://www.dream-ak.top/2020/03/24/codeforces1307D/"/>
    <id>https://www.dream-ak.top/2020/03/24/codeforces1307D/</id>
    <published>2020-03-24T14:07:50.000Z</published>
    <updated>2020-03-25T09:02:16.814Z</updated>
    
    <content type="html"><![CDATA[<p>不得不说，这个最短路实在是有点精妙了，看题解差点没看懂。<a id="more"></a></p><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://codeforces.ml/problemset/problem/1307/D" target="_blank" rel="noopener">题目链接</a></h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>已知一个连通图，每条边b(无向边)长度都为一，给我们一些点，求在这些点里面任意取两点之间建一条边(长度为一)后，使得从1到n的最短距离最长！求该两点。<br>说白了就是加一条边后形成最长最短路，问在哪里加。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于这一题，毫无疑问我们先要求出该1到其他所有点的最短距离$dis1$，和n到其他所有点的最短距离$dis$。那么最短路一定是$ ans = min(dis1[a]+dis[b]+1,dis1[b]+dis[a]+1)$<br>枚举$a$与$b$找到最大的数字$ans$就好了，但是由于$a$的数字太多了，$O(n^2)$肯定不行，所以这就是该题的最难点，如何找到这个最大值！<br>首先我们可以假设</p><script type="math/tex; mode=display">dis1[a]+dis[b] \leq dis1[b]+dis[a]</script><p>推导发现</p><script type="math/tex; mode=display">dis1[a]-dis[a] \leq dis1[b]-dis[b]</script><p>也就是说只要左边的差值<strong>小于等于</strong>右边的差值，那么:<br>$ans = min(dis1[a]+dis[b]+1,dis1[b]+dis[a]+1)$化简为$ans = dis1[a]+dis[b]+1$，<br>可以发现首先对给我们的点按照$dis1[a]-dis[a]$从小到大排序后，开始从前往后枚举点，i为枚举的下标，$ans=max(x+dis[i]+1),x=max(x,dis1[x])$，$x$代表1到枚举过的点之间的最长距离。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 4e5+5;</span><br><span class="line">typedef long long ll;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id;</span><br><span class="line">&#125;ed[N];</span><br><span class="line">int p[N];</span><br><span class="line"></span><br><span class="line">int head[N],tot=0,a[N],vis[N],dis1[N],dis[N];</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">    ed[++tot].id=v;</span><br><span class="line">    ed[tot].pre=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">void dij(int x)&#123;</span><br><span class="line">    memset(dis,0x3f,sizeof(dis));</span><br><span class="line">    priority_queue&lt;pair&lt;int,int&gt; &gt;q;</span><br><span class="line">    dis[x]=0;</span><br><span class="line">    q.push(make_pair(0,x));</span><br><span class="line">    while(!q.empty())&#123;</span><br><span class="line">        int u=q.top().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        if(vis[u]) continue;</span><br><span class="line">        vis[u]=1;</span><br><span class="line">        for(int i=head[u];i;i=ed[i].pre)&#123;</span><br><span class="line">            int v=ed[i].id;</span><br><span class="line">            if(dis[v]&gt;dis[u]+1)&#123;</span><br><span class="line">                dis[v]=dis[u]+1;</span><br><span class="line">                q.push(make_pair(-dis[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m,i,j,k,t=0;</span><br><span class="line">    scanf(&quot;%d %d %d&quot;,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    for(i=1;i&lt;=k;i++) scanf(&quot;%d&quot;,&amp;a[++t]);</span><br><span class="line">    for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">        int u,v;</span><br><span class="line">        scanf(&quot;%d %d&quot;,&amp;u,&amp;v);</span><br><span class="line">        add(u,v);</span><br><span class="line">        add(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    dij(1);</span><br><span class="line">    for(i=1;i&lt;=n;i++) dis1[i]=dis[i];</span><br><span class="line">    //printf(&quot;%dss\n&quot;,dis1[n]);</span><br><span class="line">    memset(vis,0,sizeof vis);</span><br><span class="line">    dij(n);</span><br><span class="line">    int sum=2e9+9;</span><br><span class="line">    vector&lt;pair&lt;int,int&gt; &gt; dat;</span><br><span class="line">    for(i=1;i&lt;=t;i++)&#123;</span><br><span class="line">        dat.push_back(make_pair(dis1[a[i]]-dis[a[i]],a[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    sort(dat.begin(),dat.end());</span><br><span class="line">    int mm = -2e9+9,best=0;</span><br><span class="line">    for(i=0;i&lt;t;i++)&#123;</span><br><span class="line">        int x = dat[i].second;</span><br><span class="line">        best = max(best,mm+dis[x]);</span><br><span class="line">        mm = max(mm,dis1[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;,min(best+1,dis1[n]));</span><br><span class="line">    //system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://codeforces.ml/blog/entry/73953" target="_blank" rel="noopener">cf题解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不得不说，这个最短路实在是有点精妙了，看题解差点没看懂。&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="https://www.dream-ak.top/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>Java的biginteger</title>
    <link href="https://www.dream-ak.top/2020/03/21/Java%E7%9A%84biginteger/"/>
    <id>https://www.dream-ak.top/2020/03/21/Java%E7%9A%84biginteger/</id>
    <published>2020-03-21T12:31:29.000Z</published>
    <updated>2020-03-25T10:11:04.059Z</updated>
    
    <content type="html"><![CDATA[<p>哈哈哈，终于开始Java的大数模拟，以前以为python大数好，不知为啥看了以后直接有点不相信他了(时间复杂度)，所以还是看Java吧<a id="more"></a></p><h2 id="1-赋值："><a href="#1-赋值：" class="headerlink" title="1.赋值："></a>1.赋值：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BigInteger a=new BigInteger(&quot;1&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BigInteger b=BigInteger.valueOf(1);</span><br></pre></td></tr></table></figure><h2 id="2-运算："><a href="#2-运算：" class="headerlink" title="2.运算："></a>2.运算：</h2><p>① add(); 大整数相加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BigInteger a=new BigInteger(“23”); </span><br><span class="line">BigInteger b=new BigInteger(“34”); </span><br><span class="line">a. add(b);</span><br></pre></td></tr></table></figure></p><p>②subtract(); 相减<br>③multiply(); 相乘<br>④divide(); 相除取整<br>⑤remainder(); 取余<br>⑥pow(); a.pow(b)=a^b<br>⑦gcd(); 最大公约数<br>⑧abs(); 绝对值<br>⑨negate(); 取反数<br>⑩mod(); a.mod(b)=a%b=a.remainder(b); </p><h2 id="3-BigInteger构造函数："><a href="#3-BigInteger构造函数：" class="headerlink" title="3.BigInteger构造函数："></a>3.BigInteger构造函数：</h2><p>一般用到以下两种：<br><code>BigInteger(String val);</code><br>将指定字符串转换为十进制表示形式；<br><code>BigInteger(String val,int radix);</code><br>将指定基数的 BigInteger 的字符串表示形式转换为 BigInteger </p><h2 id="4-基本常量："><a href="#4-基本常量：" class="headerlink" title="4.基本常量："></a>4.基本常量：</h2><p><code>A=BigInteger.ONE</code> 1<br><code>B=BigInteger.TEN</code> 10<br><code>C=BigInteger.ZERO</code> 0 </p><ol><li><p>n.compareTo(BigInteger.ZERO)==0  //相当于n==0</p></li><li><p>if(a[i].compareTo(n)&gt;=0 &amp;&amp;a[i].compareTo(m)&lt;=0)   // a[i]&gt;=n &amp;&amp; a[i]&lt;=m </p></li><li>所有比较可以按照string比较规则来比较</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/unknownname/p/8823887.html" target="_blank" rel="noopener">biginteger</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;哈哈哈，终于开始Java的大数模拟，以前以为python大数好，不知为啥看了以后直接有点不相信他了(时间复杂度)，所以还是看Java吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java对象复习</title>
    <link href="https://www.dream-ak.top/2020/03/21/java%E5%AF%B9%E8%B1%A1%E5%A4%8D%E4%B9%A0/"/>
    <id>https://www.dream-ak.top/2020/03/21/java%E5%AF%B9%E8%B1%A1%E5%A4%8D%E4%B9%A0/</id>
    <published>2020-03-21T11:31:07.000Z</published>
    <updated>2020-03-21T12:49:44.059Z</updated>
    
    <content type="html"><![CDATA[<p>完辽，没学习的欲望了，拖了几天的总结。<a id="more"></a></p><h1 id="抽象类-abstract"><a href="#抽象类-abstract" class="headerlink" title="抽象类($abstract$)"></a>抽象类($abstract$)</h1><p>一个方法可以被覆写，那么如果当前类的全部方法都要被子类覆写的话，这个类我们就可以用抽象来代替。这个抽象的方法如果在它的子类里面不对该方法进行覆写的话，直接会报编译错误。<br>那么抽象类的特点：</p><ol><li>直接规范了子类的格式</li><li>抽象类无法实例化</li><li>子类的端口范围不能小于父类的端口范围</li><li>抽象方法不能用$private$修饰，因为抽象方法必须被子类重写，而$private$权限对于子类来说是不能访问的，所以就会产生矛盾。</li><li>抽象方法也不能用$static$修饰，如果用$static$修饰了，那么我们就可以直接通过类名调用了，而抽象方法压根没有主体，没有任何业务逻辑，这样就毫无意义了。</li><li>抽象类不能被$final$修饰，因为被修饰以后就不能被继承了。</li></ol><h1 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h1><p>当一个抽象类里面没有字段，全是抽象方法时，我们可以将这个类定义为接口。<br>也就是说，接口里面不得有任何字段，所有方法都必须是抽象方法。也因为都是抽象，所以自动省略了$public abstract$修饰语句<br>对于一个接口来说，可以同时继承多个接口。<br>当用一个具体的类实现一个接口必须要用implement，举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    void run();</span><br><span class="line">    String getName();//自动省略public abstract</span><br><span class="line">&#125;</span><br><span class="line">class Student implements Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public Student(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(this.name + &quot; run&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="default-方法"><a href="#default-方法" class="headerlink" title="$default$方法"></a>$default$方法</h2><p>接口之中可以定义$default$方法<br>他的优点：</p><ol><li>实现类里面可以不必覆写该方法，但是也可以覆写，方便修改接口。</li></ol><p>举个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Person p = new Student(&quot;Xiao Ming&quot;);</span><br><span class="line">        p.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Person &#123;</span><br><span class="line">    String getName();</span><br><span class="line">    default void run() &#123;</span><br><span class="line">        System.out.println(getName() + &quot; run&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Student implements Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public Student(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="static"><a href="#static" class="headerlink" title="$static$"></a>$static$</h1><h2 id="静态字段"><a href="#静态字段" class="headerlink" title="静态字段"></a>静态字段</h2><p>对于一个类的静态字段来说，他在这个字段里面只有一个共享空间，所有的实例都是用这一个变量。<br>举例来看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Person ming = new Person(&quot;Xiao Ming&quot;, 12);</span><br><span class="line">        Person hong = new Person(&quot;Xiao Hong&quot;, 15);</span><br><span class="line">        ming.number = 88;</span><br><span class="line">        System.out.println(hong.number);</span><br><span class="line">        hong.number = 99;</span><br><span class="line">        System.out.println(ming.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    public int age;</span><br><span class="line"></span><br><span class="line">    public static int number;</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以发现修改了一个实例里的静态字段以后另外一个实例里的也改变了。</p><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>对于一个类里面的静态方法，可以直接通过类名.方法名进行运行，但是不可以通过this.类名访问。</p><h2 id="接口的静态字段"><a href="#接口的静态字段" class="headerlink" title="接口的静态字段"></a>接口的静态字段</h2><p>因为$interface$是一个纯抽象类，所以它不能定义实例字段。但是，$interface$是可以有静态字段的，并且静态字段必须为$final$类型。也因为全是$final$所以我们可以省略。</p><h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><p>对于一个静态代码块来说，当我们调用该类的时候会自动将静态代码块运行一次，且仅运行一次。当往后运行时就不会再调用了。<br>一般使用这个功能时我们一般都是用来初始化的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/zuotongbin/p/11717010.html" target="_blank" rel="noopener">abstract</a><br><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260451488854880" target="_blank" rel="noopener">廖雪峰</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;完辽，没学习的欲望了，拖了几天的总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java多态</title>
    <link href="https://www.dream-ak.top/2020/03/17/Java%E5%A4%9A%E6%80%81/"/>
    <id>https://www.dream-ak.top/2020/03/17/Java%E5%A4%9A%E6%80%81/</id>
    <published>2020-03-17T08:20:29.000Z</published>
    <updated>2020-03-17T09:27:20.735Z</updated>
    
    <content type="html"><![CDATA[<p>这个在上一篇，继承的最后一点说了一丢丢，当时还不知道就是多态，小尴尬，双倍快乐吧<a id="more"></a></p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="覆写"><a href="#覆写" class="headerlink" title="覆写"></a>覆写</h2><p>子类对于父类的方法进行的修改就叫覆写(Override)。<br>覆写的方式是在子类中定义一个与父类<strong>方法名相同、返回值和参数一样</strong>的方法，就会变成覆写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 多态</span><br><span class="line">多态是指，针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。</span><br><span class="line">**当一个子类向上转型为父类以后，那么如果父类中有方法被该子类覆写了，调用该方法是会动态调用子类中覆写的方法。**</span><br><span class="line">通过这个性质，对于同一个类的同一个方法就会出现不同的实现方式。例如以下代码：</span><br></pre></td></tr></table></figure><br>public class Main {<br>        public static void main(String[] args){<br>                Preson p1 = new Student();<br>                Preson p2 = new Teacher();<br>                p1.speak();<br>                p2.speak();<br>                p1.speak();<br>        }<br>}<br>public class Preson<br>{<br>    public int age=10;<br>    void speak() {<br>        System.out.println(“父类”);<br>    }<br>}<br>public class Student extends Preson<br>{    @Override//覆写<br>    void speak(){<br>        System.out.println(“学生”);<br>    }<br>}<br>public class Teacher extends Preson<br>{<br>    @Override//覆写<br>    void speak(){<br>        System.out.println(“老师”);<br>    }<br>}<br>```<br>同样都是Person类执行同一个方法输出却是：</p><blockquote><p>学生<br>老师<br>学生</p></blockquote><p><strong>在被子类覆写的方法里面如果想要运行父类方法，可以使用<code>super</code>关键字</strong></p><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>如果不想当前方法不被覆写，可以在方法名前加上final修饰符，就不会被重写了。<br>如果类不想被继承的话，用它就会绝育了。<br>变量用它后就不能修改了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260455778791232" target="_blank" rel="noopener">廖雪峰的java教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个在上一篇，继承的最后一点说了一丢丢，当时还不知道就是多态，小尴尬，双倍快乐吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java继承</title>
    <link href="https://www.dream-ak.top/2020/03/17/Java%E7%BB%A7%E6%89%BF/"/>
    <id>https://www.dream-ak.top/2020/03/17/Java%E7%BB%A7%E6%89%BF/</id>
    <published>2020-03-17T06:42:03.000Z</published>
    <updated>2020-03-25T11:29:29.708Z</updated>
    
    <content type="html"><![CDATA[<p>对于Java继承的存在意义的话，可以把代码规模减少，加快编码速度咯。正确的使用继承和多态就会出现很多不可思议的东西<a id="more"></a></p><h1 id="Java继承"><a href="#Java继承" class="headerlink" title="Java继承"></a>Java继承</h1><h2 id="extends"><a href="#extends" class="headerlink" title="$extends$"></a>$extends$</h2><p>继承是面向对象编程中非常强大的一种机制，它首先可以复用代码。当我们让$Student$从$Person$继承时，$Student$就获得了$Person$的所有功能，我们只需要为$Student$编写新增的功能。<br>继承的关键字是<strong>extends</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class Preson</span><br><span class="line">&#123;</span><br><span class="line">    public int age=10;</span><br><span class="line">void speak() &#123;</span><br><span class="line">System.out.println(age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Student extends Preson//继承Preson类</span><br><span class="line">&#123;</span><br><span class="line">public String meat;</span><br><span class="line">void eat(String x)&#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Main &#123;</span><br><span class="line">        public static void main(String[] args)&#123; </span><br><span class="line">                Student p = new Student();</span><br><span class="line">                p.age = 1;</span><br><span class="line">                p.eat(&quot;Apple&quot;);</span><br><span class="line">                p.speak();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从以上代码可以看出，我们的$Student$类完全可以调用$Person$类的$speak()$方法，也可以自己写方法(譬如$eat()$方法)。<br>在OOP的术语中，我们把$Person$称为超类（super class），父类（parent class），基类（base class），把$Student$称为子类（subclass），扩展类（extended class）。</p><h2 id="继承树"><a href="#继承树" class="headerlink" title="继承树"></a>继承树</h2><p>可以发现上面我们的代码$Person$类是没有$extends$的。不过要注意，他还是有父类，是$Object$类，<strong>在Java里面一切不定义extends的类都有一个Object父类</strong>但是Object没有父类。<br>了解了这个以后我们来看一下继承树：<script type="math/tex">Student \rightarrow Preson \rightarrow Object</script></p><blockquote><p>注意：继承树的根是$Object$，上一个节点就是他的父类</p></blockquote><h2 id="protected"><a href="#protected" class="headerlink" title="$protected$"></a>$protected$</h2><p>继承一大特点：子类无法访问父类的$private$变量或$private$字段，这使得继承的作用被削弱了。为了让子类可以访问父类的字段，我们需要把$private$改为$protected$。原因<a href="https://www.dream-ak.top/2020/03/11/Java%E4%BF%AE%E9%A5%B0%E7%AC%A6/#more">可参考</a>。<br>因此，protected关键字可以把字段和方法的访问权限控制在继承树内部，一个protected字段和方法可以被其子类，以及子类的子类所访问。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>如果父类不含有默认构造方法，那么我们需要使用$super(参数)$去自行构建。<br>含有默认构造方法的话，会自动在构造的时候加一个$super()$。</p><h2 id="转型"><a href="#转型" class="headerlink" title="转型"></a>转型</h2><p>对于Java的继承时我们可以对一个引用变量进行转化。<br>用代码解释一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Student p0 =new Student();</span><br><span class="line">Preson p1 = new Preson();</span><br><span class="line">p1 = p0;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">你会发现他成功了，而且这里的p1会丢失Student类的所有方法和属性，这就是**向上转型(子类向父类转换)**，如果要恢复的话必须要**向下转型(父类向子类转换)**。</span><br><span class="line">子类向父类转化是没啥条件的，毕竟父类本身就有子类的部分属性和方法，只不过是更加抽象而已，但是向下转型是有条件的(向下转型时需要判断它是不是要转化的子类类型，不是就会报错)</span><br><span class="line">### $instanceof$</span><br><span class="line">为了防止向下转型失败，这里提供了$instanceof$关键字来判断是否可以转型。</span><br><span class="line">$instanceof$返回$Boolean$值，true代表是后面的类型，false反之。</span><br></pre></td></tr></table></figure><br>Student p1 = new Student();<br>Preson p2 = new Preson();<br>if(p2 instanceof Student){<br>        p1 = (Student) p2;<br>}<br>```<br>这样就不会报错，防止转型失败</p><blockquote><p>对于一次向上转型来说，对于父类来说，他可以使用父类的所有属性和方法，而子类中定义的所有的方法和属性是没有办法的，但是当子类中对父类方法进行覆写时他就会调用子类覆写后的方法(动态连接)，否则就是调用父类自身方法。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260454548196032" target="_blank" rel="noopener">廖雪峰的Java教程</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于Java继承的存在意义的话，可以把代码规模减少，加快编码速度咯。正确的使用继承和多态就会出现很多不可思议的东西&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>二分匹配最大独立集</title>
    <link href="https://www.dream-ak.top/2020/03/12/%E4%BA%8C%E5%88%86%E5%8C%B9%E9%85%8D%E6%9C%80%E5%A4%A7%E7%8B%AC%E7%AB%8B%E9%9B%86/"/>
    <id>https://www.dream-ak.top/2020/03/12/%E4%BA%8C%E5%88%86%E5%8C%B9%E9%85%8D%E6%9C%80%E5%A4%A7%E7%8B%AC%E7%AB%8B%E9%9B%86/</id>
    <published>2020-03-12T11:04:03.000Z</published>
    <updated>2020-03-12T12:22:08.098Z</updated>
    
    <content type="html"><![CDATA[<p>最近不知为啥老想玩，干脆来打编程游戏算了。。。<a id="more"></a></p><h1 id="二分匹配图"><a href="#二分匹配图" class="headerlink" title="二分匹配图"></a>二分匹配图</h1><h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><blockquote><p>定义：<br>把一个图的顶点划分为两个不相交集 U 和V ，使得每一条边都分别连接U、V中的顶点。如果存在这样的划分，则此图为一个二分图。</p><p>另一个等价定义：<br>一个图里面不含有奇数条边的环。</p><p>匹配：一个匹配是一个边的集合，其中任意两条边都没有公共点。<br>匹配边：一个匹配中，集合里的边是匹配边。<br>匹配点：一个匹配中，集合里的所有点都是匹配点<br>未匹配边：图里的非匹配边<br>未匹配点：图里的非匹配点</p><p>最大匹配：一个图里面所有的匹配中，所含匹配边数最大的匹配。</p><p>完美匹配：当一个图里面所有点都是匹配点时就是完美匹配，显然一个完美匹配就是最大匹配，</p></blockquote><p>举例来说：如果在某一对男孩和女孩之间存在相连的边，就意味着他们彼此喜欢。是否可能让所有男孩和女孩两两配对，使得每对儿都互相喜欢呢？图论中，这就是<strong>完美匹配问题</strong>。如果换一个说法：最多有多少互相喜欢的男孩/女孩可以配对儿？这就是<strong>最大匹配问题</strong>。</p><h2 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h2><p>匈牙利算法：用来解决<strong>二分图</strong>最大匹配问题，时间复杂度$O(NM)$<br>给与两个定义为匈牙利算法服务</p><blockquote><p>交替路：从一个未匹配点出发，依次经过非匹配边、匹配边、非匹配边…形成的路径叫交替路。</p><p>增广路：从一个未匹配点出发，走交替路，如果途径另一个未匹配点（出发的点不算），则这条交替路称为增广路（agumenting path）。</p></blockquote><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><blockquote><p>增广路有一个重要特点：非匹配边比匹配边多一条。因此，研究增广路的意义是改进匹配。只要把增广路中的匹配边和非匹配边的身份交换即可。由于中间的匹配节点不存在其他相连的匹配边，所以这样做不会破坏匹配的性质。交换后，图中的匹配边数目比原来多了 1 条。</p><p>我们可以通过不停地找增广路来增加匹配中的匹配边和匹配点。找不到增广路时，达到最大匹配（这是增广路定理）。</p></blockquote><p>在这里我只写出了dfs版本的匈牙利算法</p><h3 id="最大独立集-图里所有点-最大匹配点数"><a href="#最大独立集-图里所有点-最大匹配点数" class="headerlink" title="最大独立集(图里所有点-最大匹配点数)"></a>最大独立集(图里所有点-最大匹配点数)</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1068" target="_blank" rel="noopener">题目链接</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 5e5+5;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id;</span><br><span class="line">&#125;ed[N];</span><br><span class="line">int head[N],tot=0,vis[N],match[N];</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">    ed[++tot].id=v;</span><br><span class="line">    ed[tot].pre=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">bool dfs(int x)&#123;</span><br><span class="line">    vis[x]=1;</span><br><span class="line">    for (int i = head[x]; ~i; i=ed[i].pre)&#123;</span><br><span class="line">        int v =ed[i].id;</span><br><span class="line">        if(!vis[v])&#123;//不在交替路</span><br><span class="line">            vis[v]=1;//放入交替路</span><br><span class="line">            if(match[v]==-1||dfs(match[v]))&#123;//短路操作，找到第一个非匹配点</span><br><span class="line">                match[v]=x;//对边进行交换。</span><br><span class="line">                match[x]=v;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    while(scanf(&quot;%d&quot;,&amp;n)==1)&#123;</span><br><span class="line">        memset(match,-1,sizeof match);</span><br><span class="line">        memset(head,-1,sizeof head);</span><br><span class="line">        tot=0;</span><br><span class="line">        for (i = 0; i &lt; n; i++)&#123;</span><br><span class="line">            int u,v,t;</span><br><span class="line">            scanf(&quot;%d: (%d)&quot;,&amp;u,&amp;t);</span><br><span class="line">            for (j = 0; j &lt; t; j++)&#123;</span><br><span class="line">                scanf(&quot;%d&quot;,&amp;v);</span><br><span class="line">                add(u,v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int ans=0;</span><br><span class="line">        for (int i = 0; i &lt; n; i++)&#123;</span><br><span class="line">            if(match[i]==-1)&#123;</span><br><span class="line">                memset(vis,0,sizeof (int)*n);</span><br><span class="line">                if(dfs(i)) ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;,n-ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="补充定义"><a href="#补充定义" class="headerlink" title="补充定义"></a>补充定义</h2><p><strong>最小覆盖数</strong> ： 选取最少的点，使任意一条边至少有一个端点被选择<br><strong>最小路径覆盖数</strong>：对于一个 DAG（有向无环图），选取最少条路径，使得每个顶点属于且仅属于一条路径。路径长可以为 0（即单个点）。<br><strong>最大独立数(集)</strong>：选取最多的点，使任意所选两点均不相连。<br><strong>最大匹配数</strong>：最大匹配的匹配边的数目。</p><h2 id="补充定理"><a href="#补充定理" class="headerlink" title="补充定理"></a>补充定理</h2><p>定理1：最大匹配数 = 最小点覆盖数（这是 Konig 定理）<br>&lt;/br&gt;<br>定理2：点数 - 最大匹配数= 最大独立数<br>&lt;/br&gt;<br>定理3：最小路径覆盖数 = 顶点数 - 最大匹配数</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://oi-wiki.org/graph/bi-graph/" target="_blank" rel="noopener"><strong>oi维基</strong></a></li><li><a href="https://blog.csdn.net/qq_41730082/article/details/81456611" target="_blank" rel="noopener"><strong>二分图总结</strong></a></li><li><a href="https://www.renfei.org/blog/bipartite-matching.html" target="_blank" rel="noopener"><strong>最大匹配</strong></a></li></ol><p>第3个里面有bfs版本的匈牙利以及两个版本的速率比较，内容详细，带图。不过最后定理错了，定理参考第二个。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近不知为啥老想玩，干脆来打编程游戏算了。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="https://www.dream-ak.top/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>scanner类</title>
    <link href="https://www.dream-ak.top/2020/03/11/scanner%E7%B1%BB/"/>
    <id>https://www.dream-ak.top/2020/03/11/scanner%E7%B1%BB/</id>
    <published>2020-03-11T12:38:08.000Z</published>
    <updated>2020-03-12T08:54:15.947Z</updated>
    
    <content type="html"><![CDATA[<p>在做实验时候真的尴尬，我居然把Java的输入法给忘了，我记性真的是狗啊，写一篇博客来记吧。<a id="more"></a></p><h1 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h1><p>首先Scanner对象属于java.util.*包里面<br>构造Scanner类对象，附属于System.in保准输入流里面。</p><h2 id="创建Scanner类对象"><a href="#创建Scanner类对象" class="headerlink" title="创建Scanner类对象"></a>创建Scanner类对象</h2><p>创建Scanner类对象和创建其他对象过程是一样的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner  in = new Scanner(System.in);</span><br></pre></td></tr></table></figure><br>每一次要输入值的话就调用这个$in$对象就完事了</p><h2 id="Scanner对象的方法"><a href="#Scanner对象的方法" class="headerlink" title="Scanner对象的方法"></a>Scanner对象的方法</h2><blockquote><p>in.next()<br>输入字符串，从读到第一个有效字符开始，无效字符结束(包括空格，回车)</p><p>in.nextLine()<br>输入字符串，从键盘输入第一个字符开始，遇到回车结束</p><p>in.nextInt()<br>输入单个整型数字</p><p>in.nextFloat<br>输入单个单精度浮点型数字</p><p>in.nextDouble<br>输入单个双精度浮点型数字</p><p>in.nextLong<br>输入单个长整型数字</p><p>in.nextBoolean<br>输入单个布尔型变量</p><p>在以上方法前加单词has后可检查后面数字扫描器的下一个标记是否为指定模式<br>例如 in.hasNextInt()则为判断下一个数字是不是int型，是则返回true，否则false；</p></blockquote><p>in.close()关闭扫描器</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.runoob.com/manual/jdk1.6/" target="_blank" rel="noopener">java的API文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做实验时候真的尴尬，我居然把Java的输入法给忘了，我记性真的是狗啊，写一篇博客来记吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>单调栈</title>
    <link href="https://www.dream-ak.top/2020/03/11/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    <id>https://www.dream-ak.top/2020/03/11/%E5%8D%95%E8%B0%83%E6%A0%88/</id>
    <published>2020-03-11T08:05:33.000Z</published>
    <updated>2020-03-11T09:35:35.443Z</updated>
    
    <content type="html"><![CDATA[<p>这个题目方法貌似很多，但是我在这里介绍一个方法目前已知最快的，利用单调栈！<a id="more"></a></p><h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a><a href="https://oi-wiki.org/ds/monotonous-stack/" target="_blank" rel="noopener">单调栈</a></h1><p>不懂请点击上面链接学习，我就不介绍什么是单调栈了。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="http://39.105.62.44/web/problem.php?id=1035" target="_blank" rel="noopener">题目</a></h2><p>可以到上面链接提交测试。</p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote><p>已知一个长度为n的数组，在其中找一个长度为m的子序列，规则如下：<br>首先第一个数字尽量大，然后第二个数字尽量大，第三个数字也要尽量大，等等…. </p></blockquote><h2 id="思想和解法"><a href="#思想和解法" class="headerlink" title="思想和解法"></a>思想和解法</h2><p>首先按照题意来，我们先求第一个尽量大的值，为了让他能找到m个数字，我们先求1~n-m+1的最大值，那么这个值就会是第一个值，第二个值就是在第一个值的位置到n-m+2的最大值，依次类推，求出所有。<br>可以发现这是一个暴力解法，复杂度是$O(n^2)$</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>我们利用单调栈实现一个单调不上升栈，那么第一个数就是当栈顶下标到n-m+1时的栈底值。把栈底退出(这个操作用数组模拟吧)，第二个数就是栈顶下标到n-m+2的栈底值，以此类推！</p><p>解释一下：因为单调不上升，那么栈底一定最大，且栈内数字顺序没变！符合题意，当把栈底退出以后第二个值就是栈底的下标到n-m+1的最大值咯。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 1e5+5;</span><br><span class="line">int sta[N],a[N];</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    while (scanf(&quot;%d %d&quot;,&amp;n,&amp;m)==2)&#123;</span><br><span class="line">        for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        int l = 0, r = 0;   </span><br><span class="line">        for(i=1;i&lt;=n-m;i++)&#123;</span><br><span class="line">            while(l&lt;r&amp;&amp;a[i]&gt;sta[r]) r--;</span><br><span class="line">            sta[++r] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        for(i=n-m+1;i&lt;=n;i++)&#123;</span><br><span class="line">            while(l&lt;r&amp;&amp;a[i]&gt;sta[r]) r--;</span><br><span class="line">            sta[++r] = a[i];</span><br><span class="line">            l++;</span><br><span class="line">            printf(&quot;%d%c&quot;,sta[l],l==m?&apos;\n&apos;:&apos; &apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相同题型"><a href="#相同题型" class="headerlink" title="相同题型"></a>相同题型</h2><p><a href="https://nanti.jisuanke.com/t/39614" target="_blank" rel="noopener">双倍快乐</a>,单调栈的大于改小于就完事了，数据很大，卡O(nlogn)!.<br><a href="https://leetcode-cn.com/problems/create-maximum-number/solution/dan-diao-zhan-by-powcai/" target="_blank" rel="noopener">秃头快乐</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个题目方法貌似很多，但是我在这里介绍一个方法目前已知最快的，利用单调栈！&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://www.dream-ak.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>Java修饰符</title>
    <link href="https://www.dream-ak.top/2020/03/11/Java%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>https://www.dream-ak.top/2020/03/11/Java%E4%BF%AE%E9%A5%B0%E7%AC%A6/</id>
    <published>2020-03-11T03:03:45.000Z</published>
    <updated>2020-03-11T12:18:05.654Z</updated>
    
    <content type="html"><![CDATA[<p>听课听了一会，发现Java对于修饰符的用途过多，先来了解一下。<a id="more"></a><br>写在前面：本文来自对于<a href="https://www.runoob.com/java/java-modifier-types.html#protected-desc" target="_blank" rel="noopener">这篇文章</a>文章的理解</p><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><p>修饰符分为一下两种：</p><ol><li>访问修饰符</li><li>非访问修饰符</li></ol><h2 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h2><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p><div class="table-container"><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">当前类</th><th style="text-align:center">同一包</th><th style="text-align:center">子孙类(同一包)</th><th style="text-align:center">子孙类(不同包)</th><th style="text-align:center">其他包</th></tr></thead><tbody><tr><td style="text-align:center">public</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y/N(<a href="https://www.runoob.com/java/java-modifier-types.html#protected-desc" target="_blank" rel="noopener">解释请看</a>)</td><td style="text-align:center">N</td></tr><tr><td style="text-align:center">default</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">N</td><td style="text-align:center">N</td></tr><tr><td style="text-align:center">private</td><td style="text-align:center">Y</td><td style="text-align:center">N</td><td style="text-align:center">N</td><td style="text-align:center">N</td><td style="text-align:center">N</td></tr></tbody></table></div><h2 id="非访问控制修饰符"><a href="#非访问控制修饰符" class="headerlink" title="非访问控制修饰符"></a>非访问控制修饰符</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><blockquote><p>静态变量：<br>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p><p>静态方法：<br>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p></blockquote><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><blockquote><p>final 变量<br>final 表示”最后的、最终的”含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。</p></blockquote><p>实践部分：当定义final以后再对final变量修改值编译器会报错！</p><blockquote><p>final 方法<br>父类中的 final 方法可以被子类继承，但是不能被子类重写。<br>声明 final 方法的主要目的是防止该方法的内容被修改。</p></blockquote><h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><blockquote><p>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</p><p>一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。</p><p>抽象类可以包含抽象方法和非抽象方法。</p></blockquote><h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><blockquote><p>抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。</p><p>抽象方法不能被声明成 final 和 static。</p><p>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。</p><p>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。</p></blockquote><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>transient 修饰符<br>volatile 修饰符<br>synchronized 修饰符</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;听课听了一会，发现Java对于修饰符的用途过多，先来了解一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java对象</title>
    <link href="https://www.dream-ak.top/2020/03/11/Java%E5%AF%B9%E8%B1%A1/"/>
    <id>https://www.dream-ak.top/2020/03/11/Java%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-03-11T02:11:29.000Z</published>
    <updated>2020-03-23T02:12:28.103Z</updated>
    
    <content type="html"><![CDATA[<p>听课<a id="more"></a></p><h1 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h1><h2 id="Java面向对象的基本组成"><a href="#Java面向对象的基本组成" class="headerlink" title="Java面向对象的基本组成"></a>Java面向对象的基本组成</h2><ol><li>Java类及类的成员：属性、方法、构造器；代码块、内部类</li><li>面向对象三大特征：封装、继承、多态(抽象)</li><li>关键字：this、super、static、final、abstract、interface、package、import…</li></ol><h2 id="类和对象："><a href="#类和对象：" class="headerlink" title="类和对象："></a>类和对象：</h2><p>类是对一类事物共同特点的统一，而对象就是类的实例。(就像水果和苹果一样)<br>比如：手机需要充电，手机可以打电话，等等都是这个手机就是一个类，华为手机就是一个对象。</p><h3 id="类的代码定义格式"><a href="#类的代码定义格式" class="headerlink" title="类的代码定义格式"></a>类的代码定义格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] class 类名 [父类名] [implements 接口名] &#123;</span><br><span class="line">    //类体,包括属性和方法</span><br><span class="line">    //属性</span><br><span class="line">    [修饰符] 数据类型 变量名 [ = 值]</span><br><span class="line">    //方法</span><br><span class="line">    [修饰符] [返回值] 方法名([参数类型 参数名1]，[参数类型 参数名2]...)&#123;</span><br><span class="line">        方法体</span><br><span class="line">        return 返回值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>一个类不写构造方法时，类会默认一个<code>public Preson()</code>构造方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名 = new 类名();</span><br></pre></td></tr></table></figure></p><p>在创建对象实例时就把内部字段全部初始化为合适的值时我们需要自定义构造方法。</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>在创建类的时候我们同时定义一个方法，同时传入要定义的值，完成初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">        public static void main(String[] args)&#123;</span><br><span class="line">                Preson p = new Preson(18);</span><br><span class="line">                Preson q = new Preson(28);</span><br><span class="line">                p.speak();</span><br><span class="line">                q.speak();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Preson&#123;</span><br><span class="line">    //属性</span><br><span class="line">    private int age;</span><br><span class="line">    public preson(int age)&#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void speak()&#123;</span><br><span class="line">        System.out.println(this.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上就可以自定义构造方法了，但是同时也会废弃默认的<code>Preson p = new Preson()</code>构造方法，想要保存的话，我们可以写两个构造方法。如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名 = new 类名();</span><br></pre></td></tr></table></figure></p><p>在创建对象实例时就把内部字段全部初始化为合适的值时我们需要自定义构造方法。</p><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><p>在创建类的时候我们同时定义一个方法，同时传入要定义的值，完成初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">        public static void main(String[] args)&#123;</span><br><span class="line">                Preson p = new Preson(18);</span><br><span class="line">                Preson q = new Preson();</span><br><span class="line">                p.speak();</span><br><span class="line">                q.speak();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Preson&#123;</span><br><span class="line">    //属性</span><br><span class="line">    private int age = -18;</span><br><span class="line">    public Preson(int age)&#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    public Preson()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public void speak()&#123;</span><br><span class="line">        System.out.println(this.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>在一个类中，我们可以定义多个方法。如果有一系列方法，它们的功能都是类似的，只有参数有所不同，那么，可以把这一组方法名做成同名方法。<br>就像如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">        public static void main(String[] args)&#123;</span><br><span class="line">                Preson p = new Preson();</span><br><span class="line">                Preson q = new Preson();</span><br><span class="line">                p.speak(18);</span><br><span class="line">                q.speak(&quot;小明&quot;);</span><br><span class="line">                p.speak();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Preson&#123;</span><br><span class="line">    //属性</span><br><span class="line">    public int age = 108;</span><br><span class="line">    public String name;</span><br><span class="line">    public void speak(int age)&#123;</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line">    public void speak(String name)&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">    public void speak()&#123;</span><br><span class="line">        System.out.println(age+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>speak方法名就出现了三次，只是各自的参数不同，这就叫方法重载。<br>它存在的意义是让功能类似的方法名字相同，利于记忆，调用更简单。  </p><p>对于一个变量来说，如果他定义在类里面会自动赋初值0，存储在堆里面，如果在方法体里面定义的话，必须手动赋值，且存储在栈里面</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;听课&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯校赛第九题</title>
    <link href="https://www.dream-ak.top/2020/03/10/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E8%B5%9B%E7%AC%AC%E4%B9%9D%E9%A2%98/"/>
    <id>https://www.dream-ak.top/2020/03/10/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E8%B5%9B%E7%AC%AC%E4%B9%9D%E9%A2%98/</id>
    <published>2020-03-10T12:24:09.000Z</published>
    <updated>2020-03-10T13:00:42.768Z</updated>
    
    <content type="html"><![CDATA[<p>去年蓝桥杯炸了，如果今天省赛，我可能又炸了。。。<a id="more"></a></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/2020/03/10/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E8%B5%9B%E7%AC%AC%E4%B9%9D%E9%A2%98/1.png" alt="1"><br>是我凭记忆复现的，链接在这里<a href="http://39.105.62.44/web/problem.php?id=1005" target="_blank" rel="noopener">第九题</a></p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>数据很小，所以第一想法直接把答案全部按照深度优先搜索跑出来，保存下来，然后再交，O(1)输出！<br>深度优先搜索写法：<br>因为每一个数字只与前两个数字有关，那么我们只要每计算一个答案就把这两个数字的答案记录下来，以后在遇到这两个数字就直接使用就好了。(可以学一下记忆化搜索)</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>使用vis二维数组来保存前两个数字，如果vis[x][y]为0的话就没有用过，为0直接就加上就好了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">//#include&lt;windows.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 1005;</span><br><span class="line">int vis[N][N],a[N];</span><br><span class="line">FILE *fp1 = fopen(&quot;D://program//code//acm//oj//testin.txt&quot;,&quot;w+&quot;);</span><br><span class="line">FILE *fp2 = fopen(&quot;D://program//code//acm//oj//testout.txt&quot;,&quot;w+&quot;);</span><br><span class="line">int dfs(int x,int y)&#123;</span><br><span class="line">int ans=0;//求前面两个数字为能产生的数列数量</span><br><span class="line">for(int i=1;i&lt;abs(y-x);i++)&#123;</span><br><span class="line">if(vis[y][i]==0)&#123;//没有用过则计算出答案并保存</span><br><span class="line">vis[y][i]=dfs(y,i);//计算呢前前一个数字是i前面第二个数字是y的数列数。</span><br><span class="line">ans=(ans+vis[y][i])%10000;</span><br><span class="line">&#125;</span><br><span class="line">else ans=(ans+vis[y][i])%10000;</span><br><span class="line">&#125;</span><br><span class="line">return ans+1;//返回数列值并加上当前值</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int i,j,k,n,m;</span><br><span class="line">for(i=1;i&lt;=1000;i++)&#123;//计算以i开始的数列数量</span><br><span class="line">int ans=0;</span><br><span class="line">for(j=1;j&lt;=i;j++)&#123;</span><br><span class="line">if(vis[i][j]==0)&#123;</span><br><span class="line">vis[i][j]=dfs(i,j);</span><br><span class="line">ans=(ans+vis[i][j])%10000;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">ans=(ans+vis[i][j])%10000;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;,ans);</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面时间复杂度为<br>因为一个数字开始的话数量与前两个数字有关所以复杂度为O($n^2$)，n个数字是O($n^3$)<br>打出所有答案后复制到另一个程序输出就好了。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int a[1006]=&#123;1,2,4,7,14,26,53,106,220,452,946,1967,4128,8638,8144,8068,26,8127,3542,3277,3278,7643,5433,5774,8217,4846,687,3097,6887,3556,4840,3454,5378,722,2230,767,1447,1839,4776,7618,7831,6222,5236,7802,5696,1835,1102,9537,1605,1227,3034,2159,1613,6811,3941,6794,5960,4903,75,2158,349,4258,5189,4717,2894,4193,2890,258,2928,6125,2913,1482,8419,7244,1652,3440,2138,9272,4714,3333,3543,8834,6763,9180,1803,4631,6307,9056,3170,8339,6213,1176,3258,272,4257,1893,8020,3682,9531,6961,4145,3086,3455,9057,1346,5768,6907,247,2450,4732,8653,8229,842,3346,9671,7106,3561,4952,9539,1791,6208,6083,8838,7474,6854,198,7300,8219,5912,8884,3976,9650,4821,7317,9720,5572,3834,6326,2281,34,8409,28,445,8155,9846,9944,2504,3954,1639,7243,8502,6926,1609,7449,3769,5695,6683,7531,6275,5827,6184,1982,736,9718,2777,7688,6626,7456,961,5556,7573,6886,4543,3957,2859,4666,9795,305,9052,5350,9827,5445,6970,2599,7566,2848,2987,5179,1537,2392,6375,9621,7376,3301,1357,6545,7838,9390,4284,2631,1814,2566,7666,1110,5694,7595,5000,1290,4735,5994,9401,6475,9012,5877,2867,7912,3509,5505,885,7490,5622,4374,8721,5134,8788,5430,3869,9852,5762,75,5964,262,5565,1599,7525,5388,8612,1143,7938,7580,2953,7901,5629,1456,9852,5216,965,3739,7879,1212,9029,9263,9609,1926,8151,1997,6298,5125,5715,4864,3852,604,7652,313,6248,4077,3875,3816,7046,9525,3798,6959,9366,2216,4463,6546,6367,614,9477,3176,4098,7162,7535,4696,749,2686,8212,9050,255,1389,287,1086,9414,9897,2293,31,9121,4682,7084,8951,834,1051,2236,3712,6426,8642,185,785,8162,6015,658,8923,5741,2551,7629,2095,8882,7695,5629,8684,5116,6362,7701,9441,9403,1108,4395,5688,9466,953,9191,4967,7236,6020,3465,8165,872,4530,3353,7859,1422,1504,6366,126,1246,1530,1777,8970,4590,2195,6920,9086,689,2163,6035,4961,2055,7699,4121,3971,1824,3707,4405,854,6088,6971,1679,1779,7097,5696,2449,2104,3264,796,8595,6183,26,5597,7295,5926,9039,4550,9601,5959,3244,7451,5641,2343,6587,3755,4361,3890,446,8187,1979,7000,7094,8658,1647,6090,8332,4407,4570,2340,3057,5029,5424,2736,4844,2771,5782,5912,3745,2504,2782,7247,1393,5403,7175,9903,1723,7600,7021,4566,9778,5188,46,8542,7915,5043,4983,519,480,8199,1141,73,9316,6248,966,3218,6614,6974,5078,9775,7263,6263,7267,1947,5357,286,674,3876,1985,4731,1850,512,1493,5310,5443,4183,5963,8642,1389,6320,4264,9565,7348,4378,6192,1300,3393,4794,8323,6063,9651,9368,7899,9053,4933,5140,5604,9114,9299,7603,2485,884,7313,4139,9883,1405,9843,7419,1483,2031,8610,4150,3313,6257,3790,1688,994,1357,9660,583,5735,1548,7156,9678,8047,3617,9611,7966,7764,5177,7716,4206,7985,6989,6318,5854,8292,9639,687,370,3252,7104,5813,758,8219,3809,2506,3605,9340,3559,4118,4757,8229,4258,944,1596,4940,622,5832,1270,6948,1744,1125,7895,9348,7601,7426,1975,9611,3722,4143,4979,7904,3221,3817,5755,1798,6549,3463,3190,201,6894,6209,3488,670,7643,7020,6164,5583,5036,6309,8644,7961,3465,7795,1486,4535,3111,5252,4049,4253,7515,1517,6148,2438,1296,8826,7924,7761,9126,6951,7110,7549,1170,8533,793,1633,6451,6261,5887,8694,6447,8993,6398,1289,2925,2362,3935,6744,1358,1743,3937,9942,3696,1601,8295,3086,2595,9554,8566,1465,2109,3474,3950,9216,8948,2020,3536,943,4934,8377,6171,1243,3525,259,3001,4205,4548,4754,2365,8630,4690,7872,5131,3995,2672,728,6532,9785,9379,5865,4774,6660,3721,4451,9085,4771,8008,857,9737,5630,4040,3106,5997,4152,8542,3992,3294,5064,2656,5247,635,1521,3026,1502,9396,2171,7188,2425,9758,2640,8648,9454,274,9471,8972,9301,911,6023,4155,126,7802,2948,5675,6313,69,1374,9925,3685,6901,432,1884,4803,8173,9638,3626,695,4286,3836,8670,8834,1444,5187,6281,2482,8801,7656,9066,5138,5160,9857,906,5235,7243,5281,5103,5826,5023,3637,5607,1204,5697,3422,1192,8753,6087,2083,3256,8201,9853,1886,3953,4732,7351,6387,9148,2299,4843,3891,3572,874,9873,1235,7323,8860,3439,113,5132,6521,1234,7427,4062,1342,2480,641,8802,9788,5336,3649,1301,3268,749,1628,9202,2689,3284,9170,5252,1577,1705,5640,2185,2252,4943,271,5117,8699,2743,8221,2119,3851,701,2740,4247,7037,9764,4445,5848,6135,6166,5328,2584,1131,3005,8817,2783,7749,6112,5567,9688,2549,7929,8650,60,1896,3998,7345,3352,8990,1143,873,1191,5821,9485,5249,3086,8016,9319,4139,3566,8871,7528,7873,4117,1085,7064,8222,5947,4447,1326,5206,12,9703,5711,3951,219,6966,3168,2372,9603,9092,1904,1010,2704,2106,7568,3410,296,6825,9781,637,4465,7953,6861,2142,2035,9743,1921,3051,7424,7112,7676,5245,9531,2284,4498,6423,6977,3106,1367,5696,2003,1291,3025,76,3147,9094,4580,5097,7390,8637,5853,359,3153,4957,6635,5721,3353,2266,3481,7432,3020,7330,1172,5285,1525,2928,5331,8856,2163,5169,1465,4439,1876,7446,2192,5577,726,6599,352,3645,7733,8331,5447,8017,5017,7287,6602,7248,6323,4195,9617,2263,4013,450,4073,6131,3569,9019,1858,9827,8118,4972,7422,9666,5760,9213,2817,7952,3948,8683,3645,6402,3264,1919,9276,2519,190,766,8940,3413,2644,8048,83,9724,7009,3777,9663,2483,5752,4578,8951,5902,2170,9967,894,8556,6049,7254,2746,8962,8317,6848,767,7907,1028,9458,6881,4978,6717,8210,3835,1064,7434,746,9449&#125;;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int x;</span><br><span class="line">    while(scanf(&quot;%d&quot;,&amp;x)==1)&#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,a[x-1]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="我的小结"><a href="#我的小结" class="headerlink" title="我的小结"></a>我的小结</h2><p>emmmm，手机浸水，一边比赛一边晾手机果然写出bug了，第7题血亏！还是不能飘啊。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年蓝桥杯炸了，如果今天省赛，我可能又炸了。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="思维" scheme="https://www.dream-ak.top/categories/%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>数据库操作</title>
    <link href="https://www.dream-ak.top/2020/03/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    <id>https://www.dream-ak.top/2020/03/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</id>
    <published>2020-03-10T01:35:16.000Z</published>
    <updated>2020-04-10T15:07:52.782Z</updated>
    
    <content type="html"><![CDATA[<p>最近搭建了一个服务器，需要管理数据库了，嗯，其实还有是我数据库也开了课，就一起学吧。这一片单纯介绍数据库常见常用命令<a id="more"></a></p><h1 id="数据库常用命令"><a href="#数据库常用命令" class="headerlink" title="数据库常用命令"></a>数据库常用命令</h1><h2 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h2><ol><li>mysql -h 主机地址 -u 用户名 -p 用户密码<br>如果是本地登录则不需要-h的主机地址<br>如下是Linux服务器打开方式，本地登录没有h<img src="/2020/03/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/登录.png" alt="登录"><br>windows打开方式：<br>先要进入如图这个目录，不进入的话该命令会无效的，我就不细说，大家应该都是一个目录里面。<br><img src="/2020/03/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/windows.png" alt="1"><h2 id="退出MySQL"><a href="#退出MySQL" class="headerlink" title="退出MySQL"></a>退出MySQL</h2>输入exit然后回车就完事了<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2>退出MySQL以后在同一个目录使用如下命令</li><li>mysqladmin -u root -p密码 password<br>-p密码那里是连起来的，直接回车如图<br><img src="/2020/03/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/修改密码.png" alt="1"><h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2>首先写在前面：</li><li>对于一个数据库操作命令都是以一个英文分号”;”结束。</li></ol><p>如果你输入命令错误，可以选择先输入一个分号，让他执行错误命令，重新输入。</p><h3 id="库的命令"><a href="#库的命令" class="headerlink" title="库的命令"></a>库的命令</h3><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">create database name</td><td style="text-align:center">创建数据库</td></tr><tr><td style="text-align:center">use database name</td><td style="text-align:center">选择数据库</td></tr><tr><td style="text-align:center">show databases</td><td style="text-align:center">显示所有数据库</td></tr><tr><td style="text-align:center">drop database name</td><td style="text-align:center">直接删除数据库，不提醒</td></tr></tbody></table></div><p>具体操作如下：<img src="/2020/03/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/base.png" alt="操作"></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>这个由于太多我只做简单常用介绍，如想详细了解，<a href="https://www.runoob.com/mysql/mysql-data-types.html" target="_blank" rel="noopener">点击</a>。</p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节长度</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">int</td><td style="text-align:center">4字节</td><td style="text-align:center">整数</td></tr><tr><td style="text-align:center">bigint</td><td style="text-align:center">8字节</td><td style="text-align:center">整数</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8字节</td><td style="text-align:center">双精度浮点型</td></tr><tr><td style="text-align:center">date</td><td style="text-align:center">3字节</td><td style="text-align:center">日期值(格式：YYYY:MM:DD)</td></tr><tr><td style="text-align:center">time</td><td style="text-align:center">3字节</td><td style="text-align:center">时间值(HH:MM:SS)</td></tr><tr><td style="text-align:center">year</td><td style="text-align:center">1字节</td><td style="text-align:center">年份值(YYYY)</td></tr><tr><td style="text-align:center">datetime</td><td style="text-align:center">8</td><td style="text-align:center">混合日期和时间值(YYYY:MM::DD HH:MM:SS)</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">0-255字节</td><td style="text-align:center">定长字符串</td></tr><tr><td style="text-align:center">varchar</td><td style="text-align:center">0-65535字节</td><td style="text-align:center">变长字符串</td></tr></tbody></table></div><h3 id="表的命令"><a href="#表的命令" class="headerlink" title="表的命令"></a>表的命令</h3><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">create table name(变量 数据类型)</td><td style="text-align:center">创建表</td></tr><tr><td style="text-align:center">drop table name</td><td style="text-align:center">删除表</td></tr><tr><td style="text-align:center">show tables</td><td style="text-align:center">查看当前选定数据库包含的表格</td></tr></tbody></table></div><h4 id="数据添加"><a href="#数据添加" class="headerlink" title="数据添加"></a>数据添加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 (字段1，字段2，...) value (值1，值2，...)</span><br></pre></td></tr></table></figure><h4 id="数据修改"><a href="#数据修改" class="headerlink" title="数据修改"></a>数据修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update 表名 set (字段1 = 值，字段2 = 值，...) where ...</span><br></pre></td></tr></table></figure><h4 id="数据删除"><a href="#数据删除" class="headerlink" title="数据删除"></a>数据删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from 表名 where ...</span><br></pre></td></tr></table></figure><h4 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名 where ...</span><br></pre></td></tr></table></figure><p>解释一下，这一句，其中的$*$是通配符，它会显示所有列，如果只要显示部分列的话，可以将其改为需要的列名。</p><h4 id="where-语句"><a href="#where-语句" class="headerlink" title="$where$语句"></a>$where$语句</h4><p>$where$语句类似于C语言的$if$具有判断功能，其中的逻辑符号如下</p><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">not</td><td style="text-align:center">非</td></tr><tr><td style="text-align:center">or</td><td style="text-align:center">或</td></tr><tr><td style="text-align:center">and</td><td style="text-align:center">且</td></tr></tbody></table></div><p>语句执行的优先级(无括号)：$not&gt;and&gt;or$<br>同时除了一般的大于、小于、等于的判断语句外增加了一个like语句，可以判断相似。</p><h4 id="对表属性的修改"><a href="#对表属性的修改" class="headerlink" title="对表属性的修改"></a>对表属性的修改</h4><p>下面列表表示对表$person$(其中含有$name$,$age$两个属性)</p><div class="table-container"><table><thead><tr><th style="text-align:center">语法</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">alter table person drop age</td><td style="text-align:center">删除$age$列</td></tr><tr><td style="text-align:center">alter table person add column id varchar(20) not null primary key</td><td style="text-align:center">增加一个$id$列，字符长度上限为20，非空，且为主键</td></tr><tr><td style="text-align:center">alter table person alter column age set default 0</td><td style="text-align:center">将$age$列默认为0</td></tr><tr><td style="text-align:center">alter table person alter column age drop default</td><td style="text-align:center">删除$age$列的默认值</td></tr></tbody></table></div><p>介绍两个动态修改属性的关键字</p><ol><li><p>modify<br>用法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name</span><br><span class="line">MODIFY 字段名称 字段类型 [字段属性] [FIRST | AFTER 字段名称]</span><br></pre></td></tr></table></figure></li><li><p>change<br>用法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name</span><br><span class="line">CHANGE 原字段 新字段名称 字段类型 字段属性 [FIRST|AFTER 字段名称]</span><br></pre></td></tr></table></figure></li></ol><p>可以发现后面一个能改字段名称。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/WildestDeram/article/details/89316431" target="_blank" rel="noopener">动态修改属性</a><br><a href="https://www.cnblogs.com/mm20/p/8060425.html" target="_blank" rel="noopener">自增长列的设置</a>，回答了非主键可不可以设置子增长列，以及限制。<br><a href="https://www.runoob.com/mysql/mysql-data-types.html" target="_blank" rel="noopener">菜鸟驿站</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近搭建了一个服务器，需要管理数据库了，嗯，其实还有是我数据库也开了课，就一起学吧。这一片单纯介绍数据库常见常用命令&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://www.dream-ak.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://www.dream-ak.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>python文件操作</title>
    <link href="https://www.dream-ak.top/2020/03/06/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>https://www.dream-ak.top/2020/03/06/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</id>
    <published>2020-03-06T01:41:54.000Z</published>
    <updated>2020-03-21T12:46:06.811Z</updated>
    
    <content type="html"><![CDATA[<p>最近刷题刷的一堆exe文件，实在太多了，我就写了一个脚本操作，用来删除一个文件目录下的所有exe文件，嗯，因为是电脑，所以删错了不管，用的时候再小心吧。<a id="more"></a></p><h1 id="文件的一些函数"><a href="#文件的一些函数" class="headerlink" title="文件的一些函数"></a>文件的一些函数</h1><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">参数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><strong>os.getcwd()</strong></td><td style="text-align:center">无参数</td><td style="text-align:center">返回当前工作目录</td></tr><tr><td style="text-align:center"><strong>os.chdir()</strong></td><td style="text-align:center">地址</td><td style="text-align:center">修改当前工作目录到指定文件地址</td></tr><tr><td style="text-align:center"><strong>os.listdir()</strong></td><td style="text-align:center">地址</td><td style="text-align:center">查看当前目录下所有文件</td></tr><tr><td style="text-align:center"><strong>os.makedirs()</strong></td><td style="text-align:center">新建文件夹名称</td><td style="text-align:center">新建文件夹</td></tr><tr><td style="text-align:center"><strong>os.remove(path)</strong></td><td style="text-align:center">路径</td><td style="text-align:center">删除文件</td></tr><tr><td style="text-align:center"><strong>os.rmdir(path)</strong></td><td style="text-align:center">路径</td><td style="text-align:center">删除空目录，非空目录报错</td></tr><tr><td style="text-align:center"><strong>os.path.join()</strong></td><td style="text-align:center">要添加的文件路径(字符串)</td><td style="text-align:center">构建一个在所有系统都能运行的文件路径</td></tr><tr><td style="text-align:center"><strong>os.path.abspath()</strong></td><td style="text-align:center">路径(可以为相对路径’..’，’.’)</td><td style="text-align:center">返回绝对路径</td></tr><tr><td style="text-align:center"><strong>os.path.relpath(path,start)</strong></td><td style="text-align:center">start：一个路径，path：路径</td><td style="text-align:center">返回从start到path的相对路径，没有start参数时默认当前工作目录</td></tr><tr><td style="text-align:center"><strong>os.path.dirname()</strong></td><td style="text-align:center">路径</td><td style="text-align:center">返回最后一个斜杠以前的所有字符串</td></tr><tr><td style="text-align:center"><strong>os.path.basename()</strong></td><td style="text-align:center">路径</td><td style="text-align:center">返回最后一个斜杠以后的字符串</td></tr><tr><td style="text-align:center"><strong>os.path.getsize(path)</strong></td><td style="text-align:center">路径</td><td style="text-align:center">返回该路径下指定文件的字节数</td></tr><tr><td style="text-align:center"><strong>os.path.exists(path)</strong></td><td style="text-align:center">路径</td><td style="text-align:center">返回bool值表示路径是否存在</td></tr><tr><td style="text-align:center"><strong>os.path.isdir(path)</strong></td><td style="text-align:center">路径</td><td style="text-align:center">返回bool值表示路径是否存在且为目录</td></tr><tr><td style="text-align:center"><strong>os.path.isfile(path)</strong></td><td style="text-align:center">路径</td><td style="text-align:center">返回bool值表示路径是否存在且为文件</td></tr><tr><td style="text-align:center">os.path.rename(str1,str2)</td><td style="text-align:center">俩路径</td><td style="text-align:center">重命名str1文件位str2文件</td></tr><tr><td style="text-align:center"><strong>f = open(path,x)</strong></td><td style="text-align:center">文件路径,x为赋予权限</td><td style="text-align:center">打开文件，且f为文件引用<warn></warn></td></tr><tr><td style="text-align:center"><strong>f.read()</strong></td><td style="text-align:center">无参数</td><td style="text-align:center">返回一个字符串表示文件内容</td></tr><tr><td style="text-align:center"><strong>f.readline</strong></td><td style="text-align:center">无参数</td><td style="text-align:center">返回一个list表示文件每一行</td></tr><tr><td style="text-align:center"><strong>f.close</strong></td><td style="text-align:center">无参数</td><td style="text-align:center">关闭文件</td></tr></tbody></table></div><h2 id="作死之旅"><a href="#作死之旅" class="headerlink" title="作死之旅"></a>作死之旅</h2><p>这是我对于py做的第一个小脚本，使用了类与对象，各种文件操作，学习了一波迭代器，生成器，和异常处理，差不多是对于py的一次小应用了。</p><p>对于这个脚本的话我这里功能是：</p><ol><li>能删除指定后缀文件，只要后缀相同一定删除，无情^-^</li><li>能像linux一样操作但是操作指令不同，支持绝对路径与相对路径的输入</li><li>可以随时查看当前目录的文件</li><li>随时退出</li></ol><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><ol><li>递归遍历判断是否为目录</li><li>用os.path.abspath把相对路径转成绝对路径</li><li>os.listdir</li><li>break</li></ol><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>我感觉这个删除脚本十分好用，反正我喜欢，还增加了我对于异常处理的能力，其实是学习了一下，对于迭代器的使用，（一开始不想要递归，毕竟它代价有点大，就学了一下，发现我用不上，菜了）对于文件命令的操作，字符串的处理方式也得到了锻炼，对于py的脚本以后就要开始写其他的了（例如excel操作）</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">class Flie(object):</span><br><span class="line">    def list(self):</span><br><span class="line">        print(&quot;当前工作目录：&quot;+os.getcwd())</span><br><span class="line">        file = os.listdir(os.getcwd())</span><br><span class="line">        print(&apos;\n&apos;.join(file))</span><br><span class="line">        pass</span><br><span class="line">    def goto(self, path):</span><br><span class="line">        os.chdir(path)</span><br><span class="line">        pass</span><br><span class="line">    def pathname(self,name):</span><br><span class="line">        print(&quot;请输入你将要进入的文件目录&quot;)</span><br><span class="line">        names = name.split(&quot;\\&quot;)</span><br><span class="line">        x = &apos;\\&apos;.join(names)</span><br><span class="line">        pathnames = os.path.join(x)</span><br><span class="line">        if os.path.isdir(pathnames):</span><br><span class="line">            return pathnames</span><br><span class="line">            pass</span><br><span class="line">        else :</span><br><span class="line">            print(&quot;不存在该目录，请重新尝试^-^&quot;)</span><br><span class="line">        pass</span><br><span class="line">    def erease(self, pathnam,format):</span><br><span class="line">        #os.chdir(pathname)</span><br><span class="line">        pathname=os.path.abspath(pathnam)</span><br><span class="line">        for i in os.listdir(pathname):</span><br><span class="line">            print(pathname)</span><br><span class="line">            pathname1 = os.path.join(pathname,i)</span><br><span class="line">            if os.path.isdir(pathname1):</span><br><span class="line">                self.erease(pathname1,format)</span><br><span class="line">            else:</span><br><span class="line">                file1 = i.split(&apos;.&apos;)</span><br><span class="line">                if file1[-1]==format:</span><br><span class="line">                    try:</span><br><span class="line">                        os.remove(pathname1)</span><br><span class="line">                    except FileNotFoundError as identifier:</span><br><span class="line">                        print(&quot;当前错误删除路径&quot;+os.path.join(os.getcwd(),pathname1))</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    print(&quot;准备完毕，请输入：&quot;)</span><br><span class="line">    os.chdir(&apos;C:\\&apos;)</span><br><span class="line">    print(os.getcwd())</span><br><span class="line">    x = Flie()</span><br><span class="line">    flag  = True</span><br><span class="line">    while flag:</span><br><span class="line">        operate = input().split()</span><br><span class="line">        op = operate[0]</span><br><span class="line">        if op == &quot;goto&quot;:</span><br><span class="line">            name = x.pathname(str(operate[1]))</span><br><span class="line">            try:</span><br><span class="line">                x.goto(name)</span><br><span class="line">            except TypeError as identifier:</span><br><span class="line">                continue</span><br><span class="line">        elif op == &quot;del&quot;:</span><br><span class="line">            name = x.pathname(str(operate[1]))</span><br><span class="line">            print(os.path.getsize(name))</span><br><span class="line">            x.erease(name,operate[2])</span><br><span class="line">            pass</span><br><span class="line">        elif op == &quot;cls&quot;:</span><br><span class="line">            os.system(&apos;cls&apos;)</span><br><span class="line">            print(&quot;当前文件位置：&quot;+os.getcwd())</span><br><span class="line">        elif op == &quot;list&quot;:</span><br><span class="line">            x.list()</span><br><span class="line">        elif op == &quot;help&quot;:</span><br><span class="line">            print(&quot;goto + path：表示进入路径&quot;)</span><br><span class="line">            print(&quot;del + path + str：表示删除该路径下某个特定的文件后缀&quot;)</span><br><span class="line">            print(&quot;cls：清屏&quot;)</span><br><span class="line">            print(&quot;list：打印整个目录下文件&quot;)</span><br><span class="line">            print(&quot;quit：程序退出&quot;)</span><br><span class="line">        elif op == &quot;quit&quot;:</span><br><span class="line">            break</span><br><span class="line">        else :</span><br><span class="line">            print(&quot;输入格式错误，请输入正确格式或输入help寻求帮助&quot;)</span><br><span class="line">            pass</span><br></pre></td></tr></table></figure><p>有漏洞可以提出来，我已经成功的删除了我刷题时产生的所有exe文件了，嘿嘿嘿。有个缺陷是有可能进不了文件而报错，我是没有去弄这个异常的，有大佬经过时可否提点我一下？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近刷题刷的一堆exe文件，实在太多了，我就写了一个脚本操作，用来删除一个文件目录下的所有exe文件，嗯，因为是电脑，所以删错了不管，用的时候再小心吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python基础" scheme="https://www.dream-ak.top/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="https://www.dream-ak.top/tags/python/"/>
    
  </entry>
  
</feed>
