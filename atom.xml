<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤独行者</title>
  
  <subtitle>心有不甘，却无以为继</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.dream-ak.top/"/>
  <updated>2020-03-02T03:38:14.454Z</updated>
  <id>https://www.dream-ak.top/</id>
  
  <author>
    <name>无向秃</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java程序基础</title>
    <link href="https://www.dream-ak.top/2020/03/02/java%E5%BC%80%E5%AD%A6/"/>
    <id>https://www.dream-ak.top/2020/03/02/java%E5%BC%80%E5%AD%A6/</id>
    <published>2020-03-02T02:28:49.000Z</published>
    <updated>2020-03-02T03:38:14.454Z</updated>
    
    <content type="html"><![CDATA[<p>突然学校开学了，那我就勉为其难开始学习一波Java吧，这里还是写一些对于廖雪峰大神博客的理解和课堂的理解。<br><a id="more"></a></p><h1 id="Java程序基础"><a href="#Java程序基础" class="headerlink" title="Java程序基础"></a>Java程序基础</h1><h2 id="基本单位-Class"><a href="#基本单位-Class" class="headerlink" title="基本单位:Class"></a>基本单位:Class</h2><p>首先对于Java来说他的基本单位是$Class$而不像C语言基本单位是函数！<br>对于每一个类他的定义一般是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Hello&#123;</span><br><span class="line">    public static void main()&#123;//方法名是main()</span><br><span class="line">        system.out.println()//system.out.print+line整行输出的意思</span><br><span class="line">        //单行注释</span><br><span class="line">        /*</span><br><span class="line">        多行注释</span><br><span class="line">        */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里的public是访问修饰符，表示Class公开</p><h3 id="Class的命名规则"><a href="#Class的命名规则" class="headerlink" title="Class的命名规则"></a>Class的命名规则</h3><p>Class的命名规则与py的Class一样，使用大驼峰规则：</p><blockquote><p>Hello<br>NoteBook<br>VRPlayer</p></blockquote><h3 id="方法的命名规则"><a href="#方法的命名规则" class="headerlink" title="方法的命名规则"></a>方法的命名规则</h3><p>方法名命名规则是小驼峰：</p><blockquote><p>main<br>goodMorning<br>playVR</p></blockquote><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ol><li>直接与C语言相比，Java的int没有变化，long long变成long，用法不变</li><li>java整数运算没有误差，与C语言没有什么变化</li><li>java浮点数运算有误差，在比较的时候需要表示在一个容错值之中！</li><li>java布尔运算的变量名为boolean，且逻辑运算和三元运算符也有相同用法</li><li>java字符中和C语言字符差不多，但是由于用的Unicode编码，所以空间占两个字节，显示Unicode编码直接将char放到int就好了，由编码转Unicode编码则加上’\u’</li><li>java字符串中和py的string用法相似，都是不可变变量且多行输出用法一样system.out.print(“”””…”””);</li><li>java数组操作，对于定义一个int[] ns= new int[5]；这样就是定义一个ns数组，可以用ns.length获取数组长度</li></ol><h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><ol><li>从数组下标从0到lenth-1挨个访问</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] ns = &#123; 1, 4, 9, 16, 25 &#125;;</span><br><span class="line">        for (int i=0; i&lt;ns.length; i++) &#123;</span><br><span class="line">            int n = ns[i];</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>用for each迭代答案</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] ns = &#123; 1, 4, 9, 16, 25 &#125;;</span><br><span class="line">        for (int n : ns) &#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>Arrays.sort(数组名称)按升序排序</p><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>对于java来说，以main函数为程序入口，main(string[] args)这里的string[]是传入命令行参数的入口<br>来看代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        for (String arg : args) &#123;</span><br><span class="line">            if (&quot;-version&quot;.equals(arg)) &#123;</span><br><span class="line">                System.out.println(&quot;v 1.0&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>操作方法：<br>首先我们先编译</p><ol><li>javac 待编译文件</li><li>java 文件名 传入参数</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然学校开学了，那我就勉为其难开始学习一波Java吧，这里还是写一些对于廖雪峰大神博客的理解和课堂的理解。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.dream-ak.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>两数相加</title>
    <link href="https://www.dream-ak.top/2020/03/01/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>https://www.dream-ak.top/2020/03/01/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</id>
    <published>2020-03-01T03:43:51.000Z</published>
    <updated>2020-03-02T03:48:34.320Z</updated>
    
    <content type="html"><![CDATA[<p>第二题，说句实在的，用py模拟的链表，因为不熟悉力扣的测试样例wa了n久，难顶！<br><a id="more"></a><br>对于这一题，说实在的没有啥算法可言，就是暴力模拟，我第一次了解py的链表，感觉还是值得一刷，就写了一下，解法就过了，没说的，竖式相加，逢十进位<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># Definition for singly-linked list.定义单链表的意思</span><br><span class="line"># class ListNode:</span><br><span class="line">#     def __init__(self, x):</span><br><span class="line">#         self.val = x</span><br><span class="line">#         self.next = None</span><br><span class="line"></span><br><span class="line">class Solution:</span><br><span class="line">    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -&gt; ListNode:</span><br><span class="line">        key=0</span><br><span class="line">        pre = ListNode(0)</span><br><span class="line">        ans = pre</span><br><span class="line">        while l1!=None and l2!=None:</span><br><span class="line">           x = ((l1.val+l2.val+key)%10)</span><br><span class="line">           cur = ListNode(x)</span><br><span class="line">           pre.next=cur</span><br><span class="line">           pre=cur</span><br><span class="line">           key = (l1.val+l2.val+key)//10</span><br><span class="line">           l1,l2=l1.next,l2.next</span><br><span class="line">        while(l1!=None):</span><br><span class="line">            x = ((l1.val+key)%10)</span><br><span class="line">            key = (l1.val+key)//10</span><br><span class="line">            cur = ListNode(x)</span><br><span class="line">            pre.next=cur</span><br><span class="line">            pre=cur</span><br><span class="line">            l1=l1.next</span><br><span class="line">        while(l2!=None):</span><br><span class="line">            x = ((l2.val+key)%10)</span><br><span class="line">            key = (l2.val+key)//10</span><br><span class="line">            cur = ListNode(x)</span><br><span class="line">            pre.next=cur</span><br><span class="line">            pre=cur</span><br><span class="line">            l2=l2.next</span><br><span class="line">        if key!=0:</span><br><span class="line">            cur = ListNode(key)</span><br><span class="line">            pre.next=cur</span><br><span class="line">        return ans.next</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第二题，说句实在的，用py模拟的链表，因为不熟悉力扣的测试样例wa了n久，难顶！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://www.dream-ak.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>两数之和</title>
    <link href="https://www.dream-ak.top/2020/02/29/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://www.dream-ak.top/2020/02/29/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2020-02-29T14:22:23.000Z</published>
    <updated>2020-02-29T15:08:11.588Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode计划开始了，以后每天刷1道力扣题打卡，尽量不用ACM本命C与C++(除非实在不会用java或python来写了)。<br><a id="more"></a></p><h1 id="第一题：两数之和"><a href="#第一题：两数之和" class="headerlink" title="第一题：两数之和"></a>第一题：两数之和</h1><p>题意：给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>对于这个题目，因为简单，所以这里提供的解法有如下几种</p><ol><li>暴力$O(n*n)$<br>每一次枚举一个i然后从i开始往后找另一个值与之相加为x的数字，找到则直接返回下标。</li><li>字典映射<br>对于每一个数字由于只有两个$(x,y)$数字，那么我们假设其中一个数字为$x$，则另一个数字一定是$target-x$<br>通过这个特性，我们可以选择建立一个dict{x:i},x为差值，i为下标，我们每一次假设一个x时则查看前面是否出现过target-x，出现了直接返回就好了，没出现则加入字典。时间复杂度$O(n*log_2n)$字典的查询自带$log_2$<br>32ms<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:</span><br><span class="line">        num=&#123;&#125;</span><br><span class="line">        pos=0</span><br><span class="line">        for i in nums:</span><br><span class="line">            x = target - i</span><br><span class="line">            if num.get(x,-1)!=-1:</span><br><span class="line">                return [num[x],pos]</span><br><span class="line">            num[i]=pos</span><br><span class="line">            pos+=1</span><br></pre></td></tr></table></figure></li><li>二分<br>建立一个$list$存储大小与下标，然后对大小从小到大排序，接下来用二分查找向后查找$target-x$时间复杂度$n*log_2 n$<br>54ms<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:</span><br><span class="line">        lenth=len(nums)</span><br><span class="line">        a=[[nums[pos],pos] for pos in range(0,lenth,1)]</span><br><span class="line">        b = sorted(a,key=lambda x: x[0])</span><br><span class="line">        for i in range(0,lenth,1):</span><br><span class="line">            x = target-b[i][0]</span><br><span class="line">            l , r = i+1,len(b)-1</span><br><span class="line">            while(l&lt;r):</span><br><span class="line">                mid=(l+r)//2</span><br><span class="line">                if b[mid][0]&gt;=x:</span><br><span class="line">                    r=mid</span><br><span class="line">                elif b[mid][0]&lt;x:</span><br><span class="line">                    l=mid+1</span><br><span class="line">            if b[l][0]==x:</span><br><span class="line">                x = [b[i][1],b[l][1]]</span><br><span class="line">                y=sorted(x)</span><br><span class="line">                return y</span><br></pre></td></tr></table></figure><h2 id="自我总结"><a href="#自我总结" class="headerlink" title="自我总结"></a>自我总结</h2>对于这一题，我的个人总结是用python实现了一次二分同时学会了排序<br>sorted函数带三个参数：</li><li>要排序数组</li><li>排序方式，是一个函数<br>写法key=一个函数，这里是lambda x:x[0]按照第一个值排序</li><li>reverse反转，让她从小到大与从大到小之间变化</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;leetcode计划开始了，以后每天刷1道力扣题打卡，尽量不用ACM本命C与C++(除非实在不会用java或python来写了)。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://www.dream-ak.top/categories/leetcode/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>最短路和次短路的数量</title>
    <link href="https://www.dream-ak.top/2020/02/29/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%92%8C%E6%AC%A1%E7%9F%AD%E8%B7%AF%E7%9A%84%E6%95%B0%E9%87%8F/"/>
    <id>https://www.dream-ak.top/2020/02/29/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%92%8C%E6%AC%A1%E7%9F%AD%E8%B7%AF%E7%9A%84%E6%95%B0%E9%87%8F/</id>
    <published>2020-02-29T09:54:30.000Z</published>
    <updated>2020-02-29T14:00:46.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="http://poj.org/problem?id=3463" target="_blank" rel="noopener">题目链接</a></h1><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>给一个图，求1到n的最短路径和比最短路径短一个单位的路径数量有多少</p><h2 id="思想和解法"><a href="#思想和解法" class="headerlink" title="思想和解法"></a>思想和解法</h2><p>首先看到这个题目，我们第一时间就会想到最短路径数量，直接就暴力跑迪杰斯特拉然后统计一下就完事了，最多加个次短路而已，我们就按照次短路生成的方式，跑迪杰斯特拉，然后记录到达每个点的最短路数量和次短路数量。</p><ol><li>优化最短路时就把当前次短路的数量赋值给最短路，</li><li>通过次短路优化次短路时就把前一个点的次短路数量赋值给下一个点的数量</li></ol><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>想法很简单，但是这题如果大量使用空间则会爆优先队列，因此我们要注意对优先队列进行节省空间，对于每一个点能让它少入队，则少让他入队。<br>把优化最短路时最短路和次短路的这两次入队归为一次，就会节省很多空间！所以写法再次修改为如下，分为4个步骤：</p><ol><li>优化最短路</li><li>等于最短路</li><li>优化次短路</li><li>等于次短路<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e5+5;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id,w;</span><br><span class="line">&#125;ed[N];</span><br><span class="line">int head[N],dis[N],dis2[N],tot=0,num1[N],num2[N];</span><br><span class="line">void init()&#123;</span><br><span class="line">    memset(head,-1,sizeof head);</span><br><span class="line">    memset(dis,0x3f,sizeof dis);</span><br><span class="line">    memset(dis2,0x3f,sizeof dis2);</span><br><span class="line">    memset(num1,0,sizeof num1);</span><br><span class="line">    memset(num2,0,sizeof num2);</span><br><span class="line">    tot=2;</span><br><span class="line">&#125;</span><br><span class="line">void add(int u,int v,int w)&#123;</span><br><span class="line">    ed[++tot].id=v;</span><br><span class="line">    ed[tot].pre=head[u];</span><br><span class="line">    ed[tot].w=w;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;int,int&gt; &gt;q;</span><br><span class="line">void dij(int x)&#123;</span><br><span class="line">    dis[x]=0;</span><br><span class="line">    num1[x]=1;</span><br><span class="line">    q.push(make_pair(0,x));</span><br><span class="line">    while(q.size())&#123;</span><br><span class="line">        int x=q.top().second,w = -q.top().first;</span><br><span class="line">        //printf(&quot;%d %d\n&quot;,x,w);</span><br><span class="line">        q.pop();</span><br><span class="line">        int cnt;</span><br><span class="line">        if(w&gt;dis2[x]) continue;</span><br><span class="line">        if(w == dis[x]) cnt=num1[x];</span><br><span class="line">        else if(w==dis2[x]) cnt=num2[x];</span><br><span class="line">        for(int i=head[x];~i;i=ed[i].pre)&#123;</span><br><span class="line">            int v = ed[i].id,s=ed[i].w;</span><br><span class="line">            int cost = w + s,d=cnt;</span><br><span class="line">            if(dis[v]&gt;cost)&#123;</span><br><span class="line">                dis2[v]=dis[v];</span><br><span class="line">                num2[v]=num1[v];</span><br><span class="line">                dis[v]=cost;</span><br><span class="line">                num1[v]=d;</span><br><span class="line">                //swap(dis[v],cost);</span><br><span class="line">                //swap(d,num1[v]);</span><br><span class="line">                q.push(make_pair(-dis[v],v));</span><br><span class="line">                //printf(&quot;%d %d sss\n&quot;,v,num1[v]);</span><br><span class="line">            &#125;</span><br><span class="line">            else if(dis[v]==cost)&#123;</span><br><span class="line">                num1[v]+=d;</span><br><span class="line">            &#125;</span><br><span class="line">            else if(dis2[v]==cost)&#123;</span><br><span class="line">                num2[v]+=d;</span><br><span class="line">            &#125;</span><br><span class="line">            else if(dis2[v]&gt;cost)&#123;</span><br><span class="line">                dis2[v]=cost;</span><br><span class="line">                num2[v]=d;</span><br><span class="line">                q.push(make_pair(-cost,v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k,t;</span><br><span class="line">    while(scanf(&quot;%d&quot;,&amp;t)==1)&#123;</span><br><span class="line">        while(t--)&#123;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;n,&amp;m);</span><br><span class="line">            init();</span><br><span class="line">            for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">                int u,v,w;</span><br><span class="line">                scanf(&quot;%d %d %d&quot;,&amp;u,&amp;v,&amp;w);</span><br><span class="line">                add(u,v,w);</span><br><span class="line">            &#125;</span><br><span class="line">            int p,q;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;p,&amp;q);</span><br><span class="line">            dij(p);</span><br><span class="line">            int ans=num1[q];</span><br><span class="line">            if(dis[q]==dis2[q]-1) ans+=num2[q];</span><br><span class="line">            printf(&quot;%d\n&quot;,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://poj.org/problem?id=3463&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目
      
    
    </summary>
    
    
      <category term="图论" scheme="https://www.dream-ak.top/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>poj3694-tarjan</title>
    <link href="https://www.dream-ak.top/2020/02/29/poj3694-tarjan/"/>
    <id>https://www.dream-ak.top/2020/02/29/poj3694-tarjan/</id>
    <published>2020-02-29T09:28:47.000Z</published>
    <updated>2020-02-29T09:53:47.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="http://poj.org/problem?id=3694" target="_blank" rel="noopener">题目链接</a></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个连通图，问每一次加边以后还有多少条桥！</p><h2 id="思想和解法"><a href="#思想和解法" class="headerlink" title="思想和解法"></a>思想和解法</h2><p>很明显把连通图缩点成$DAG$图，(对DAG图操作)然后每一次加边后$DAG$图里强连通分量继续缩点！桥的数量就是加边前的数量减去缩掉的边的数量。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="问题1：缩点"><a href="#问题1：缩点" class="headerlink" title="问题1：缩点"></a>问题1：缩点</h3><p>想法很简单，操作异想天开，如果用染色法对图进行缩点，最坏情况就是一棵N个结点的树，N-1条边每一次添加一条邻边，复杂度卡到$(1+n)* \frac{n}{2}$。所以采用并查集动态缩点！</p><h3 id="问题2：路径"><a href="#问题2：路径" class="headerlink" title="问题2：路径"></a>问题2：路径</h3><p>路径寻找也是一个问题，我们已经$tarjan$缩过一次点了，我们接下来是新建一个图继续跑$tarjan$离线$LCA$吗？<br>注意对于tarjan的LCA算法精髓在于哪里？他那么写的原因是经过了tarjan算法以后每个节点其实都有一个时间戳！而两个点$<u,v>$之间的$LCA$他们有一个共同的特点，那就是:</u,v></p><blockquote><p>$LCA$的左子树上的所有点的时间戳都小于右子树的时间戳！</p></blockquote><p>根据这个特点我们可以直接用记录当前点的父节点然后爬到$LCA$上去。<br>看下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void lca(int x,int y)&#123;</span><br><span class="line">    if(dfn[x]&lt;dfn[y]) swap(x,y);</span><br><span class="line">    if(get(x)==get(y)) return ;</span><br><span class="line">    while(dfn[x]&gt;dfn[y])&#123;</span><br><span class="line">        if(join(x,pre[x])) edge--;//缩点成功则桥减一</span><br><span class="line">        x=get(pre[x]);//爬向缩点后的父节点</span><br><span class="line">    &#125;</span><br><span class="line">    while(x!=y)&#123;</span><br><span class="line">        if(join(y,pre[y])) edge--;//缩点成功则桥减一</span><br><span class="line">        y=get(pre[y]);//爬向缩点后的父节点</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>282ms<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 5e5+5;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id;</span><br><span class="line">&#125;ed[N];</span><br><span class="line">int head[N],pre[N],fa[N],dfn[N],low[N],sta[N];</span><br><span class="line">int tot=0,edge=0,tim=0;</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">    ed[++tot].pre=head[u];</span><br><span class="line">    ed[tot].id=v;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">int vis[N];</span><br><span class="line">int get(int x)&#123;</span><br><span class="line">    if(fa[x]!=x) return fa[x]=get(fa[x]);</span><br><span class="line">    else return x;</span><br><span class="line">&#125;</span><br><span class="line">bool join(int x,int y</span><br><span class="line">)&#123;</span><br><span class="line">    int p=get(x),q=get(y);</span><br><span class="line">    if(p!=q)&#123;</span><br><span class="line">        fa[p]=q;//指向父节点</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">int num=1;</span><br><span class="line">void tarjan(int x,int fath)&#123;</span><br><span class="line">    low[x]=dfn[x]=++tim;</span><br><span class="line">    vis[x]=1;</span><br><span class="line">    int flag=1;</span><br><span class="line">    for(int i=head[x];~i;i=ed[i].pre)&#123;</span><br><span class="line">        int v=ed[i].id;</span><br><span class="line">        if(v==fath&amp;&amp;flag) &#123;flag=0;continue;&#125;</span><br><span class="line">        if(!vis[v])&#123;</span><br><span class="line">            pre[v]=x;</span><br><span class="line">            tarjan(v,x);</span><br><span class="line">            low[x]=min(low[v],low[x]);</span><br><span class="line">            if(low[v]&gt;dfn[x])&#123;</span><br><span class="line">                edge++;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                join(v,x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            low[x]=min(low[x],dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void lca(int x,int y)&#123;</span><br><span class="line">    if(dfn[x]&lt;dfn[y]) swap(x,y);</span><br><span class="line">    if(get(x)==get(y)) return ;</span><br><span class="line">    while(dfn[x]&gt;dfn[y])&#123;</span><br><span class="line">        if(join(x,pre[x])) edge--;</span><br><span class="line">        x=get(pre[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    while(x!=y)&#123;</span><br><span class="line">        if(join(y,pre[y])) edge--;</span><br><span class="line">        y=get(pre[y]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    while(scanf(&quot;%d %d&quot;,&amp;n,&amp;m)&amp;&amp;(n||m))&#123;</span><br><span class="line">        for(i=1;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">        for(i=1;i&lt;=n;i++) head[i]=-1,vis[i]=0,dfn[i]=0;</span><br><span class="line">        tim=edge=tot=0;</span><br><span class="line">        int u,v;</span><br><span class="line">        for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;u,&amp;v);</span><br><span class="line">            add(u,v);</span><br><span class="line">            add(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">        tarjan(1,1);</span><br><span class="line">        pre[1]=1;</span><br><span class="line">        int q;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;q);</span><br><span class="line">        printf(&quot;Case %d:\n&quot;,num++);</span><br><span class="line">        for(i=1;i&lt;=q;i++)&#123;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;u,&amp;v);</span><br><span class="line">            lca(u,v);</span><br><span class="line">            printf(&quot;%d\n&quot;,edge);</span><br><span class="line">        &#125;</span><br><span class="line">        puts(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://poj.org/problem?id=3694&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目
      
    
    </summary>
    
    
      <category term="图论" scheme="https://www.dream-ak.top/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>poj2763,tarjan</title>
    <link href="https://www.dream-ak.top/2020/02/29/poj2763-tarjan/"/>
    <id>https://www.dream-ak.top/2020/02/29/poj2763-tarjan/</id>
    <published>2020-02-29T08:44:56.000Z</published>
    <updated>2020-02-29T09:26:55.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="http://poj.org/problem?id=3728" target="_blank" rel="noopener">题目链接</a></h1><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>给定一个N个节点的树，1&lt;=N&lt;=50000 每个节点都有一个权值，代表商品在这个节点的价格。商人从某个节点a移动到节点b，且只能购买并出售一次商品，问最多可以产生多大的利润。Q次询问<a id="more"></a></p><h2 id="思想与解法"><a href="#思想与解法" class="headerlink" title="思想与解法"></a>思想与解法</h2><ol><li>首先最暴力的想法就是去找到路径然后判断，找路径的办法就是先找到$LCA$然后暴力就完事了，很明显时间复杂度$O(N*Q)$绝对$tle$</li><li>我们思考得到最大利润的方式，首先对于$u \rightarrow v$可以分解为$u \rightarrow LCA \rightarrow v$<br>那么最大利润将会如下三条路径中产生：<br>1.$u \rightarrow LCA$<br>2.$LCA \rightarrow v$<br>3.$u \rightarrow v$<br>这时候可能有很多人会想为什么要把路径3分为路径1与路径2，明显路径3包含1和2啊。<blockquote><p>在这里解释一下，如果只观察路径3的话，那么答案就是路径上最大的权值减最小权值，但是，无法记录访问顺序！但是这样分开以后以LCA为参考，获得每个点到$LCA$路径的最大利润，如果$u \rightarrow v$的最大利润不在点到$LCA$的路径而是穿过路径的时，那么商人一定在$u \rightarrow LCA$进货，在$LCA \rightarrow v$出售。直接记录两个路径中的最大最小值然后计算就好了</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>根据分析我们需要四个数组！一个储存路径1的最大利润$up$，一个储存路径2的最大利润$down$，第三个储存路径的最大值$ma$，第四个存储最小值$mi$。然后并查集，把每一个点并到$LCA$上并更新所有数据。最后统计答案，据说卡vector。。<br>并查集的合并操作</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int get(int x)&#123;</span><br><span class="line">    if(fa[x]==x) return x;</span><br><span class="line">    int root = fa[x];</span><br><span class="line">    fa[x]=get(fa[x]);</span><br><span class="line">    up[x]=max(up[x],max(up[root],ma[root]-mi[x]));</span><br><span class="line">    down[x]=max(down[x],max(down[root],ma[x]-mi[root]));</span><br><span class="line">    mi[x]=min(mi[x],mi[root]);</span><br><span class="line">    ma[x]=max(ma[x],ma[root]);</span><br><span class="line">    return fa[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>卡vector我们就是用链式前向星寸询问，继而离线！$add1$函数<br>由于我们要在合并完以后才能得到答案，所以我的办法是每一次计算完$LCA$，用链式前向星保存在$LCA上(add2)！$访问到时在计算ans。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 3e5+5;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id;</span><br><span class="line">&#125;ed[N],ed1[N];</span><br><span class="line">int head[N],head1[N],tot,tot1,ans[N],fa[N],ma[N],mi[N],vis[N],up[N],down[N],head2[N],tot2=1;</span><br><span class="line">struct NUM&#123;</span><br><span class="line">    int x,y,id,pre;</span><br><span class="line">&#125;num[N];</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">    ed[++tot].pre=head[u];</span><br><span class="line">    ed[tot].id=v;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">void add1(int u,int v)&#123;</span><br><span class="line">    ed1[++tot1].pre=head1[u];</span><br><span class="line">    ed1[tot1].id=v;</span><br><span class="line">    head1[u]=tot1;</span><br><span class="line">&#125;</span><br><span class="line">void add2(int u,int x,int y,int id)&#123;</span><br><span class="line">    num[++tot2].id=id;</span><br><span class="line">    num[tot2].x=x,num[tot2].y=y;</span><br><span class="line">    num[tot2].pre=head2[u];</span><br><span class="line">    head2[u]=tot2;</span><br><span class="line">&#125;</span><br><span class="line">int get(int x)&#123;</span><br><span class="line">    if(fa[x]==x) return x;</span><br><span class="line">    int root = fa[x];</span><br><span class="line">    fa[x]=get(fa[x]);</span><br><span class="line">    up[x]=max(up[x],max(up[root],ma[root]-mi[x]));</span><br><span class="line">    down[x]=max(down[x],max(down[root],ma[x]-mi[root]));</span><br><span class="line">    mi[x]=min(mi[x],mi[root]);</span><br><span class="line">    ma[x]=max(ma[x],ma[root]);</span><br><span class="line">    return fa[x];</span><br><span class="line">&#125;</span><br><span class="line">void LCA(int x)&#123;</span><br><span class="line">    vis[x]=1;</span><br><span class="line">    int i;</span><br><span class="line">    for(i=head[x];~i;i=ed[i].pre)&#123;</span><br><span class="line">        int v=ed[i].id;</span><br><span class="line">        if(vis[v]) continue;</span><br><span class="line">        else &#123;</span><br><span class="line">            LCA(v);</span><br><span class="line">            fa[v]=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=head1[x];~i;i=ed1[i].pre)&#123;</span><br><span class="line">        int v=ed1[i].id;</span><br><span class="line">        if(vis[v]) &#123;</span><br><span class="line">            add2(get(v),x,v,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=head2[x];~i;i=num[i].pre)&#123;</span><br><span class="line">        int u = num[i].x,v=num[i].y,d=num[i].id;</span><br><span class="line">        get(u),get(v);</span><br><span class="line">        if(d%2)&#123;</span><br><span class="line">            ans[d]=ans[d^1]=max(up[v],max(down[u],ma[u]-mi[v]));</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            ans[d]=ans[d^1]=max(down[v],max(up[u],ma[v]-mi[u]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void init()&#123;</span><br><span class="line">    memset(head,-1,sizeof head);</span><br><span class="line">    memset(head1,-1,sizeof head1);</span><br><span class="line">    memset(head2,-1,sizeof head2);</span><br><span class="line">    memset(vis,0,sizeof vis);</span><br><span class="line">    tot=tot1=tot2=1;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    while(scanf(&quot;%d&quot;,&amp;n)==1)&#123;</span><br><span class="line">        int u,v,w;</span><br><span class="line">        init();</span><br><span class="line">        for(i=1;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">        for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;w);</span><br><span class="line">            down[i]=up[i]=0;</span><br><span class="line">            ma[i]=mi[i]=w;</span><br><span class="line">        &#125;</span><br><span class="line">        for(i=1;i&lt;n;i++)&#123;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;u,&amp;v);</span><br><span class="line">            add(u,v);</span><br><span class="line">            add(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">        int q;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;q);</span><br><span class="line">        for(i=1;i&lt;=q;i++)&#123;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;u,&amp;v);</span><br><span class="line">            add1(u,v);</span><br><span class="line">            add1(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">        LCA(1);</span><br><span class="line">        for(i=2;i&lt;=2*q;i+=2)&#123;</span><br><span class="line">            printf(&quot;%d\n&quot;,ans[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完美的考察对于并查集，$tarjan$的理解，对于扩展域的使用在这里像极了$dp$，也让我发现自己对于tarjan的不足。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://poj.org/problem?id=3728&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;题意：&quot;&gt;&lt;a href=&quot;#题意：&quot; class=&quot;headerlink&quot; title=&quot;题意：&quot;&gt;&lt;/a&gt;题意：&lt;/h2&gt;&lt;p&gt;给定一个N个节点的树，1&amp;lt;=N&amp;lt;=50000 每个节点都有一个权值，代表商品在这个节点的价格。商人从某个节点a移动到节点b，且只能购买并出售一次商品，问最多可以产生多大的利润。Q次询问&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="https://www.dream-ak.top/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>强连通分量</title>
    <link href="https://www.dream-ak.top/2020/02/28/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    <id>https://www.dream-ak.top/2020/02/28/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/</id>
    <published>2020-02-28T15:36:16.000Z</published>
    <updated>2020-02-28T15:59:21.225Z</updated>
    
    <content type="html"><![CDATA[<p>强连通分量一般用来对于整个图进行缩点，把一个有向图变成DAG图，这是强连通的一般用途，问题一般是询问要加多少条边能使整个图变成强连通图。<a id="more"></a></p><h1 id="tarjan算法"><a href="#tarjan算法" class="headerlink" title="tarjan算法"></a>tarjan算法</h1><p>这个算法十分强大，广泛应用于$LCA$，强连通缩点等问题，他的主要思想是给每一个点打上一个时间戳，然后$dfs$去寻找每一个点$u$所能回到的最小时间戳$v$，在这个区间$<u,v>$内的点是一个连通分量，然后进行缩点，这里的缩点有两种方式。</u,v></p><ol><li>通过数组映射缩点，同一个连通分量映射同一个值</li><li>并查集缩点，同一个连通分量指向同一个根</li></ol><h1 id="练习题目"><a href="#练习题目" class="headerlink" title="练习题目"></a>练习题目</h1><p>hdu1239<br>求加多少条边使整个图变为强连通图</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>首先缩点，把图变成DAG图以后去看如何加最少的边使图变为强连通！<br>很明显，对于入度为0的点必须加一条边使他能到达，出度为0的边也要加边使得到了他的边能回去，要加的最少的边就是$max(入度为0,出度为0)$；</p><h2 id="题解代码"><a href="#题解代码" class="headerlink" title="题解代码"></a>题解代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N =2e5+5;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id;</span><br><span class="line">&#125;ed[N*2];</span><br><span class="line">int head[N],tot=1;</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">    ed[++tot].pre=head[u];</span><br><span class="line">    ed[tot].id=v;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">int dfn[N],low[N],vis[N],dfp,sta[N],cnt=0,siz=0,col[N],in[N],out[N];</span><br><span class="line">void tarjan(int x)&#123;</span><br><span class="line">    dfn[x]=++dfp;</span><br><span class="line">    low[x]=dfp;</span><br><span class="line">    vis[x]=1;</span><br><span class="line">    sta[++cnt]=x;</span><br><span class="line">    for(int i=head[x];i;i=ed[i].pre)&#123;</span><br><span class="line">        int u=ed[i].id;</span><br><span class="line">        if(!dfn[u])&#123;</span><br><span class="line">            tarjan(u);</span><br><span class="line">            low[x]=min(low[u],low[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(vis[u])&#123;</span><br><span class="line">            low[x]=min(low[x],dfn[u]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(dfn[x]==low[x])&#123;</span><br><span class="line">        col[x]=++siz;</span><br><span class="line">        vis[x]=0;</span><br><span class="line">        while(sta[cnt]!=x)&#123;</span><br><span class="line">            vis[sta[cnt]]=0;</span><br><span class="line">            col[sta[cnt--]]=siz;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k,t;</span><br><span class="line">    while(scanf(&quot;%d&quot;,&amp;t)==1)&#123;</span><br><span class="line">        while(t--)&#123;</span><br><span class="line">            tot=1;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;n,&amp;m);</span><br><span class="line">            memset(head,0,sizeof head);</span><br><span class="line">            memset(dfn,0,sizeof dfn);</span><br><span class="line">            memset(in,0,sizeof in);</span><br><span class="line">            memset(out,0,sizeof out);</span><br><span class="line">            memset(low,0,sizeof low);</span><br><span class="line">            memset(col,0,sizeof col);</span><br><span class="line">            for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">                int u,v;</span><br><span class="line">                scanf(&quot;%d %d&quot;,&amp;u,&amp;v);</span><br><span class="line">                add(u,v);</span><br><span class="line">            &#125;</span><br><span class="line">            dfp=0,cnt=0,siz=0;</span><br><span class="line">            for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">                if(dfn[i]==0)&#123;</span><br><span class="line">                    tarjan(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">                for(j=head[i];j;j=ed[j].pre)&#123;</span><br><span class="line">                    if(col[i]!=col[ed[j].id])&#123;</span><br><span class="line">                        out[col[i]]++;</span><br><span class="line">                        in[col[ed[j].id]]++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            int ans1=0,ans2=0;</span><br><span class="line">            for(i=1;i&lt;=siz;i++)&#123;</span><br><span class="line">                if(in[i]==0) ans1++;</span><br><span class="line">                if(out[i]==0) ans2++;</span><br><span class="line">            &#125;</span><br><span class="line">            printf(&quot;%d\n&quot;,max(ans1,ans2)==1?0:max(ans1,ans2));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于$tarjan$应该灵活使用并查集对其进行各种点集的合并。<br>对于$DAG$来说我们要注意的是要实现强连通只需要计算$max$(出度0，入度0)；<br>关于tarjan的题目之后还会找几个好题再写几次。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;强连通分量一般用来对于整个图进行缩点，把一个有向图变成DAG图，这是强连通的一般用途，问题一般是询问要加多少条边能使整个图变成强连通图。&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="https://www.dream-ak.top/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>分层图和次短路</title>
    <link href="https://www.dream-ak.top/2020/02/16/%E5%88%86%E5%B1%82%E5%9B%BE%E5%92%8C%E6%AC%A1%E7%9F%AD%E8%B7%AF/"/>
    <id>https://www.dream-ak.top/2020/02/16/%E5%88%86%E5%B1%82%E5%9B%BE%E5%92%8C%E6%AC%A1%E7%9F%AD%E8%B7%AF/</id>
    <published>2020-02-16T14:34:03.000Z</published>
    <updated>2020-02-22T13:30:33.690Z</updated>
    
    <content type="html"><![CDATA[<p>搞了这么久，我终于感觉最短路到头了，快要结束了，来总结一下最短路。<br><a id="more"></a></p><h1 id="分层图"><a href="#分层图" class="headerlink" title="分层图"></a>分层图</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>分层图是一个最短路的应用，他一般用来计算在一个连通图里面在可以省K条路的情况下，我们能从S到T的最短距离！<br>做法有两种：</p><ol><li>dp</li><li>建分层图</li></ol><p>在这里我只介绍做法2</p><h2 id="建图"><a href="#建图" class="headerlink" title="建图"></a>建图</h2><p>我们建立k层图，两层图之间的边免费，图里面的连通情况一致。<br>解释一下：<br>对于k层图，如果由S走到T的话，不管是到达哪一个点，他最多经过K次免费！在这个图上面跑迪杰斯特拉，最后找最小值就好了</p><p>讲的抽象，在这里我推荐<a href="https://blog.csdn.net/qq_40736036/article/details/85041838" target="_blank" rel="noopener">推荐一篇博客</a></p><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><p>空间占用太大，跑了两个题目差不多都是$40M$左右，dp版本会低一些，但时间复杂度不变。<br>计算边的数组大小：</p><blockquote><p>一条边要往连向下一层图同时还要连向本层图，所以一条边实际上要有$(k*2)$条边</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://www.luogu.org/problemnew/show/P4568" target="_blank" rel="noopener">题目地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int N = 5e5+5;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id,w;</span><br><span class="line">&#125;ed[N*10];</span><br><span class="line">int head[N],tot=1,dis[N];</span><br><span class="line">bool vis[N];</span><br><span class="line">int s,t;</span><br><span class="line">priority_queue&lt;pair&lt;int,int&gt; &gt;q;</span><br><span class="line">void add(int u,int v,int w)&#123;</span><br><span class="line">    ed[++tot].pre=head[u];</span><br><span class="line">    ed[tot].id=v;</span><br><span class="line">    ed[tot].w=w;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">void dij()&#123;</span><br><span class="line">    memset(dis,0x3f,sizeof dis);</span><br><span class="line">    memset(vis,0,sizeof vis);</span><br><span class="line">    dis[s]=0;</span><br><span class="line">    q.push(make_pair(0,s));</span><br><span class="line">    while(q.size())&#123;</span><br><span class="line">        int u=q.top().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        if(vis[u]) continue;</span><br><span class="line">        vis[u]=1;</span><br><span class="line">        //printf(&quot;%dsss\n&quot;,u);</span><br><span class="line">        for(int i=head[u];i;i=ed[i].pre)&#123;</span><br><span class="line">            int v=ed[i].id,w=ed[i].w;</span><br><span class="line">            //printf(&quot;%d %d\n&quot;,u,v);</span><br><span class="line">            if(dis[v]&gt;dis[u]+w)&#123;</span><br><span class="line">                dis[v]=dis[u]+w;</span><br><span class="line">                q.push(make_pair(-dis[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    while(scanf(&quot;%d %d %d&quot;,&amp;n,&amp;m,&amp;k)==3)&#123;</span><br><span class="line">        s=1,t=n;</span><br><span class="line">        for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">            int u,v,w;</span><br><span class="line">            scanf(&quot;%d %d %d&quot;,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            add(u,v,w);</span><br><span class="line">            add(v,u,w);</span><br><span class="line">            for(j=1;j&lt;=k;j++)&#123;</span><br><span class="line">                add(u+j*n,v+j*n,w);</span><br><span class="line">                add(v+j*n,u+j*n,w);</span><br><span class="line">                add(u+j*n-n,v+j*n,0);</span><br><span class="line">                add(v+j*n-n,u+j*n,0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dij();</span><br><span class="line">        int ans=2e9+9;</span><br><span class="line">        for(i=0;i&lt;=k;i++)&#123;</span><br><span class="line">            ans=min(ans,dis[t+i*n]);</span><br><span class="line">            //printf(&quot;%d\n&quot;,dis[t+i*n]);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="次短路"><a href="#次短路" class="headerlink" title="次短路"></a>次短路</h1><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><ol><li>通过最短路来求</li><li>通过K短路来求</li></ol><p>在这里我只讲通过最短路来求得解法<br>我们得到次短路的过程分为两种</p><ol><li>最短路更新得来得来,在更新dis[u]时，原来的$dis[u]$将会是次短路</li><li>次短路自身延申得来,在次短路$dis2[u]+min(u \rightarrow v)$,借此更新最短路</li></ol><p>对于这两种情况来看，1与最短路有关，2的更新方式也与迪杰斯特拉很像！所以我们这里就直接跑最短路！用优先队列维护两条路径，最短路和次短路，每一次取里面最短的。<strong>无论是最短路上的点，还是次短路上的点，因为次短路影响不了最短路，而最短路影响次短路本身就是需要的</strong></p><h2 id="题目：POJ3255"><a href="#题目：POJ3255" class="headerlink" title="题目：POJ3255"></a>题目：POJ3255</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e5+5;</span><br><span class="line">struct ED</span><br><span class="line">&#123;</span><br><span class="line">    int pre,id,w;</span><br><span class="line">&#125;ed[N];</span><br><span class="line">int head[N],tot=1,dis[N],dis2[N],n,m;</span><br><span class="line">priority_queue&lt;pair&lt;int,int&gt; &gt; q;</span><br><span class="line">void add(int u,int v,int w)&#123;</span><br><span class="line">    ed[++tot].pre=head[u];</span><br><span class="line">    ed[tot].id=v;</span><br><span class="line">    ed[tot].w=w;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">void dij(int x)&#123;</span><br><span class="line">    memset(dis,0x3f,sizeof dis);</span><br><span class="line">    memset(dis2,0x3f,sizeof dis2);</span><br><span class="line">    dis[x]=0;</span><br><span class="line">    q.push(make_pair(-dis[x],x));</span><br><span class="line">    while(q.size())&#123;</span><br><span class="line">        int u=q.top().second,w=-q.top().first;</span><br><span class="line">        q.pop();</span><br><span class="line">        if(dis2[u]&lt;w) continue;//这里是剪枝，看注释一。</span><br><span class="line">        for(int i=head[u];i;i=ed[i].pre)&#123;</span><br><span class="line">            int v=ed[i].id,d=w+ed[i].w;</span><br><span class="line">            if(d&lt;dis[v])&#123;</span><br><span class="line">                swap(d,dis[v]);//这里只能是交换，因为dis[v]还要给次短路用</span><br><span class="line">                q.push(make_pair(-dis[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">            if(d&lt;dis2[v]&amp;&amp;d&gt;dis[v])&#123;</span><br><span class="line">                dis2[v]=d;</span><br><span class="line">                q.push(make_pair(-dis2[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;,dis2[n]);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int i,j,k;</span><br><span class="line">    while(scanf(&quot;%d %d&quot;,&amp;n,&amp;m)==2)&#123;</span><br><span class="line">        memset(head,0,sizeof head);</span><br><span class="line">        for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">            int u,v,w;</span><br><span class="line">            scanf(&quot;%d %d %d&quot;,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            add(u,v,w);</span><br><span class="line">            add(v,u,w);</span><br><span class="line">        &#125;</span><br><span class="line">        dij(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注释一：因为对于次短路的更新，我们会在优先队列里面增加一些无用边，就像最短路时的vis数组一样的性质，把那些多余的边全部去掉，而这里只需要路径长度小于等于次短路的，所以大于的直接continue！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搞了这么久，我终于感觉最短路到头了，快要结束了，来总结一下最短路。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="https://www.dream-ak.top/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>双调欧几里得旅行商问题</title>
    <link href="https://www.dream-ak.top/2020/02/11/%E5%8F%8C%E8%B0%83%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E6%97%85%E8%A1%8C%E5%95%86%E9%97%AE%E9%A2%98/"/>
    <id>https://www.dream-ak.top/2020/02/11/%E5%8F%8C%E8%B0%83%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E6%97%85%E8%A1%8C%E5%95%86%E9%97%AE%E9%A2%98/</id>
    <published>2020-02-11T15:37:49.000Z</published>
    <updated>2020-02-12T05:31:41.933Z</updated>
    
    <content type="html"><![CDATA[<p>刷最短路刷着刷着怎么老遇神题，太玄学了，tcl<a id="more"></a></p><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2224" target="_blank" rel="noopener">题目链接</a></h2><p>题意，给予n个点的坐标，要求从第1个点走到第n个点然后再走回来且去的时候点的序号单调递增，回来的时候单调递减！</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><del>说句实在的我第一眼居然是弗洛伊德然后掉坑底怕都没爬出来</del>。<br>正解是$dp$,怎么$dp$呢</p><ol><li>我们假设$dp[i][j]$中$i$为从第i个点回到1号点，$j$为从1号点回到$j$号点，而$dp[i][j]$则是这个过程的最短距离。</li><li>按着这个定义来看，$dp[i][j]=dp[j][i]$。解释一下：我们对于这个问题来说$i \rightarrow 1 \rightarrow j \Leftrightarrow j \rightarrow 1 \rightarrow i$</li><li>那么首先假设$i&lt;j$的dp方程：<blockquote><ol><li>$i=j$  时则有$dp[i][j]=dp[i-1][j]+dis(i-1,j)$<br>解释：<script type="math/tex">i \rightarrow 1 \rightarrow j \Leftrightarrow i \rightarrow (i-1) \rightarrow 1 \rightarrow j</script></li><li>$i+1 &lt; j $时，则有$dp[i][j]=dp[i][j-1]$<br>解释：<script type="math/tex">i < j(i只能连小于i的边) \Rightarrow (j-1) \rightarrow j</script></li><li>$i+1=j$则$dp[i][j]=min(dp[i][j],dp[k][j-1]+dis(k,j))(k=1,2···,j-2 $<br>解释：因为这个时候就是相当于在路径$k \rightarrow 1 \rightarrow i$中加一条边$j\rightarrow k$则会得到$j\rightarrow 1 \rightarrow i$<br>且$k!=j-1$因为$(j-1) \rightarrow 1 \rightarrow (j-1) \rightarrow j$一定不会是最短路径，因为$j-1$点重复一次的话，假设是$x \rightarrow j-1 \rightarrow j$的长度按照三角形边长来看会发现$x\rightarrow j$的边长一定小于等于前一条边。</li></ol></blockquote></li></ol><p>由上三种状态可以发现我们要得到$dp[i][j]$首先就要知道$dp[i][j-1]$和$dp[i-1][j]$那么我们可以先对$j$进行遍历得到$dp[i][j-1]$，然后再从小到大遍历$i$就会得到$dp[i][j]$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 300;</span><br><span class="line">double dp[N][N];</span><br><span class="line">struct ed&#123;</span><br><span class="line">    double x,y;</span><br><span class="line">&#125;a[N];</span><br><span class="line"></span><br><span class="line">double dis(int i,int j)&#123;</span><br><span class="line">    return sqrt((a[i].x-a[j].x)*(a[i].x-a[j].x)+(a[i].y-a[j].y)*(a[i].y-a[j].y));</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    while (scanf(&quot;%d&quot;,&amp;n)==1)</span><br><span class="line">    &#123;</span><br><span class="line">        for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            scanf(&quot;%lf %lf&quot;,&amp;a[i].x,&amp;a[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[1][2]=dis(1,2);</span><br><span class="line">        for(j=3;j&lt;=n;j++)&#123;</span><br><span class="line">            for(i=1;i&lt;j-1;i++) dp[i][j]=dp[i][j-1]+dis(j,j-1);</span><br><span class="line">            dp[j-1][j]=2e9+9;</span><br><span class="line">            for(i=1;i&lt;j-1;i++) dp[j-1][j]=min(dp[j-1][j],dp[i][j-1]+dis(i,j));</span><br><span class="line">            dp[j][j]=dp[j-1][j]+dis(j-1,j);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%.2lf\n&quot;,dp[n][n]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刷最短路刷着刷着怎么老遇神题，太玄学了，tcl&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="https://www.dream-ak.top/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>差分约束系统复习</title>
    <link href="https://www.dream-ak.top/2020/02/09/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/"/>
    <id>https://www.dream-ak.top/2020/02/09/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/</id>
    <published>2020-02-09T15:08:02.000Z</published>
    <updated>2020-02-10T03:34:32.817Z</updated>
    
    <content type="html"><![CDATA[<ol><li>spfa对于模拟队列时，队列数组要开的尽量大！</li><li>spfa对于记录一个点的松弛次数应该是入队次数，而不是松弛次数。<a id="more"></a>来个板子：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">bool spfa(int t)&#123;</span><br><span class="line">    int l=1,r=0;</span><br><span class="line">    que[++r]=0;</span><br><span class="line">    dis[0]=0;</span><br><span class="line">    while(l&lt;=r)&#123;</span><br><span class="line">        int u=que[l++];</span><br><span class="line">        int i;</span><br><span class="line">        vis[u]=0;</span><br><span class="line">        for(i=head[u];~i;i=ed[i].pre)&#123;</span><br><span class="line">            int v=ed[i].id,w=ed[i].w;</span><br><span class="line">            if(dis[u]+w&gt;=dis[v])&#123;</span><br><span class="line">                dis[v]=dis[u]+w;</span><br><span class="line">                if(num[v]&gt;t) return false;</span><br><span class="line">                if(vis[v]==0) que[++r]=v,vis[v]=1,num[v]++;//(num在这里重点注意);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;spfa对于模拟队列时，队列数组要开的尽量大！&lt;/li&gt;
&lt;li&gt;spfa对于记录一个点的松弛次数应该是入队次数，而不是松弛次数。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="图论" scheme="https://www.dream-ak.top/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>扩展域</title>
    <link href="https://www.dream-ak.top/2020/02/09/%E6%89%A9%E5%B1%95%E5%9F%9F/"/>
    <id>https://www.dream-ak.top/2020/02/09/%E6%89%A9%E5%B1%95%E5%9F%9F/</id>
    <published>2020-02-09T11:07:38.000Z</published>
    <updated>2020-02-10T03:34:07.113Z</updated>
    
    <content type="html"><![CDATA[<p>看到学弟们都不会，那我就给个题解吧，免得一直不会，留漏洞！<br><a id="more"></a></p><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="http://poj.org/problem?id=1733" target="_blank" rel="noopener">题目链接</a></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>题意明显就是给$[l,r]$中有奇数个1还是偶数个1，然后看它第一次在哪里自相矛盾了，输出第一次自相矛盾的位置！</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><strong>首先离散化</strong>这个我就不说了，你们百度一下什么原理。<br>假设$[l,r]$中奇数个1表示为1，偶数个1表示为0。那么我们每一次合并$(l-1,r]$这个区间，这样就可以把所有数据都联系起来。<br>合并并查集：<br>如何合并？我们<br>那么我们就可以通过</p><ol><li>$x \rightarrow root1$(根节点)的值$d[x]$</li><li>$y \rightarrow root2$(根节点)的值$d[y]$</li></ol><p>得出$root1 \rightarrow root2$的值。<br>假设$root1$和$root2$相同则判断一下去看这组数据是否正确。<br>判断方法：</p><blockquote><p>$x \rightarrow root1 = d[x]$<br>  $y \rightarrow root1 = d[y]$<br>  $x \rightarrow y = x \rightarrow root1 \rightarrow y = d[x]$^$d[y]$</p></blockquote><p>不同则是：</p><blockquote><p>$root1 \rightarrow root2$的值是 $d[x]$ ^ $d[y]$ ^ $n$（$n$为$x \rightarrow y$）这个就会得到关系的值</p><p>解释<br>$x \rightarrow y = n$<br>$x \rightarrow root1 = d[x]$<br>$y \rightarrow root2 = d[y]$<br>则$root1 \rightarrow root2 = root1 \rightarrow x \rightarrow y\rightarrow root2 = d[x]$ ^ $d[y]$ ^ $n$</p></blockquote><p>怎么压缩路径</p><blockquote><p>$x \rightarrow y = d[x]$<br>$y \rightarrow root = d[y]$<br>那么 $x \rightarrow root = d[x]$^$d[y]$</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 5e3+5;</span><br><span class="line">int fa[2*N],d[2*N];</span><br><span class="line">int get(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(fa[x]==x)</span><br><span class="line">        return x;</span><br><span class="line">    int root = get(fa[x]);</span><br><span class="line">    d[x]^=d[fa[x]];</span><br><span class="line">    return fa[x] = root;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    int l[N],r[N],c[N],a[N*2],b[N*2];</span><br><span class="line">    char s[5];</span><br><span class="line">    int cnt=0;</span><br><span class="line">    for(i=1; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d %d %s&quot;,&amp;l[i],&amp;r[i],s);</span><br><span class="line">        if(s[0]==&apos;o&apos;)</span><br><span class="line">            c[i]=1;</span><br><span class="line">        else</span><br><span class="line">            c[i]=0;</span><br><span class="line">        a[++cnt]=--l[i],a[++cnt]=r[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a+1,a+1+cnt);</span><br><span class="line">    int cnt1=0;</span><br><span class="line">    for(i=1; i&lt;=cnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(i==1||a[i]!=a[i-1])</span><br><span class="line">            b[++cnt1]=a[i];</span><br><span class="line">    &#125;//离散化操作，我就不说了</span><br><span class="line">    for(i=0; i&lt;=cnt1; i++)</span><br><span class="line">        fa[i]=i,d[i]=0;//初始化操作</span><br><span class="line">    for(i=1; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int l1=lower_bound(b+1,b+1+cnt1,l[i])-b;</span><br><span class="line">        int r1=lower_bound(b+1,b+1+cnt1,r[i])-b;</span><br><span class="line">        int fl=get(l1),fr=get(r1);</span><br><span class="line">        if(fl!=fr)//不在同一个集合，不会冲突</span><br><span class="line">        &#123;</span><br><span class="line">            fa[fr]=fl;</span><br><span class="line">            d[fr]=c[i]^d[r1]^d[l1];</span><br><span class="line">        &#125;</span><br><span class="line">        else//在同一个集合，可能冲突！</span><br><span class="line">        &#123;</span><br><span class="line">            if(d[r1]^d[l1]!=c[i])</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;%d\n&quot;,i-1);</span><br><span class="line">                return 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;,n);//如果全部没错，就输出最后一个答案</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到学弟们都不会，那我就给个题解吧，免得一直不会，留漏洞！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://www.dream-ak.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>爬虫</title>
    <link href="https://www.dream-ak.top/2020/02/08/%E7%88%AC%E8%99%AB/"/>
    <id>https://www.dream-ak.top/2020/02/08/%E7%88%AC%E8%99%AB/</id>
    <published>2020-02-08T12:12:03.000Z</published>
    <updated>2020-02-11T14:16:08.118Z</updated>
    
    <content type="html"><![CDATA[<p>爬了几个网站以后感觉自己还有好多不会的，先来看一下爬虫的基础，在复习复习，emmm，没有需求就没有学习的动力啊(或许这就是我菜的原因吧)<a id="more"></a></p><h1 id="爬虫的四个步骤"><a href="#爬虫的四个步骤" class="headerlink" title="爬虫的四个步骤"></a>爬虫的四个步骤</h1><ol><li>获取数据：爬虫根据我们的输入的网址进行访问，让后返回一系列的数据</li><li>解析数据：对于数据我们需要把返回的数据进行解析成我们能读懂的表达式</li><li>提取数据：从我们需要的地方，我们需要对这些数据进行提炼，获取我们所需要的数据。</li><li>保存数据：把我们已经获得的数据保存起来，方便阅读！</li></ol><p>爬虫的原理一般都是这样，<del>而反爬虫一般都是利用js等各种诡异的框架来妨碍我们获取需要的数据，当然还有通过直接封IP的，但是他的误伤率很高，因为IP换人的速度太快，不知道封多久。</del>（等以后真正确定了，再把删除线叉掉）</p><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p>我们一般是通过$requests$模块来获取数据。<br>这里说明一下$requests$的功能：</p><ol><li>发起get(‘url’,**kw)请求，这是常用的获取数据的方法，kw一共是12个参数！在后面有介绍。</li><li>post()提交请求，对应于HTTP的post部分</li><li>put()请求，对应于HTTP的PUT部分</li><li>patch()，向html网页提交局部修改请求，对应于HTTP的patch</li><li>delete()，向html网页提交删除请求，对应于HTTP的delete</li><li>head(),获取头信息的方法，对应于HTTP的get</li><li>requests()，构造请求，支撑以下所有基础方法</li></ol><h3 id="requests的get调用"><a href="#requests的get调用" class="headerlink" title="requests的get调用"></a>requests的get调用</h3><p>$get(‘url’,params=None,**kwargs)$其中$kwargs$一共有12个参数：<br><img src="/2020/02/08/%E7%88%AC%E8%99%AB/4.png" alt="kw"></p><h2 id="response-对象"><a href="#response-对象" class="headerlink" title="$response$对象"></a>$response$对象</h2><p>在对于一个请求后返回的对象就是$response$对象，这种对象支持4种操作</p><ol><li>首先编码response.status_code()返回一个状态值，其中200为获取成功</li><li>response.context()获取的数据返回。</li><li>response.encoding定义了编码，我们可以使用response.apparent_encoding来自动获取编码，也可以自己从网站自己找编码方式</li><li>response.text()返回一个字符串</li></ol><h3 id="通过headers来模拟浏览器向网站发起请求"><a href="#通过headers来模拟浏览器向网站发起请求" class="headerlink" title="通过headers来模拟浏览器向网站发起请求"></a>通过headers来模拟浏览器向网站发起请求</h3><p>我们先获得自己的代理然后添加header<br>get(‘url’,headers = user-agent)</p><h3 id="通过修改params参数提交"><a href="#通过修改params参数提交" class="headerlink" title="通过修改params参数提交"></a>通过修改params参数提交</h3><p>我们在获取网页时加上一个自己想要访问的参数，kw=’want’<br>get(“url”,kw)<br>就会在网页上获得自己想要的数据了哟</p><h2 id="解析数据"><a href="#解析数据" class="headerlink" title="解析数据"></a>解析数据</h2><p>我们获取了一个数据要怎么解析呢？<br>这里我用的是$beautifulsoup$解析的网页。<br>首先$beautifulsoup$不是标准库，所以我们先安装：</p><blockquote><p>pip install beautifulsoup4</p></blockquote><p>使用简单我们直接调用就好了<br>text = BeautifulSoup(str,’html.parser’)<br>这样子我们就会把text变成一个BeautifulSoup对象，这样操作的原因<strong>BeautifulSoup对象在后面的提取数据中成了必要条件，所以必须要转对象</strong><br>同时str必须为字符串！</p><h2 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h2><p>emmm，这里用beatifulsoup提取数据。这里提取是通过find与find_all来提取<br>他俩的功能是匹配html的标签和属性，把BeautifulSoup对象里符合要求的数据都提取出来。<strong>区别在于，find()只提取首个满足要求的数据，而find_all()提取出的是所有满足要求的数据。</strong><br><img src="/2020/02/08/%E7%88%AC%E8%99%AB/5.png" alt="爬虫"><br>示例中是class_的原因是与类(class)区别，除了对class属性的匹配以外，还可以与其他的例如style进行匹配哦。这个函数返回的值是一个Tag对象！<br>Tag属性请参考：<br><img src="/2020/02/08/%E7%88%AC%E8%99%AB/6.png" alt="爬虫"><br>首先Tag的find和find_all返回的也是Tag对象！<br>Tag.attrs生成一个字典[‘id’:key]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import os</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">def get(id):</span><br><span class="line">    headers = &#123;&apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36&apos;&#125;</span><br><span class="line">    url = &apos;https://movie.douban.com/top250?start=&apos; + str(id) + &apos;&amp;filter=&apos;</span><br><span class="line">    rem = requests.get(url,headers = headers)</span><br><span class="line">    rem.encoding = &quot;utf-8&quot;</span><br><span class="line">    print(rem.status_code)</span><br><span class="line">    html = rem.text</span><br><span class="line">    path = os.path.abspath(&apos;.&apos;)</span><br><span class="line">    #with open(path+&apos;/豆瓣电影/html1.txt&apos;,&apos;w&apos;,encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">    #    f.write(html)</span><br><span class="line">    link = re.findall(r&apos;&lt;a href=&quot;(.*?)&quot; class=&quot;&quot;&gt;&apos;,html)</span><br><span class="line">    num=0</span><br><span class="line">    for x in link:</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        num+=1</span><br><span class="line">        rem = requests.get(x,headers = headers)</span><br><span class="line">        rem.encoding=&apos;utf-8&apos;</span><br><span class="line">        html2 = BeautifulSoup(rem.text,&apos;html.parser&apos;)</span><br><span class="line">        title = html2.find_all(&apos;span&apos;,property=&quot;v:itemreviewed&quot;)</span><br><span class="line">        print(title[0].text)</span><br><span class="line">        post = html2.find_all(&apos;span&apos;,class_ = &apos;all hidden&apos;)</span><br><span class="line">        #print(post)</span><br><span class="line">        if not post:</span><br><span class="line">            post=html2.find_all(&apos;span&apos;,property=&quot;v:summary&quot;)</span><br><span class="line">        playvideo = html2.find_all(&apos;a&apos;,class_=&quot;playBtn&quot;)</span><br><span class="line">        free = html2.find_all(&apos;span&apos;,class_=&quot;buylink-price&quot;)</span><br><span class="line">        flag = &apos;￥&apos;</span><br><span class="line">        for i in free:</span><br><span class="line">            s = str(i.text)</span><br><span class="line">            if len(s)==50:</span><br><span class="line">                flag=&apos;@&apos;</span><br><span class="line">        with open(path+&apos;/豆瓣电影/&apos;+str(num)+str(flag+title[0].text)+&apos;.txt&apos;,&apos;w&apos;,encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">            for i in post:</span><br><span class="line">                f.write(str(i.text)+&apos;\n&apos;)</span><br><span class="line">            for i in playvideo:</span><br><span class="line">                i.attrs//生成一个字典[&apos;id&apos;:&quot;key&quot;]</span><br><span class="line">                f.write(str(i[&apos;data-cn&apos;]))</span><br><span class="line">                f.write(str(i[&apos;href&apos;])+&apos;\n&apos;)</span><br><span class="line">                #print(i[&apos;data-cn&apos;],i[&apos;href&apos;])</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    get(0)</span><br></pre></td></tr></table></figure><h2 id="爬虫伦理"><a href="#爬虫伦理" class="headerlink" title="爬虫伦理"></a>爬虫伦理</h2><p>任何一个领域都有一些公约，那么爬虫也是如此，对于一个网站我们的公约是在网站后面添加一个$robots.txt$，你就可以查阅了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>爬虫过程<br><img src="/2020/02/08/%E7%88%AC%E8%99%AB/7.png" alt="pac"><br>find适用对象<br><img src="/2020/02/08/%E7%88%AC%E8%99%AB/8.png" alt="pac"><br>最后感谢<a href="https://blog.csdn.net/Theo93/article/details/104114352" target="_blank" rel="noopener">大佬</a>带我入坑</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;爬了几个网站以后感觉自己还有好多不会的，先来看一下爬虫的基础，在复习复习，emmm，没有需求就没有学习的动力啊(或许这就是我菜的原因吧)&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="https://www.dream-ak.top/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="https://www.dream-ak.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>类的学习</title>
    <link href="https://www.dream-ak.top/2020/02/08/%E7%B1%BB%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.dream-ak.top/2020/02/08/%E7%B1%BB%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-02-08T05:33:36.000Z</published>
    <updated>2020-02-08T12:09:19.350Z</updated>
    
    <content type="html"><![CDATA[<p>本来打算继续学习爬虫的，但是看了一下好多对象的东西要用，就还是决定先学一下$python$的类与对象算了。也算是我第一次接触对象和类了。大学一年多了，都没碰过对象和类，我真的菜！<a id="more"></a></p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="什么是类？"><a href="#什么是类？" class="headerlink" title="什么是类？"></a>什么是类？</h2><p>类就是一种抽象的模板，就像月饼的模具一样，我们要做月饼，那么就有一个模具，在这里我们称之为类。</p><h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><p>类的定义是由一个class定义的，一般应用时我们如下面代码一般定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Cat(object):</span><br><span class="line">    # 类的属性</span><br><span class="line"></span><br><span class="line">    # 类的行为</span><br></pre></td></tr></table></figure></p><ol><li>一个类的命名通常采用大驼峰式，也就是第一个字母大写。</li><li>对于一个类来说，我们通常定义两种类别的东西，一个叫做类的属性，一个叫做类的行为。既然是一个类那么一定有自己的属性，例如：颜色，外观，味道等等。也会有自己的行为，例如：跑，运，发霉，生锈等等动作。</li><li>我们对于一个类定义时后面的参数是类的父类，当没有父类时，我们选择放上$object(python3)$</li></ol><h2 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h2><p>对于一个类的属性写法在这里我们了解下面这个函数<br>$def$ $<strong>init</strong>$($self$,自定义参数):<br>这个函数的用途从单词词义来看就知道叫做初始化。我们在声明对象时，我们会默认运行此函数，那么我们就可以用这个来定义默认类的属性，对于$self$这里暂时不解释，提醒一下，类的所有函数都必须含有此参数。</p><h2 id="类的行为"><a href="#类的行为" class="headerlink" title="类的行为"></a>类的行为</h2><p>我们对于这个类的行为可以看成我们要这个类的所有的东西可以做什么，比如我们要月饼都运往安徽，那么我们只需要在模板里面写上一个行为“运往安徽”，那么按照这个模板生成的月饼都会运往安徽咯！<br>写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def 函数名(self,自定义参数):</span><br><span class="line">    xxxxx</span><br></pre></td></tr></table></figure><br>下面xxx代表具体行为，看上去除了$self$以外和其他的函数没有什么差别了。这样就会产生一个简单的类</p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>说了那么久的类，那么对象又是什么呢？那就是一个由月饼模板做的月饼了，直接由模板复制出来的。<br>那么对象有是怎么定义的呢？<br>我们一般采用：<strong>对象名 = 类()</strong>注意后面有个括号哟。<br>我们对于这个对象有些什么操作呢？因为$python$是动态语言，其实我们可以随时对这个对象进行增加属性！</p><h1 id="看代码"><a href="#看代码" class="headerlink" title="看代码"></a>看代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Moon(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.price = &quot;10￥&quot;</span><br><span class="line">        self.to = &quot;安徽&quot;</span><br><span class="line">    def sold(self,price1):</span><br><span class="line">        print(&quot;原价：%s&quot; % self.price)</span><br><span class="line">        print(&quot;售价：%s&quot; % price1)</span><br><span class="line">        return</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    moon = Moon()</span><br><span class="line">    moon.sold(&quot;12￥&quot;)</span><br></pre></td></tr></table></figure><p>这样$<strong>init</strong>$就是定义属性,$sold$就是一个行为函数了</p><h2 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h2><p>看了一下<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017496031185408" target="_blank" rel="noopener">廖雪峰</a>大神的博客，封装就是执行操作时，不需要对一个类里面的数据进行访问，直接把操作放在类里面，以后调用时就不用考虑类里面的行为咯，像极了我的行为函数啊。hhh</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来打算继续学习爬虫的，但是看了一下好多对象的东西要用，就还是决定先学一下$python$的类与对象算了。也算是我第一次接触对象和类了。大学一年多了，都没碰过对象和类，我真的菜！&lt;/p&gt;
    
    </summary>
    
    
      <category term="python基础" scheme="https://www.dream-ak.top/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="https://www.dream-ak.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>zoj2770差分约束</title>
    <link href="https://www.dream-ak.top/2020/02/07/zoj2770%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/"/>
    <id>https://www.dream-ak.top/2020/02/07/zoj2770%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/</id>
    <published>2020-02-07T12:54:48.000Z</published>
    <updated>2020-02-07T12:57:37.371Z</updated>
    
    <content type="html"><![CDATA[<p>emmm,好久没刷题，手感都快没了，先来养下手感<a id="more"></a></p><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://vjudge.net/problem/ZOJ-2770#author=zuodiedai" target="_blank" rel="noopener">题目链接</a></h2><p>题意大概就是给我们$n$个营地，$c[i]$表示第$i$个营地最多的人数，第$u$-第$v$个营地一共有$w$个人。问最少有多少人。<br>对于这种题型，我们一般做法是首先确定一个数组表示前面$i$个营地的总人数</p><blockquote><p>挖掘隐藏条件，每一个营地的人数不可能为负数，所以$a[i]-a[i-1]\geq0$<br>每个营地最多有$i$人，我们可以知道，$a[i]-a[i-1]\leq c[i]$<br>$u-v$一共最少有$w$人，我们可以得出，$a[u]-a[v-1]\geq w$</p></blockquote><p>我们可以把第二个条件化简为</p><script type="math/tex; mode=display">a[i]-a[i-1]\leq a[i] \rightarrow a[i-1]-a[i] \geq -c[i]</script><p>由上化简，我们就把所有的代数式换成了大于等于的形式，开始建图了<br>题目要求的是最小的人数，那么也就是$min(a[n]-a[0])$那么我们就可以这么建图：</p><blockquote><p>我们按照从被减数向减数建一条边，边权为右边的值。</p></blockquote><p>这样建图有什么好处？因为我们要求的是$min(a[n]-a[0])$，而我们这么建图就会使源点$0$到达的任意一个$v$最长路长度都是最少的人数，为什么是最长路？大于等于符号决定的呀，<strong>当大于等于时，只有最长路不会和其他方向的边冲突，小于等于时，我们只有最短路不会和其他方式的边冲突</strong>。<br>接下来看代码，spfa版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">//#include&lt;windows.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e5+5;</span><br><span class="line">int deq[N*2],a[N],head[N],tot=0;</span><br><span class="line">struct ED</span><br><span class="line">&#123;</span><br><span class="line">    int pre,to,w;</span><br><span class="line">&#125;ed[2*N];</span><br><span class="line">int vis[N],dis[N],num[N];</span><br><span class="line">void spfa(int x)&#123;</span><br><span class="line">    memset(dis,-1,sizeof dis);</span><br><span class="line">    memset(vis,0,sizeof vis);</span><br><span class="line">    memset(deq,0,sizeof deq);</span><br><span class="line">    memset(num,0,sizeof num);</span><br><span class="line">    dis[0]=0;</span><br><span class="line">    int l=1,r=0;</span><br><span class="line">    deq[++r]=0;</span><br><span class="line">    while(l&lt;=r)&#123;</span><br><span class="line">        int u=deq[l];</span><br><span class="line">        l++;</span><br><span class="line">        vis[u]=0;</span><br><span class="line">        //printf(&quot;%dsss\n&quot;,u);</span><br><span class="line">        for(int i=head[u];~i;i=ed[i].pre)&#123;</span><br><span class="line">            int v=ed[i].to;</span><br><span class="line">            //printf(&quot;%d %d %d %d %d\n&quot;,u,v,dis[u],ed[i].w,dis[v]);</span><br><span class="line">            if(dis[v]&lt;dis[u]+ed[i].w) &#123;</span><br><span class="line">                dis[v]=dis[u]+ed[i].w;</span><br><span class="line">                if(vis[v]) continue;</span><br><span class="line">                deq[++r]=v;</span><br><span class="line">                num[v]++;</span><br><span class="line">                if(num[v]&gt;=x) &#123;</span><br><span class="line">                    printf(&quot;Bad Estimations\n&quot;);</span><br><span class="line">                    return ;</span><br><span class="line">                &#125;</span><br><span class="line">                vis[v]=1;</span><br><span class="line">                //printf(&quot;%d %d\n&quot;,u,v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(dis[x]==-1)&#123;</span><br><span class="line">        printf(&quot;Bad Estimations\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,dis[x]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void add(int u,int v,int w)&#123;</span><br><span class="line">    ed[++tot].pre=head[u];</span><br><span class="line">    ed[tot].to=v;</span><br><span class="line">    ed[tot].w=w;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    while (scanf(&quot;%d %d&quot;,&amp;n,&amp;m)==2)</span><br><span class="line">    &#123;</span><br><span class="line">        tot=0;</span><br><span class="line">        for(i=0;i&lt;=n;i++)&#123;</span><br><span class="line">            head[i]=-1;</span><br><span class="line">        &#125;</span><br><span class="line">        for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">            add(i-1,i,0);</span><br><span class="line">            add(i,i-1,-a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        int u,v,w;</span><br><span class="line">        for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">            scanf(&quot;%d %d %d&quot;,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            add(u-1,v,w);</span><br><span class="line">        &#125;</span><br><span class="line">        spfa(n);</span><br><span class="line">    &#125;</span><br><span class="line">    //system(&quot;pause&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>不用队列，方便优化</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;emmm,好久没刷题，手感都快没了，先来养下手感&lt;/p&gt;
    
    </summary>
    
    
      <category term="图论" scheme="https://www.dream-ak.top/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>python爬取王者数据</title>
    <link href="https://www.dream-ak.top/2020/02/06/python%E7%88%AC%E5%8F%96%E7%8E%8B%E8%80%85%E6%95%B0%E6%8D%AE/"/>
    <id>https://www.dream-ak.top/2020/02/06/python%E7%88%AC%E5%8F%96%E7%8E%8B%E8%80%85%E6%95%B0%E6%8D%AE/</id>
    <published>2020-02-06T10:24:34.000Z</published>
    <updated>2020-02-08T13:29:30.494Z</updated>
    
    <content type="html"><![CDATA[<p>正则已经学完了，就要开始玩爬虫了呀，我们首先爬一个王者的数据，来好好看看吧<a id="more"></a></p><h1 id="requests"><a href="#requests" class="headerlink" title="$requests$"></a>$requests$</h1><p>首先我们安装这一个requests模块，在终端输入</p><ol><li>pip install requests</li></ol><p>利用$r=requests.get()$来进行对一个网页的获取，返回一个二进制字符串，为了不把字符转乱码，我们一般使用正确的编码格式，这个编码格式一般在网页上写着！或者使用$r.apparent_encoding$的函数自动获取，不过不保证完全准确！<br>转字符串时可以使用$html=r.text$返回字符串，<strong>详情请看<a href="https://dream-ak.top/2020/02/08/爬虫" target="_blank" rel="noopener">爬虫</a>这篇博客</strong></p><h2 id="强行爬虫"><a href="#强行爬虫" class="headerlink" title="强行爬虫"></a>强行爬虫</h2><p>在爬<a href="https://www.vmgirls.com" target="_blank" rel="noopener">https://www.vmgirls.com</a> 时会发现不允许爬取，那么有一个玄学的爬取方法，这个网站是通过判断代理服务来判断是不是爬虫，在requests时会发送一个爬虫请求，该网站如果发现是爬虫时，那么我们就可以把requests发送的代理服务改掉,通过在$requests(‘<a href="https://vmgirls.com/&#39;,headers=&quot;本地代理&quot;)$。" target="_blank" rel="noopener">https://vmgirls.com/&#39;,headers=&quot;本地代理&quot;)$。</a><br>本地代理可以在网页上查看！</p><h1 id="re-findall"><a href="#re-findall" class="headerlink" title="$re.findall()$"></a>$re.findall()$</h1><p>我们一般使用这个来获取自己需要的信息。</p><ol><li>()括号内表示需要的信息，没有括号则表示不需要的信息</li><li>[]匹配时我们需要写一个自己的字符分类，然后去选择自己的信息</li><li>findall(r’’,txt)是格式,r后跟着自己的匹配方式。</li></ol><h1 id="os"><a href="#os" class="headerlink" title="os"></a>os</h1><p>文件读写：</p><ol><li>对于文件读写我们一般是使用$with$ $open(“文件路径”,’读写方式’,’encoding=编码规则’) as f:$</li><li>对于文件路径可以使用绝对路径，编码规则须和字符串的编码规则相同。</li></ol><h1 id="time"><a href="#time" class="headerlink" title="time"></a>time</h1><p>为了网站的稳定性能我们一般要去使用$time.sleep()$来控制爬取速度。</p><h1 id="最后来看一下我们是如何爬取王者的："><a href="#最后来看一下我们是如何爬取王者的：" class="headerlink" title="最后来看一下我们是如何爬取王者的："></a>最后来看一下我们是如何爬取王者的：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">r = requests.get(&apos;https://pvp.qq.com/web201605/herolist.shtml&apos;)</span><br><span class="line">r.encoding=&quot;gbk&quot;</span><br><span class="line">html = r.text</span><br><span class="line">http = &quot;https://pvp.qq.com/web201605/&quot;</span><br><span class="line">dirs = os.path.abspath(&apos;.&apos;)</span><br><span class="line">dir_name = re.findall(r&apos;&lt;li&gt;&lt;a href=&quot;([a-z0-9/.]*)&quot; target=&quot;_blank&quot;&gt;&lt;img+\s&apos;,html)</span><br><span class="line">for i in dir_name:</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    r = requests.get(http+i)</span><br><span class="line">    r.encoding=&apos;gbk&apos;</span><br><span class="line">    html1=r.text</span><br><span class="line">    hero = re.findall(r&apos;&lt;h2 class=&quot;cover-name&quot;&gt;(.*?)&lt;/h2&gt;&apos;,html1)</span><br><span class="line">    print(hero)</span><br><span class="line">    skin = re.findall(r&apos;&lt;ul class=&quot;pic-pf-list pic-pf-list3&quot; data-imgname=&quot;([\S]*)&quot;&gt;&apos;,html1)</span><br><span class="line">    skill_name = re.findall(r&apos;&lt;p class=&quot;skill-name&quot;&gt;&lt;b&gt;(.*?)&lt;/b&gt;&lt;span&gt;(.*?)&lt;/span&gt;&lt;span&gt;(.*?)&lt;/span&gt;&lt;/p&gt;&apos;,html1)</span><br><span class="line">    skill_decs = re.findall(r&apos;&lt;p class=&quot;skill-desc&quot;&gt;(.*?)&lt;/p&gt;&apos;,html1)</span><br><span class="line">    skill_tips = re.findall(r&apos; &lt;div class=&quot;skill-tips&quot;&gt;(.*?)&lt;/div&gt;&apos;,html1)</span><br><span class="line">    lens = len(skill_tips)</span><br><span class="line">    with open(dirs+&apos;/&apos;+&apos;王者荣耀&apos;+&apos;/&apos;+hero[0]+&apos;.txt&apos;,&apos;w&apos;,encoding=&apos;gbk&apos;) as f:</span><br><span class="line">        f.write(&quot;英雄名称：&quot;+hero[0]+&apos;\n&apos;)</span><br><span class="line">        f.write(&quot;皮肤：&quot;+skin[0]+&apos;\n\n&apos;)</span><br><span class="line">        for j in range(0,lens,1):</span><br><span class="line">            f.write(&quot;技能名称：&quot;+skill_name[j][0]+&apos;\n&apos;)</span><br><span class="line">            f.write(&quot;技能冷却：&quot;+skill_name[j][1]+&apos;\n&apos;)</span><br><span class="line">            f.write(&quot;技能消耗：&quot;+skill_name[j][2]+&apos;\n&apos;)</span><br><span class="line">            f.write(&quot;技能描述：&quot;+skill_decs[j]+&apos;\n&apos;)</span><br><span class="line">            f.write(&quot;技能用途：&quot;+skill_tips[j]+&apos;\n&apos;)</span><br><span class="line">            f.write(&apos;\n&apos;)</span><br></pre></td></tr></table></figure><p>还是有点不会写文件的保存格式，呜呜呜，只会狂写编码了。。。<br>最后来看一下效果：<br><img src="/2020/02/06/python%E7%88%AC%E5%8F%96%E7%8E%8B%E8%80%85%E6%95%B0%E6%8D%AE/1.png" alt="信息"><br><img src="/2020/02/06/python%E7%88%AC%E5%8F%96%E7%8E%8B%E8%80%85%E6%95%B0%E6%8D%AE/2.png" alt="东西"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则已经学完了，就要开始玩爬虫了呀，我们首先爬一个王者的数据，来好好看看吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="https://www.dream-ak.top/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="https://www.dream-ak.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://www.dream-ak.top/2020/02/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://www.dream-ak.top/2020/02/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-02-05T10:48:23.000Z</published>
    <updated>2020-02-06T13:01:44.067Z</updated>
    
    <content type="html"><![CDATA[<p>$emmmm$，开始来学一些能够飘得的玩意了，虽然以前我玩过这个$python$的爬虫，但是今天来系统学习一下，$hhh$<br><a id="more"></a></p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="匹配方式"><a href="#匹配方式" class="headerlink" title="匹配方式"></a>匹配方式</h2><div class="table-container"><table><thead><tr><th style="text-align:center">字符表达</th><th style="text-align:center">意义</th><th style="text-align:center">例子</th><th style="text-align:center">例子解释</th></tr></thead><tbody><tr><td style="text-align:center">\d</td><td style="text-align:center">匹配一个数字</td><td style="text-align:center">\d{3}</td><td style="text-align:center">匹配三个数字</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配一个字母</td><td style="text-align:center">\w{3}</td><td style="text-align:center">匹配三个字母</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">可选匹配，前面括号内符号可以匹配一次或者零次</td><td style="text-align:center">(wo)?man</td><td style="text-align:center">匹配man或者woman</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">匹配零次或多次</td><td style="text-align:center">(wo)*man</td><td style="text-align:center">代表可以匹配man、wowoman等等</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">匹配一次或多次</td><td style="text-align:center">((wo)+man)</td><td style="text-align:center">代表可以匹配woman、wowoman等等</td></tr><tr><td style="text-align:center">{}</td><td style="text-align:center">指定匹配次数</td><td style="text-align:center">(wo){2,5}man</td><td style="text-align:center">可以匹配wo重复2到5遍的此类字符串</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">管道，指定多种字符模式，返回第一次出现的文本它是一竖</td><td style="text-align:center">‘Batman 1 Tina Fey’</td><td style="text-align:center">表示查找Batman和Tina Fey的第一次出现的字符</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">直接从头开始匹配</td><td style="text-align:center">^hello</td><td style="text-align:center">从头开始匹配hello</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">必须以该字符结束</td><td style="text-align:center">3$</td><td style="text-align:center">必须以3结尾</td></tr></tbody></table></div><p><strong>正则匹配是一种贪心匹配(能长则长)，而花括号的匹配是一种非贪心匹配(能短则短)</strong></p><ol><li>search：每一次返回第一次找到的字符串</li><li>findall：返回整个text的所有的字符串</li></ol><h2 id="字符分类"><a href="#字符分类" class="headerlink" title="字符分类"></a>字符分类</h2><h3 id="字符表达式"><a href="#字符表达式" class="headerlink" title="字符表达式"></a>字符表达式</h3><div class="table-container"><table><thead><tr><th style="text-align:center">字符分类</th><th style="text-align:center">表达式</th></tr></thead><tbody><tr><td style="text-align:center">\d</td><td style="text-align:center">0到9的任何数字</td></tr><tr><td style="text-align:center">\D</td><td style="text-align:center">除0到9的任何数字</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">任何字母、数字、下划线字符</td></tr><tr><td style="text-align:center">\W</td><td style="text-align:center">除字母、数字、下划线字符外的任意字符</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">空格、制表符、换行符</td></tr><tr><td style="text-align:center">\S</td><td style="text-align:center">除空格、制表符、换行符以外的任意字符</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">匹配除换行以外所有字符</td></tr><tr><td style="text-align:center">.*</td><td style="text-align:center">匹配所有字符</td></tr></tbody></table></div><h3 id="建立自己的字符分类"><a href="#建立自己的字符分类" class="headerlink" title="建立自己的字符分类"></a>建立自己的字符分类</h3><ol><li>[quit]表达可以匹配quit里面的任意一个字符</li><li>[ ^quit ]表达非quit里面任意一个字符的字符<br><strong>可以通过短横来表达字母或数字的范围[a-zA-Z0-9]将匹配所有字母和数字</strong></li></ol><h2 id="文本替换"><a href="#文本替换" class="headerlink" title="文本替换"></a>文本替换</h2><p>正则表达式不仅能找到文本模式，而且能够用新的文本替换掉这些模式。$Regex$对象的 $sub()$方法需要传入两个参数。第一个参数是一个字符串，用于取代发现的匹 配。第二个参数是一个字符串，即 正则表达式。$ sub()$方法返回替换完成后的字符串。<br>举个例子：</p><pre><code>&gt;&gt;&gt; namesRegex = re.compile(r&#39;Agent \w+&#39;) &gt;&gt;&gt; namesRegex.sub(&#39;CENSORED&#39;, &#39;Agent Alice gave the secret documents to Agent Bob.&#39;)&#39;CENSORED gave the secret documents to CENSORED.&#39;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$emmmm$，开始来学一些能够飘得的玩意了，虽然以前我玩过这个$python$的爬虫，但是今天来系统学习一下，$hhh$&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="https://www.dream-ak.top/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="https://www.dream-ak.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python刷题</title>
    <link href="https://www.dream-ak.top/2020/02/04/python%E5%88%B7%E9%A2%98/"/>
    <id>https://www.dream-ak.top/2020/02/04/python%E5%88%B7%E9%A2%98/</id>
    <published>2020-02-04T05:47:10.000Z</published>
    <updated>2020-02-04T05:55:22.525Z</updated>
    
    <content type="html"><![CDATA[<p>终于$python$有点上道了，开始我的磕磕绊绊刷题计划<a id="more"></a></p><h1 id="一行内多次输入"><a href="#一行内多次输入" class="headerlink" title="一行内多次输入"></a>一行内多次输入</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n,m=int(input.slipt())</span><br></pre></td></tr></table></figure><p>这样就可以一行输入两个数了，hhh(抄的)</p><h1 id="一行多输出"><a href="#一行多输出" class="headerlink" title="一行多输出"></a>一行多输出</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&apos; &apos;.join(map(str,a)))</span><br></pre></td></tr></table></figure><p>这个能把一个数组中间加入空格并输出。</p><h2 id="看题目"><a href="#看题目" class="headerlink" title="看题目"></a>看题目</h2><p>现在来看$Nod51$题目：<br>冒办法，我找了半天就只有$codeforce$和$Nod51$支持$python3$了</p><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a><a href="51nod.com/Challenge/Problem.html#problemId=2738">全排列</a></h3><p>题面很好懂，解法很好想，就是被输出卡了。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line">n,m=map(int,input().split())</span><br><span class="line">def dfs(l,r):</span><br><span class="line">    if m==r:</span><br><span class="line">        print(&apos; &apos;.join(map(str,a)))</span><br><span class="line">        return </span><br><span class="line">    else :</span><br><span class="line">        for i in range(l+1,n+1,1):</span><br><span class="line">            a.insert(r,i)</span><br><span class="line">            dfs(i,r+1)</span><br><span class="line">            a.pop(r)</span><br><span class="line">        return </span><br><span class="line">dfs(0,0)</span><br></pre></td></tr></table></figure></p><p>a序列放前面一点就能被后面函数调用了，hhh，强行全局</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于$python$有点上道了，开始我的磕磕绊绊刷题计划&lt;/p&gt;
    
    </summary>
    
    
      <category term="python刷题" scheme="https://www.dream-ak.top/categories/python%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="ACM" scheme="https://www.dream-ak.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>map与reduce</title>
    <link href="https://www.dream-ak.top/2020/02/04/map%E4%B8%8Ereduce/"/>
    <id>https://www.dream-ak.top/2020/02/04/map%E4%B8%8Ereduce/</id>
    <published>2020-02-04T03:19:31.000Z</published>
    <updated>2020-02-04T03:21:46.520Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="python基础" scheme="https://www.dream-ak.top/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="https://www.dream-ak.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>函数</title>
    <link href="https://www.dream-ak.top/2020/02/03/%E5%87%BD%E6%95%B0/"/>
    <id>https://www.dream-ak.top/2020/02/03/%E5%87%BD%E6%95%B0/</id>
    <published>2020-02-03T09:04:38.000Z</published>
    <updated>2020-02-04T02:37:43.781Z</updated>
    
    <content type="html"><![CDATA[<p>终于到激动人心的时刻了，我们开始学习$python$函数了，有点小快啊，hhh<a id="more"></a></p><h1 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h1><h2 id="def"><a href="#def" class="headerlink" title="$def$"></a>$def$</h2><p>定义一个函数要使用$def$语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。<br>拿一个从$l$加到$r$的和的函数来讲<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def sum(l,r):</span><br><span class="line">    sum = 0</span><br><span class="line">    for i in range(l,r+1,1):</span><br><span class="line">        sum += i</span><br><span class="line">    return sum</span><br><span class="line">l = int(input(&quot;l=&quot;))</span><br><span class="line">r = int(input(&quot;r=&quot;))</span><br><span class="line">print(sum(l,r))</span><br></pre></td></tr></table></figure></p><blockquote><p>$output$<br>l=1<br>r=100<br>5050</p></blockquote><h2 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h2><p>比如上面的参数就叫做位置参数，调用$sum$函数时，必须给予两个固定参数</p><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>看一个代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def mul(a,b = 3):</span><br><span class="line">    print(a*b)</span><br><span class="line">mul(2)</span><br><span class="line">mul(2,4)</span><br></pre></td></tr></table></figure><blockquote><p>$output$<br>6<br>8</p></blockquote><p>这个和上面的参数比较不同点在于，在定义参数的时候对一个参数赋值，这种写法叫做默认参数</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>我们调用函数时，对于默认参数可以选择性增加调用值。更大的符合了用户的情况</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>对于默认参数我们一般默认，变化大的在前，变化小的在后</li><li>且对于默认参数放在位置参数以后</li><li>对于默认参数赋值必须赋为不变对象</li></ol><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>可变参数：调用时，输入的长度可以是任意个。在传入以后自动组成一个$tuple$<br>比如我们要对一个$list$或$tuple$进行和运算，由于每一个$list$的长度不定。所以我们需要一个可变参数。<br>来看一个代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def sum1(*lis):</span><br><span class="line">    sum = 0</span><br><span class="line">    for i in lis:</span><br><span class="line">        sum += i</span><br><span class="line">    return sum</span><br><span class="line">a = [1,2,5,7]</span><br><span class="line">b = [5,9,8]</span><br><span class="line">print(sum1(*a))</span><br><span class="line">print(sum1(*b))</span><br></pre></td></tr></table></figure><blockquote><p>$output$<br>15<br>22</p></blockquote><p>可以发现，好像就是C语言传入指针了，对的，C语言遮掩好像也可以，就是长度问题而已。<br>下面这些要用的时候再补充吧，暂时请参考<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017261630425888" target="_blank" rel="noopener">廖雪峰</a></p><h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><p>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。<br>他的功能，给与用户想给的一些多余的信息，也可以进行收集。</p><h2 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h2><p>对于关键字参数进行一定的限制</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于到激动人心的时刻了，我们开始学习$python$函数了，有点小快啊，hhh&lt;/p&gt;
    
    </summary>
    
    
      <category term="python基础" scheme="https://www.dream-ak.top/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="https://www.dream-ak.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>dict和set</title>
    <link href="https://www.dream-ak.top/2020/02/03/dict%E5%92%8Cset/"/>
    <id>https://www.dream-ak.top/2020/02/03/dict%E5%92%8Cset/</id>
    <published>2020-02-03T07:01:13.000Z</published>
    <updated>2020-02-22T06:45:45.189Z</updated>
    
    <content type="html"><![CDATA[<p>$dict$我发现与$c++$的$map$十分相似,而$set$好像名字都没变，由于$c++$只学皮毛，就不瞎说了，慢慢学吧<a id="more"></a></p><h1 id="dict"><a href="#dict" class="headerlink" title="$dict$"></a>$dict$</h1><h2 id="dict-的结构"><a href="#dict-的结构" class="headerlink" title="$dict$的结构"></a>$dict$的结构</h2><p>这里按照廖雪峰的介绍给出两种方式</p><ol><li>按照字典树的方式建立一棵字典树，优点不会出现冲突，可直接使用，缺点相较于哈希来说，查找较慢</li><li>直接建立一个哈希表，每一次按照$key$直接哈希地址然后得到答案，优点，查找方便。缺点：容易出现哈希冲突。</li></ol><p>$dict$是第二种建立方式，因此$key$的值是唯一的，不可重复，<strong>如果重复了那么就会将前面得到的数据丢失冲掉。</strong></p><h2 id="dict-的建立"><a href="#dict-的建立" class="headerlink" title="$dict$的建立"></a>$dict$的建立</h2><p>首先来看一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=&#123;&#125;</span><br><span class="line">a[&apos;peng&apos;] = 4</span><br><span class="line">a[&apos;我&apos;] = 5</span><br><span class="line">print(a[&apos;我&apos;])</span><br></pre></td></tr></table></figure><blockquote><p>$output$<br>5</p></blockquote><p>可以看到我们是通过大括号{}来定义一个空$dict$然后添加直接赋值就好了。调用直接访问$key$就行了，但是一定要保证这个$key$存在。<br>判断$key$存在性的办法：</p><blockquote><ol><li>$print(‘我’\ in\ a) $<br>如果存在，返回$true$。不存在返回false。</li><li>$print(a.get( ‘我’,x))$<br>当不存在‘我’时返回$x$值</li></ol></blockquote><h2 id="dict-的删除"><a href="#dict-的删除" class="headerlink" title="$dict$的删除"></a>$dict$的删除</h2><p>这个的删除我们前提是$key$存在,如果存在，我们就可以像$list$一样删除它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.pop(&apos;peng&apos;)</span><br><span class="line">print(a.get(&apos;peng&apos;,777))</span><br></pre></td></tr></table></figure><blockquote><p>$output$<br>777</p></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>$dict$可以用在需要高速查找的很多地方，在$Python$代码中几乎无处不在，正确使用$dict$非常重要，需要牢记的第一条就是$dict$的key必须是不可变对象。</p><p>这是因为$dict$根据$key$来计算$value$的存储位置，如果每次计算相同的$key$得出的结果不同，那$dict$内部就完全混乱了。这个通过$key$计算位置的算法称为哈希算法$（Hash）$。</p><p>要保证$hash$的正确性，作为$key$的对象就不能变。在$Python$中，字符串、整数等都是不可变的，因此，可以放心地作为$key$。而$list$是可变的，就不能作为$key$</p><h1 id="set"><a href="#set" class="headerlink" title="$set$"></a>$set$</h1><p>$set$一般用于去重和集合操作，它可以对集合进行”与”、”或”操作.</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>创建一个空$set$<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = set()</span><br></pre></td></tr></table></figure></p><p>创建一个$set$我们一般是要一个$list$做输入集合<br>看一段代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [1,1,5,9,3,8,9]</span><br><span class="line">a = set(l)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p><blockquote><p>$output$<br>{1, 3, 5, 8, 9}</p></blockquote><p>很明显它自己去重了，同时<strong>不要被表面所迷惑$set$是无序的</strong></p><h2 id="set-怎么添加元素？"><a href="#set-怎么添加元素？" class="headerlink" title="$set$怎么添加元素？"></a>$set$怎么添加元素？</h2><p>答案下行揭晓<br>$a.add(x)$参数$x$是你要添加的$key$<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.add(2)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p><blockquote><p>$output$<br>{1, 2, 3, 5, 8, 9}</p></blockquote><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><p>我们一般通过$a.remove(x)$删除,$x$是你要删除的$key$<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.remove(2)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p><blockquote><p>$output$<br>{1, 3, 5, 8, 9}</p></blockquote><h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><p>直接&amp;或者|就好了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b=set([1,2])</span><br><span class="line">print(a&amp;b)</span><br><span class="line">print(a|b)</span><br></pre></td></tr></table></figure></p><blockquote><p>$output$<br>{1}<br>{1, 2, 3, 5, 8, 9}</p></blockquote><h2 id="不可变变量"><a href="#不可变变量" class="headerlink" title="不可变变量"></a>不可变变量</h2><p>字符串属于不可变变量，同时$list$是一个可变变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &quot;abc&quot;</span><br><span class="line">print(a.replace(&apos;a&apos;,&apos;A&apos;))</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$dict$我发现与$c++$的$map$十分相似,而$set$好像名字都没变，由于$c++$只学皮毛，就不瞎说了，慢慢学吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="python基础" scheme="https://www.dream-ak.top/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="https://www.dream-ak.top/tags/python/"/>
    
  </entry>
  
</feed>
