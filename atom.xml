<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-28T04:59:01.904Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>无向秃</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>欧拉函数</title>
    <link href="http://yoursite.com/2020/01/28/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2020/01/28/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</id>
    <published>2020-01-28T03:19:55.000Z</published>
    <updated>2020-01-28T04:59:01.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h1><blockquote><p><code>欧拉函数是一个用于求1~n里面所有的与n互质数字的个数</code></p></blockquote><h2 id="欧拉函数的性质"><a href="#欧拉函数的性质" class="headerlink" title="欧拉函数的性质"></a>欧拉函数的性质</h2><ol><li>φ(x * y) = φ(x) * φ(y)    <strong>当且(x,y)==1</strong></li><li>φ(x) = x - 1           <strong>当且仅当x为质数时</strong></li><li>φ(n) = (p-1) * p^(k-1)</li><li>φ(n)=n∗∏(1−1/pi)       <strong>pi是n的质因子</strong></li><li>a^(φ(m))==1%m          <strong>当且仅当(a,m)==1</strong></li><li>s = n * (φ(n)/2)         <strong>s为小于n且与n互质的数之和</strong></li><li>φ(n * p)=φ(n) * p        <strong>当p为质数且n%p==0</strong></li><li>φ(n * p)=φ(n) * (p-1)     <strong>当p为质数且n%p!=0</strong></li></ol><h2 id="计算欧拉值的打表代码-时间复杂度O-n"><a href="#计算欧拉值的打表代码-时间复杂度O-n" class="headerlink" title="计算欧拉值的打表代码,时间复杂度O(n)"></a>计算欧拉值的打表代码,时间复杂度O(n)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">phi[1]=1;</span><br><span class="line">for(int i=2;i&lt;n;i++)&#123;</span><br><span class="line">if(vis[i]==0) pri[++tot]=i,phi[i]=i-1;</span><br><span class="line">for(int j=1;j&lt;=tot&amp;&amp;1ll*i*pri[j]&lt;n;j++)&#123;</span><br><span class="line">vis[i*pri[j]]=1;//标记此点经过非质数</span><br><span class="line">if(i%pri[j]==0) &#123;</span><br><span class="line">phi[i*pri[j]]=phi[i]*pri[j];//性质7</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">else phi[i*pri[j]]=phi[i]*(pri[j]-1);//性质8</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用性质4计算单个欧拉值"><a href="#用性质4计算单个欧拉值" class="headerlink" title="用性质4计算单个欧拉值"></a>用性质4计算单个欧拉值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int ph(int n)&#123;</span><br><span class="line">int res=n,i;</span><br><span class="line">    for(i=2;i*i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(n%i==0)</span><br><span class="line">        &#123;</span><br><span class="line">            res=res-res/i;</span><br><span class="line">            while(n%i==0) n/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(n&gt;1)</span><br><span class="line">        res=res-res/n;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;欧拉函数&quot;&gt;&lt;a href=&quot;#欧拉函数&quot; class=&quot;headerlink&quot; title=&quot;欧拉函数&quot;&gt;&lt;/a&gt;欧拉函数&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;欧拉函数是一个用于求1~n里面所有的与n互质数字的个数&lt;/code&gt;&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
    
      <category term="数论" scheme="http://yoursite.com/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>割点</title>
    <link href="http://yoursite.com/2020/01/20/%E5%89%B2%E7%82%B9/"/>
    <id>http://yoursite.com/2020/01/20/%E5%89%B2%E7%82%B9/</id>
    <published>2020-01-20T14:21:29.000Z</published>
    <updated>2020-01-21T10:58:51.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="割点"><a href="#割点" class="headerlink" title="割点"></a>割点</h1><h3 id="割点定义："><a href="#割点定义：" class="headerlink" title="割点定义："></a>割点定义：</h3><p>对于一个无向图，如果把一个点删除后这个图的极大连通分量数增加了，那么这个点就是这个图的割点（又称割顶）。<br><br><img src="/2020/01/20/%E5%89%B2%E7%82%B9/bridge1.png" alt="割点"><br><br>易得割点是2号点。</p><h3 id="具体操作："><a href="#具体操作：" class="headerlink" title="具体操作："></a>具体操作：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.用dfs给每一个点打上一个时间戳，把每一个点的时间戳保存至num【】里面；</span><br><span class="line">2.通过dfs来统计每一个点能到达的最小的时间戳。&lt;br&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/01/20/%E5%89%B2%E7%82%B9/bridge2.png" alt="时间戳"><br></p><h3 id="割点的判定方式："><a href="#割点的判定方式：" class="headerlink" title="割点的判定方式："></a>割点的判定方式：<br></h3><ol><li>如果存在一个点他的子节点能到达的最小时间戳大于等于父节点的时间戳那么这个点是一个割点。(也就是不能回到祖先，那么当前点就是割点咯)</li><li>假设一个点存在两个子节点，那么该点就是割点。<br><br><img src="/2020/01/20/%E5%89%B2%E7%82%B9/bridge3.png" alt="判定2"><br><br>我们在访问 1 的儿子时候，假设先 DFS 到了 2，然后标记用过，然后递归往下，来到了 4，4 又来到了 3，当递归回溯的时候，会发现 3 已经被访问过了，所以不是割点。<br><br>更新 low 的伪代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果 v 是 u 的儿子 low[u] = min(low[u], low[v]);</span><br><span class="line">否则</span><br><span class="line">low[u] = min(low[u], num[v]);//这里是num[v]而不是low[v]的原因是如下图</span><br><span class="line">//按照节点编号从小到大遍历，4节点先到1，如果是low[v]的话，节点6的low值等于1，很明显是不可以的，所以是num</span><br></pre></td></tr></table></figure><img src="/2020/01/20/%E5%89%B2%E7%82%B9/gedian.png" alt="这是栗子"><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><a href="https://www.luogu.com.cn/problem/P3388" target="_blank" rel="noopener">板子题</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;stack&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N=2e5+5;</span><br><span class="line">typedef long long ll;</span><br><span class="line">struct ED&#123;</span><br><span class="line">int pre,id;</span><br><span class="line">&#125;ed[N];</span><br><span class="line">int head[N],tot=1,cnt=0;</span><br><span class="line">int vis[N],num[N],low[N],inde,res,flag[N];</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">ed[++tot].id=v;</span><br><span class="line">ed[tot].pre=head[u];</span><br><span class="line">head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">void tarjan(int u,int fa)&#123;</span><br><span class="line">vis[u]=1;</span><br><span class="line">low[u]=num[u]=++inde;</span><br><span class="line">int ch=0,i;</span><br><span class="line">for(i=head[u];i;i=ed[i].pre)&#123;</span><br><span class="line">int v=ed[i].id;</span><br><span class="line">if(!vis[v])&#123;</span><br><span class="line">ch++;</span><br><span class="line">tarjan(v,u);</span><br><span class="line">low[u]=min(low[u],low[v]);</span><br><span class="line">if(fa!=u&amp;&amp;low[v]&gt;=num[u]&amp;&amp;!flag[u]) flag[u]=1,res++;</span><br><span class="line">&#125;</span><br><span class="line">else if(v!=fa)&#123;</span><br><span class="line">low[u]=min(low[u],num[v]);//这里非常关键，如果写成low[u]=min(low[u],low[v])在题目里面会wa</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(ch&gt;= 2&amp;&amp;fa==u&amp;&amp;!flag[u])&#123;</span><br><span class="line">flag[u]=1;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n,m,i,j,k;</span><br><span class="line">scanf(&quot;%d %d&quot;,&amp;n,&amp;m);</span><br><span class="line">for(i=1;i&lt;=n;i++) head[i]=0,vis[i]=0;</span><br><span class="line">int u,v;</span><br><span class="line">for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">scanf(&quot;%d %d&quot;,&amp;u,&amp;v);</span><br><span class="line">add(u,v);</span><br><span class="line">add(v,u);</span><br><span class="line">&#125;</span><br><span class="line">for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">if(!vis[i])&#123;</span><br><span class="line">inde=0;</span><br><span class="line">tarjan(i,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;,res);</span><br><span class="line">for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">if(flag[i]) printf(&quot;%d &quot;,i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;割点&quot;&gt;&lt;a href=&quot;#割点&quot; class=&quot;headerlink&quot; title=&quot;割点&quot;&gt;&lt;/a&gt;割点&lt;/h1&gt;&lt;h3 id=&quot;割点定义：&quot;&gt;&lt;a href=&quot;#割点定义：&quot; class=&quot;headerlink&quot; title=&quot;割点定义：&quot;&gt;&lt;/a&gt;割点定义
      
    
    </summary>
    
    
      <category term="图论" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>扩展欧几里得</title>
    <link href="http://yoursite.com/2020/01/14/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/"/>
    <id>http://yoursite.com/2020/01/14/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/</id>
    <published>2020-01-14T11:59:52.000Z</published>
    <updated>2020-01-14T12:35:19.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="扩展欧几里得"><a href="#扩展欧几里得" class="headerlink" title="扩展欧几里得"></a>扩展欧几里得</h1><h2 id="证明方式："><a href="#证明方式：" class="headerlink" title="证明方式："></a>证明方式：</h2><p>首先贝祖原理我大概就不解释了，直接照搬结论：<br></p><ol><li>ax+by=(a,b);贝祖原理<br></li><li>有ax+by=(b,a%b);<br></li><li>假设解为x1,y1则有a * x1+b * y1=(b,a%b)<br></li><li>由3式从右往左代替可得b * x1+(a%b) * y1 = (b,a%b);<br><br>b * x1 + (a-(a/b) * b) * y1 = (b,a%b);<br><br>a * y1 +b * (x1 - (a/b) * y1) = a * x + b * y<br><br>由上可知x = y1,y = x1 - (a/b) * y1。</li></ol><p>对于上式，我们可以比较一下欧几里得求最大公约数的算法：</p><ol><li>(a,b)=(b,a%b)，一直到b等于0时结束递归，而当b等于0时的x=1,y=0();</li></ol><p>然后又可以通过上面代数式4回退时计算出x与y的值！</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ll x,y;</span><br><span class="line">ll ex_gcd(ll a,ll b)&#123;</span><br><span class="line">if(!b)&#123;</span><br><span class="line">x=1,y=0;</span><br><span class="line">return a;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=ex_gcd(b,a%b);</span><br><span class="line">ll t=x;</span><br><span class="line">x=y;</span><br><span class="line">y=t-a/b*y;</span><br><span class="line">return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h3><p>当求一个数字x对于p的逆元时，我们将其写成代数式将是如下形式：</p><ol><li>a*x=1%p;</li></ol><p>对其进行化简可得a * x+y * p=1，已知x,p求a就好了化简成这样以后再看，简直就是扩展欧几里得板子！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;扩展欧几里得&quot;&gt;&lt;a href=&quot;#扩展欧几里得&quot; class=&quot;headerlink&quot; title=&quot;扩展欧几里得&quot;&gt;&lt;/a&gt;扩展欧几里得&lt;/h1&gt;&lt;h2 id=&quot;证明方式：&quot;&gt;&lt;a href=&quot;#证明方式：&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="数论" scheme="http://yoursite.com/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>欧拉筛</title>
    <link href="http://yoursite.com/2020/01/14/%E6%AC%A7%E6%8B%89%E7%AD%9B/"/>
    <id>http://yoursite.com/2020/01/14/%E6%AC%A7%E6%8B%89%E7%AD%9B/</id>
    <published>2020-01-14T07:33:59.000Z</published>
    <updated>2020-01-28T04:44:56.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h1><h2 id="欧拉筛证明："><a href="#欧拉筛证明：" class="headerlink" title="欧拉筛证明："></a>欧拉筛证明：</h2><p>首先介绍一下算术基本原理：x=p1^e1 * p2^e2 * p3^e3…(p为质数，e为正数，x为任意不为1的正整数)<br>由上可以知道x=x1 * p(min)，(p为组成x的最小质数)。<br>所以每一个数一定可以变成一个最小质数乘上一个比这个数小的正整数；<br>那么x将会在x1处被判断，同时也将判断比x * j(j为比x最小质数小的所有质数)<br>那么我们可以通过枚举x值来判断每一个数字是否为质数。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void erlu(int n)&#123;</span><br><span class="line">int i,j,k;</span><br><span class="line">  for(i=1;i&lt;=n;i++) vis[i]=pri[i]=0;</span><br><span class="line">for(i=2;i&lt;=n;i++)&#123;//枚举x</span><br><span class="line">if(!vis[i])&#123;</span><br><span class="line">pri[++tot]=i;</span><br><span class="line">&#125;</span><br><span class="line">for(j=1;j&lt;=tot&amp;&amp;(i*pri[j]&lt;=n);j++)&#123;</span><br><span class="line">vis[i*pri[j]]=pri[j];//保存质数表，每一个空间表示该下标的最小质数！</span><br><span class="line">if(i%pri[j]==0) break;第一个比x小的质数</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;欧拉筛&quot;&gt;&lt;a href=&quot;#欧拉筛&quot; class=&quot;headerlink&quot; title=&quot;欧拉筛&quot;&gt;&lt;/a&gt;欧拉筛&lt;/h1&gt;&lt;h2 id=&quot;欧拉筛证明：&quot;&gt;&lt;a href=&quot;#欧拉筛证明：&quot; class=&quot;headerlink&quot; title=&quot;欧拉筛证明：&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="数论" scheme="http://yoursite.com/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>差分数组实例</title>
    <link href="http://yoursite.com/2019/11/26/IncDec%E5%BA%8F%E5%88%97%20%20%20%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2019/11/26/IncDec%E5%BA%8F%E5%88%97%20%20%20%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/</id>
    <published>2019-11-26T06:25:59.000Z</published>
    <updated>2019-11-27T10:13:04.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接请点击此处"><a href="#题目链接请点击此处" class="headerlink" title="题目链接请点击此处"></a><a href="https://www.acwing.com/problem/content/description/102/" target="_blank" rel="noopener">题目链接请点击此处</a></h2><p>大致讲一下题意，给一个数组，让我用最少的次数将这个数组重置为相同的值，也就是数组内所有数字大小必须相同，<strong>而每一次操作仅允许对一个区间进行+1或者-1的操作。</strong><br>区间修改，而且是修改相同的值，就让我想到了差分数组，<a href="https://blog.csdn.net/qq_42937891/article/details/97548366" target="_blank" rel="noopener">差分数组不熟悉的请点击</a>让每一个值都相同其实就是让<strong>差分数组从第二个开始都为0！当从第二个开始都为0时那么整个数组都会变成第一个值的大小。</strong><br>那么首先就先将这一题所给原数组转化为差分数组，然后计算从第二个位置开始数组元素全部转化为0的步数。这里可以<strong>逆向思考，从0恢复到原数组元素的步数就是题目所问的最少步数，而恢复原数组的最快步数就是ans=max(正数之和，负数之和的绝对值)</strong>；解释一下：因为差分数组每一次变化都会产生一对相反数，而那么我只需要注意绝对值大的就行了，至于多出来的正数或者负数其实是可以放在最后的也就是n+1或者放到<strong>第一个位置(这里一开始没有运算</strong>!)的位置。至此步数就解决了！！！<br>现在解决有多少种的问题：首先我之前说了一句，在经过最少次数变化以后，整个数组都会变成第一个数字的值，那么种类个数只需要考虑一下第一个数字有多少种可能就行了！<strong>在之前说过可以放第一个位置，为什么呢，因为放到这里可以改变整个数组的值，也就是中间可以放多少个，就可以改变多少次，所以答案就是（正数-负数）的绝对值+1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[100009],n,m,i,j,k;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(i=1;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    int c[100009],ko=a[1];</span><br><span class="line">    for(i=2;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i]=a[i]-ko;</span><br><span class="line">        ko=a[i];</span><br><span class="line">    &#125;//差分数组</span><br><span class="line">    long long sum2=0,sum1=0,maxx=0,minn=c[1];</span><br><span class="line">    for(i=2;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(c[i]&gt;0) sum1+=c[i];</span><br><span class="line">        else sum2-=c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%lld\n&quot;,max(sum1,sum2));</span><br><span class="line">    printf(&quot;%lld\n&quot;,abs(sum1-sum2)+1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目链接请点击此处&quot;&gt;&lt;a href=&quot;#题目链接请点击此处&quot; class=&quot;headerlink&quot; title=&quot;题目链接请点击此处&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/description
      
    
    </summary>
    
    
      <category term="基础算法" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>树状数组加二分维护区间第k大值</title>
    <link href="http://yoursite.com/2019/11/26/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%8A%A0%E4%BA%8C%E5%88%86%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E7%AC%ACk%E5%A4%A7%E5%80%BC/"/>
    <id>http://yoursite.com/2019/11/26/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%8A%A0%E4%BA%8C%E5%88%86%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E7%AC%ACk%E5%A4%A7%E5%80%BC/</id>
    <published>2019-11-26T06:25:59.000Z</published>
    <updated>2019-11-27T10:10:37.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="http://codeforces.com/contest/1227/problem/D2" target="_blank" rel="noopener">题目链接</a></h2><p><img src="/2019/11/26/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%8A%A0%E4%BA%8C%E5%88%86%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E7%AC%ACk%E5%A4%A7%E5%80%BC/cf1227d.png" alt="cf1227d2"><br><br>按题意每一次查询和最大的p个数的最小字典序中第q个位置的数字；<br>首先我们可以把所有数字的按从大到小进行一级排序，位置按从前往后进行二级排序，那么在排序以后p个数的最大和且最小字典序就是前p个数，那么我==只要输出前面按照位置从小到大的第q个数就行了==。<br>显然，问题转化后就是求前p个数中的第q大值；<br>树状数组维护数字x是第几大，然后在有单调性的情况下选择二分第q大值就好了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e5+5;</span><br><span class="line">typedef long long ll;</span><br><span class="line">int a[N],ans[N],n,sum[N];</span><br><span class="line">struct ab&#123;</span><br><span class="line">int x,y;</span><br><span class="line">&#125;c[N];</span><br><span class="line">struct sc&#123;</span><br><span class="line">int x,y,z;</span><br><span class="line">&#125;b[N];</span><br><span class="line">bool cmp(ab p,ab q)&#123;</span><br><span class="line">if(p.x&gt;q.x) return true;</span><br><span class="line">if(p.x==q.x&amp;&amp;p.y&lt;q.y) return true;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">bool cmp1(sc p,sc q)&#123;</span><br><span class="line">return p.x&lt;q.x;</span><br><span class="line">&#125;</span><br><span class="line">void add(int x)&#123;</span><br><span class="line">while(x&lt;=n)&#123;</span><br><span class="line">//printf(&quot;%dxxx\n&quot;,x);</span><br><span class="line">sum[x]++;</span><br><span class="line">x+=(x&amp;(-x));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int get(int x)&#123;</span><br><span class="line">int ans=0;</span><br><span class="line">while(x)&#123;</span><br><span class="line">ans+=sum[x];</span><br><span class="line">x-=(x&amp;(-x));</span><br><span class="line">&#125;</span><br><span class="line">return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int t,m,i,j;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">c[i].x=a[i];</span><br><span class="line">c[i].y=i;</span><br><span class="line">&#125;</span><br><span class="line">sort(c+1,c+1+n,cmp);</span><br><span class="line">for(i=1;i&lt;=n;i++) sum[i]=0;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">scanf(&quot;%d %d&quot;,&amp;b[i].x,&amp;b[i].y);</span><br><span class="line">b[i].z=i;</span><br><span class="line">&#125;</span><br><span class="line">sort(b+1,b+1+m,cmp1);</span><br><span class="line">int p=b[m].x,q=1;</span><br><span class="line">for(i=1;i&lt;=p;i++)&#123;</span><br><span class="line">add(c[i].y);</span><br><span class="line">//printf(&quot;%dss\n&quot;,c[i].y);</span><br><span class="line">while(b[q].x==i)&#123;</span><br><span class="line">int l=1,r=n,mid=0;</span><br><span class="line">while(l&lt;r)&#123;</span><br><span class="line">mid=(l+r)/2;</span><br><span class="line">//printf(&quot;%d %d\n&quot;,mid,get(mid));</span><br><span class="line">if(get(mid)&gt;=b[q].y) r=mid;</span><br><span class="line">else l=mid+1;</span><br><span class="line">&#125;</span><br><span class="line">ans[b[q].z]=a[r];</span><br><span class="line">q++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">printf(&quot;%d\n&quot;,ans[i]);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/1227/problem/D2&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
</feed>
