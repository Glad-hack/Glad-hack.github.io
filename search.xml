<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>codeforces1307D</title>
    <url>/2020/03/24/codeforces1307D/</url>
    <content><![CDATA[<p>不得不说，这个最短路实在是有点精妙了，看题解差点没看懂。<a id="more"></a></p>
<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://codeforces.ml/problemset/problem/1307/D" target="_blank" rel="noopener">题目链接</a></h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>已知一个连通图，每条边b(无向边)长度都为一，给我们一些点，求在这些点里面任意取两点之间建一条边(长度为一)后，使得从1到n的最短距离最长！求该两点。<br>说白了就是加一条边后形成最长最短路，问在哪里加。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于这一题，毫无疑问我们先要求出该1到其他所有点的最短距离$dis1$，和n到其他所有点的最短距离$dis$。那么最短路一定是$ ans = min(dis1[a]+dis[b]+1,dis1[b]+dis[a]+1)$<br>枚举$a$与$b$找到最大的数字$ans$就好了，但是由于$a$的数字太多了，$O(n^2)$肯定不行，所以这就是该题的最难点，如何找到这个最大值！<br>首先我们可以假设</p>
<script type="math/tex; mode=display">dis1[a]+dis[b] \leq dis1[b]+dis[a]</script><p>推导发现</p>
<script type="math/tex; mode=display">dis1[a]-dis[a] \leq dis1[b]-dis[b]</script><p>也就是说只要左边的差值<strong>小于等于</strong>右边的差值，那么:<br>$ans = min(dis1[a]+dis[b]+1,dis1[b]+dis[a]+1)$化简为$ans = dis1[a]+dis[b]+1$，<br>可以发现首先对给我们的点按照$dis1[a]-dis[a]$从小到大排序后，开始从前往后枚举点，i为枚举的下标，$ans=max(x+dis[i]+1),x=max(x,dis1[x])$，$x$代表1到枚举过的点之间的最长距离。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 4e5+5;</span><br><span class="line">typedef long long ll;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id;</span><br><span class="line">&#125;ed[N];</span><br><span class="line">int p[N];</span><br><span class="line"></span><br><span class="line">int head[N],tot=0,a[N],vis[N],dis1[N],dis[N];</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">    ed[++tot].id=v;</span><br><span class="line">    ed[tot].pre=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">void dij(int x)&#123;</span><br><span class="line">    memset(dis,0x3f,sizeof(dis));</span><br><span class="line">    priority_queue&lt;pair&lt;int,int&gt; &gt;q;</span><br><span class="line">    dis[x]=0;</span><br><span class="line">    q.push(make_pair(0,x));</span><br><span class="line">    while(!q.empty())&#123;</span><br><span class="line">        int u=q.top().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        if(vis[u]) continue;</span><br><span class="line">        vis[u]=1;</span><br><span class="line">        for(int i=head[u];i;i=ed[i].pre)&#123;</span><br><span class="line">            int v=ed[i].id;</span><br><span class="line">            if(dis[v]&gt;dis[u]+1)&#123;</span><br><span class="line">                dis[v]=dis[u]+1;</span><br><span class="line">                q.push(make_pair(-dis[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m,i,j,k,t=0;</span><br><span class="line">    scanf(&quot;%d %d %d&quot;,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    for(i=1;i&lt;=k;i++) scanf(&quot;%d&quot;,&amp;a[++t]);</span><br><span class="line">    for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">        int u,v;</span><br><span class="line">        scanf(&quot;%d %d&quot;,&amp;u,&amp;v);</span><br><span class="line">        add(u,v);</span><br><span class="line">        add(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    dij(1);</span><br><span class="line">    for(i=1;i&lt;=n;i++) dis1[i]=dis[i];</span><br><span class="line">    //printf(&quot;%dss\n&quot;,dis1[n]);</span><br><span class="line">    memset(vis,0,sizeof vis);</span><br><span class="line">    dij(n);</span><br><span class="line">    int sum=2e9+9;</span><br><span class="line">    vector&lt;pair&lt;int,int&gt; &gt; dat;</span><br><span class="line">    for(i=1;i&lt;=t;i++)&#123;</span><br><span class="line">        dat.push_back(make_pair(dis1[a[i]]-dis[a[i]],a[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    sort(dat.begin(),dat.end());</span><br><span class="line">    int mm = -2e9+9,best=0;</span><br><span class="line">    for(i=0;i&lt;t;i++)&#123;</span><br><span class="line">        int x = dat[i].second;</span><br><span class="line">        best = max(best,mm+dis[x]);</span><br><span class="line">        mm = max(mm,dis1[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;,min(best+1,dis1[n]));</span><br><span class="line">    //system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://codeforces.ml/blog/entry/73953" target="_blank" rel="noopener">cf题解</a></p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的biginteger</title>
    <url>/2020/03/21/Java%E7%9A%84biginteger/</url>
    <content><![CDATA[<p>哈哈哈，终于开始Java的大数模拟，以前以为python大数好，不知为啥看了以后直接有点不相信他了(时间复杂度)，所以还是看Java吧<a id="more"></a></p>
<h2 id="1-赋值："><a href="#1-赋值：" class="headerlink" title="1.赋值："></a>1.赋值：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BigInteger a=new BigInteger(&quot;1&quot;);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BigInteger b=BigInteger.valueOf(1);</span><br></pre></td></tr></table></figure>
<h2 id="2-运算："><a href="#2-运算：" class="headerlink" title="2.运算："></a>2.运算：</h2><p>① add(); 大整数相加<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BigInteger a=new BigInteger(“23”); </span><br><span class="line">BigInteger b=new BigInteger(“34”); </span><br><span class="line">a. add(b);</span><br></pre></td></tr></table></figure></p>
<p>②subtract(); 相减<br>③multiply(); 相乘<br>④divide(); 相除取整<br>⑤remainder(); 取余<br>⑥pow(); a.pow(b)=a^b<br>⑦gcd(); 最大公约数<br>⑧abs(); 绝对值<br>⑨negate(); 取反数<br>⑩mod(); a.mod(b)=a%b=a.remainder(b); </p>
<h2 id="3-BigInteger构造函数："><a href="#3-BigInteger构造函数：" class="headerlink" title="3.BigInteger构造函数："></a>3.BigInteger构造函数：</h2><p>一般用到以下两种：<br><code>BigInteger(String val);</code><br>将指定字符串转换为十进制表示形式；<br><code>BigInteger(String val,int radix);</code><br>将指定基数的 BigInteger 的字符串表示形式转换为 BigInteger </p>
<h2 id="4-基本常量："><a href="#4-基本常量：" class="headerlink" title="4.基本常量："></a>4.基本常量：</h2><p><code>A=BigInteger.ONE</code> 1<br><code>B=BigInteger.TEN</code> 10<br><code>C=BigInteger.ZERO</code> 0 </p>
<ol>
<li><p>n.compareTo(BigInteger.ZERO)==0  //相当于n==0</p>
</li>
<li><p>if(a[i].compareTo(n)&gt;=0 &amp;&amp;a[i].compareTo(m)&lt;=0)   // a[i]&gt;=n &amp;&amp; a[i]&lt;=m </p>
</li>
<li>所有比较可以按照string比较规则来比较</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/unknownname/p/8823887.html" target="_blank" rel="noopener">biginteger</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java对象复习</title>
    <url>/2020/03/21/java%E5%AF%B9%E8%B1%A1%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>完辽，没学习的欲望了，拖了几天的总结。<a id="more"></a></p>
<h1 id="抽象类-abstract"><a href="#抽象类-abstract" class="headerlink" title="抽象类($abstract$)"></a>抽象类($abstract$)</h1><p>一个方法可以被覆写，那么如果当前类的全部方法都要被子类覆写的话，这个类我们就可以用抽象来代替。这个抽象的方法如果在它的子类里面不对该方法进行覆写的话，直接会报编译错误。<br>那么抽象类的特点：</p>
<ol>
<li>直接规范了子类的格式</li>
<li>抽象类无法实例化</li>
<li>子类的端口范围不能小于父类的端口范围</li>
<li>抽象方法不能用$private$修饰，因为抽象方法必须被子类重写，而$private$权限对于子类来说是不能访问的，所以就会产生矛盾。</li>
<li>抽象方法也不能用$static$修饰，如果用$static$修饰了，那么我们就可以直接通过类名调用了，而抽象方法压根没有主体，没有任何业务逻辑，这样就毫无意义了。</li>
<li>抽象类不能被$final$修饰，因为被修饰以后就不能被继承了。</li>
</ol>
<h1 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h1><p>当一个抽象类里面没有字段，全是抽象方法时，我们可以将这个类定义为接口。<br>也就是说，接口里面不得有任何字段，所有方法都必须是抽象方法。也因为都是抽象，所以自动省略了$public abstract$修饰语句<br>对于一个接口来说，可以同时继承多个接口。<br>当用一个具体的类实现一个接口必须要用implement，举例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    void run();</span><br><span class="line">    String getName();//自动省略public abstract</span><br><span class="line">&#125;</span><br><span class="line">class Student implements Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public Student(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(this.name + &quot; run&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="default-方法"><a href="#default-方法" class="headerlink" title="$default$方法"></a>$default$方法</h2><p>接口之中可以定义$default$方法<br>他的优点：</p>
<ol>
<li>实现类里面可以不必覆写该方法，但是也可以覆写，方便修改接口。</li>
</ol>
<p>举个例子<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Person p = new Student(&quot;Xiao Ming&quot;);</span><br><span class="line">        p.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Person &#123;</span><br><span class="line">    String getName();</span><br><span class="line">    default void run() &#123;</span><br><span class="line">        System.out.println(getName() + &quot; run&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Student implements Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public Student(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="static"><a href="#static" class="headerlink" title="$static$"></a>$static$</h1><h2 id="静态字段"><a href="#静态字段" class="headerlink" title="静态字段"></a>静态字段</h2><p>对于一个类的静态字段来说，他在这个字段里面只有一个共享空间，所有的实例都是用这一个变量。<br>举例来看<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Person ming = new Person(&quot;Xiao Ming&quot;, 12);</span><br><span class="line">        Person hong = new Person(&quot;Xiao Hong&quot;, 15);</span><br><span class="line">        ming.number = 88;</span><br><span class="line">        System.out.println(hong.number);</span><br><span class="line">        hong.number = 99;</span><br><span class="line">        System.out.println(ming.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    public int age;</span><br><span class="line"></span><br><span class="line">    public static int number;</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以发现修改了一个实例里的静态字段以后另外一个实例里的也改变了。</p>
<h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>对于一个类里面的静态方法，可以直接通过类名.方法名进行运行，但是不可以通过this.类名访问。</p>
<h2 id="接口的静态字段"><a href="#接口的静态字段" class="headerlink" title="接口的静态字段"></a>接口的静态字段</h2><p>因为$interface$是一个纯抽象类，所以它不能定义实例字段。但是，$interface$是可以有静态字段的，并且静态字段必须为$final$类型。也因为全是$final$所以我们可以省略。</p>
<h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><p>对于一个静态代码块来说，当我们调用该类的时候会自动将静态代码块运行一次，且仅运行一次。当往后运行时就不会再调用了。<br>一般使用这个功能时我们一般都是用来初始化的。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/zuotongbin/p/11717010.html" target="_blank" rel="noopener">abstract</a><br><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260451488854880" target="_blank" rel="noopener">廖雪峰</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多态</title>
    <url>/2020/03/17/Java%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<p>这个在上一篇，继承的最后一点说了一丢丢，当时还不知道就是多态，小尴尬，双倍快乐吧<a id="more"></a></p>
<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="覆写"><a href="#覆写" class="headerlink" title="覆写"></a>覆写</h2><p>子类对于父类的方法进行的修改就叫覆写(Override)。<br>覆写的方式是在子类中定义一个与父类<strong>方法名相同、返回值和参数一样</strong>的方法，就会变成覆写。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 多态</span><br><span class="line">多态是指，针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。</span><br><span class="line">**当一个子类向上转型为父类以后，那么如果父类中有方法被该子类覆写了，调用该方法是会动态调用子类中覆写的方法。**</span><br><span class="line">通过这个性质，对于同一个类的同一个方法就会出现不同的实现方式。例如以下代码：</span><br></pre></td></tr></table></figure><br>public class Main {<br>        public static void main(String[] args){<br>                Preson p1 = new Student();<br>                Preson p2 = new Teacher();<br>                p1.speak();<br>                p2.speak();<br>                p1.speak();<br>        }<br>}<br>public class Preson<br>{<br>    public int age=10;<br>    void speak() {<br>        System.out.println(“父类”);<br>    }<br>}<br>public class Student extends Preson<br>{    @Override//覆写<br>    void speak(){<br>        System.out.println(“学生”);<br>    }<br>}<br>public class Teacher extends Preson<br>{<br>    @Override//覆写<br>    void speak(){<br>        System.out.println(“老师”);<br>    }<br>}<br>```<br>同样都是Person类执行同一个方法输出却是：</p>
<blockquote>
<p>学生<br>老师<br>学生</p>
</blockquote>
<p><strong>在被子类覆写的方法里面如果想要运行父类方法，可以使用<code>super</code>关键字</strong></p>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>如果不想当前方法不被覆写，可以在方法名前加上final修饰符，就不会被重写了。<br>如果类不想被继承的话，用它就会绝育了。<br>变量用它后就不能修改了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260455778791232" target="_blank" rel="noopener">廖雪峰的java教程</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java继承</title>
    <url>/2020/03/17/Java%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<p>对于Java继承的存在意义的话，可以把代码规模减少，加快编码速度咯。正确的使用继承和多态就会出现很多不可思议的东西<a id="more"></a></p>
<h1 id="Java继承"><a href="#Java继承" class="headerlink" title="Java继承"></a>Java继承</h1><h2 id="extends"><a href="#extends" class="headerlink" title="$extends$"></a>$extends$</h2><p>继承是面向对象编程中非常强大的一种机制，它首先可以复用代码。当我们让$Student$从$Person$继承时，$Student$就获得了$Person$的所有功能，我们只需要为$Student$编写新增的功能。<br>继承的关键字是<strong>extends</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Preson</span><br><span class="line">&#123;</span><br><span class="line">    public int age=10;</span><br><span class="line">	void speak() &#123;</span><br><span class="line">		System.out.println(age);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Student extends Preson//继承Preson类</span><br><span class="line">&#123;	</span><br><span class="line">	public String meat;</span><br><span class="line">	void eat(String x)&#123;</span><br><span class="line">		System.out.println(x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Main &#123;</span><br><span class="line">        public static void main(String[] args)&#123; </span><br><span class="line">                Student p = new Student();</span><br><span class="line">                p.age = 1;</span><br><span class="line">                p.eat(&quot;Apple&quot;);</span><br><span class="line">                p.speak();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从以上代码可以看出，我们的$Student$类完全可以调用$Person$类的$speak()$方法，也可以自己写方法(譬如$eat()$方法)。<br>在OOP的术语中，我们把$Person$称为超类（super class），父类（parent class），基类（base class），把$Student$称为子类（subclass），扩展类（extended class）。</p>
<h2 id="继承树"><a href="#继承树" class="headerlink" title="继承树"></a>继承树</h2><p>可以发现上面我们的代码$Person$类是没有$extends$的。不过要注意，他还是有父类，是$Object$类，<strong>在Java里面一切不定义extends的类都有一个Object父类</strong>但是Object没有父类。<br>了解了这个以后我们来看一下继承树：<script type="math/tex">Student \rightarrow Preson \rightarrow Object</script></p>
<blockquote>
<p>注意：继承树的根是$Object$，上一个节点就是他的父类</p>
</blockquote>
<h2 id="protected"><a href="#protected" class="headerlink" title="$protected$"></a>$protected$</h2><p>继承一大特点：子类无法访问父类的$private$变量或$private$字段，这使得继承的作用被削弱了。为了让子类可以访问父类的字段，我们需要把$private$改为$protected$。原因<a href="https://www.dream-ak.top/2020/03/11/Java%E4%BF%AE%E9%A5%B0%E7%AC%A6/#more">可参考</a>。<br>因此，protected关键字可以把字段和方法的访问权限控制在继承树内部，一个protected字段和方法可以被其子类，以及子类的子类所访问。</p>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>如果父类不含有默认构造方法，那么我们需要使用$super(参数)$去自行构建。<br>含有默认构造方法的话，会自动在构造的时候加一个$super()$。</p>
<h2 id="转型"><a href="#转型" class="headerlink" title="转型"></a>转型</h2><p>对于Java的继承时我们可以对一个引用变量进行转化。<br>用代码解释一下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Student p0 =new Student();</span><br><span class="line">Preson p1 = new Preson();</span><br><span class="line">p1 = p0;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">你会发现他成功了，而且这里的p1会丢失Student类的所有方法和属性，这就是**向上转型(子类向父类转换)**，如果要恢复的话必须要**向下转型(父类向子类转换)**。</span><br><span class="line">子类向父类转化是没啥条件的，毕竟父类本身就有子类的部分属性和方法，只不过是更加抽象而已，但是向下转型是有条件的(向下转型时需要判断它是不是要转化的子类类型，不是就会报错)</span><br><span class="line">### $instanceof$</span><br><span class="line">为了防止向下转型失败，这里提供了$instanceof$关键字来判断是否可以转型。</span><br><span class="line">$instanceof$返回$Boolean$值，true代表是后面的类型，false反之。</span><br></pre></td></tr></table></figure><br>Student p1 = new Student();<br>Preson p2 = new Preson();<br>if(p2 instanceof Student){<br>        p1 = (Student) p2;<br>}<br>```<br>这样就不会报错，防止转型失败</p>
<blockquote>
<p>对于一次向上转型来说，对于父类来说，他可以使用父类的所有属性和方法，而子类中定义的所有的方法和属性是没有办法的，但是当子类中对父类方法进行覆写时他就会调用子类覆写后的方法(动态连接)，否则就是调用父类自身方法。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260454548196032" target="_blank" rel="noopener">廖雪峰的Java教程</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>二分匹配最大独立集</title>
    <url>/2020/03/12/%E4%BA%8C%E5%88%86%E5%8C%B9%E9%85%8D%E6%9C%80%E5%A4%A7%E7%8B%AC%E7%AB%8B%E9%9B%86/</url>
    <content><![CDATA[<p>最近不知为啥老想玩，干脆来打编程游戏算了。。。<a id="more"></a></p>
<h1 id="二分匹配图"><a href="#二分匹配图" class="headerlink" title="二分匹配图"></a>二分匹配图</h1><h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><blockquote>
<p>定义：<br>把一个图的顶点划分为两个不相交集 U 和V ，使得每一条边都分别连接U、V中的顶点。如果存在这样的划分，则此图为一个二分图。</p>
<p>另一个等价定义：<br>一个图里面不含有奇数条边的环。</p>
<p>匹配：一个匹配是一个边的集合，其中任意两条边都没有公共点。<br>匹配边：一个匹配中，集合里的边是匹配边。<br>匹配点：一个匹配中，集合里的所有点都是匹配点<br>未匹配边：图里的非匹配边<br>未匹配点：图里的非匹配点</p>
<p>最大匹配：一个图里面所有的匹配中，所含匹配边数最大的匹配。</p>
<p>完美匹配：当一个图里面所有点都是匹配点时就是完美匹配，显然一个完美匹配就是最大匹配，</p>
</blockquote>
<p>举例来说：如果在某一对男孩和女孩之间存在相连的边，就意味着他们彼此喜欢。是否可能让所有男孩和女孩两两配对，使得每对儿都互相喜欢呢？图论中，这就是<strong>完美匹配问题</strong>。如果换一个说法：最多有多少互相喜欢的男孩/女孩可以配对儿？这就是<strong>最大匹配问题</strong>。</p>
<h2 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h2><p>匈牙利算法：用来解决<strong>二分图</strong>最大匹配问题，时间复杂度$O(NM)$<br>给与两个定义为匈牙利算法服务</p>
<blockquote>
<p>交替路：从一个未匹配点出发，依次经过非匹配边、匹配边、非匹配边…形成的路径叫交替路。</p>
<p>增广路：从一个未匹配点出发，走交替路，如果途径另一个未匹配点（出发的点不算），则这条交替路称为增广路（agumenting path）。</p>
</blockquote>
<h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><blockquote>
<p>增广路有一个重要特点：非匹配边比匹配边多一条。因此，研究增广路的意义是改进匹配。只要把增广路中的匹配边和非匹配边的身份交换即可。由于中间的匹配节点不存在其他相连的匹配边，所以这样做不会破坏匹配的性质。交换后，图中的匹配边数目比原来多了 1 条。</p>
<p>我们可以通过不停地找增广路来增加匹配中的匹配边和匹配点。找不到增广路时，达到最大匹配（这是增广路定理）。</p>
</blockquote>
<p>在这里我只写出了dfs版本的匈牙利算法</p>
<h3 id="最大独立集-图里所有点-最大匹配点数"><a href="#最大独立集-图里所有点-最大匹配点数" class="headerlink" title="最大独立集(图里所有点-最大匹配点数)"></a>最大独立集(图里所有点-最大匹配点数)</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1068" target="_blank" rel="noopener">题目链接</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 5e5+5;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id;</span><br><span class="line">&#125;ed[N];</span><br><span class="line">int head[N],tot=0,vis[N],match[N];</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">    ed[++tot].id=v;</span><br><span class="line">    ed[tot].pre=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">bool dfs(int x)&#123;</span><br><span class="line">    vis[x]=1;</span><br><span class="line">    for (int i = head[x]; ~i; i=ed[i].pre)&#123;</span><br><span class="line">        int v =ed[i].id;</span><br><span class="line">        if(!vis[v])&#123;//不在交替路</span><br><span class="line">            vis[v]=1;//放入交替路</span><br><span class="line">            if(match[v]==-1||dfs(match[v]))&#123;//短路操作，找到第一个非匹配点</span><br><span class="line">                match[v]=x;//对边进行交换。</span><br><span class="line">                match[x]=v;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    while(scanf(&quot;%d&quot;,&amp;n)==1)&#123;</span><br><span class="line">        memset(match,-1,sizeof match);</span><br><span class="line">        memset(head,-1,sizeof head);</span><br><span class="line">        tot=0;</span><br><span class="line">        for (i = 0; i &lt; n; i++)&#123;</span><br><span class="line">            int u,v,t;</span><br><span class="line">            scanf(&quot;%d: (%d)&quot;,&amp;u,&amp;t);</span><br><span class="line">            for (j = 0; j &lt; t; j++)&#123;</span><br><span class="line">                scanf(&quot;%d&quot;,&amp;v);</span><br><span class="line">                add(u,v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int ans=0;</span><br><span class="line">        for (int i = 0; i &lt; n; i++)&#123;</span><br><span class="line">            if(match[i]==-1)&#123;</span><br><span class="line">                memset(vis,0,sizeof (int)*n);</span><br><span class="line">                if(dfs(i)) ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;,n-ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="补充定义"><a href="#补充定义" class="headerlink" title="补充定义"></a>补充定义</h2><p><strong>最小覆盖数</strong> ： 选取最少的点，使任意一条边至少有一个端点被选择<br><strong>最小路径覆盖数</strong>：对于一个 DAG（有向无环图），选取最少条路径，使得每个顶点属于且仅属于一条路径。路径长可以为 0（即单个点）。<br><strong>最大独立数(集)</strong>：选取最多的点，使任意所选两点均不相连。<br><strong>最大匹配数</strong>：最大匹配的匹配边的数目。</p>
<h2 id="补充定理"><a href="#补充定理" class="headerlink" title="补充定理"></a>补充定理</h2><p>定理1：最大匹配数 = 最小点覆盖数（这是 Konig 定理）<br>&lt;/br&gt;<br>定理2：点数 - 最大匹配数= 最大独立数<br>&lt;/br&gt;<br>定理3：最小路径覆盖数 = 顶点数 - 最大匹配数</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://oi-wiki.org/graph/bi-graph/" target="_blank" rel="noopener"><strong>oi维基</strong></a></li>
<li><a href="https://blog.csdn.net/qq_41730082/article/details/81456611" target="_blank" rel="noopener"><strong>二分图总结</strong></a></li>
<li><a href="https://www.renfei.org/blog/bipartite-matching.html" target="_blank" rel="noopener"><strong>最大匹配</strong></a></li>
</ol>
<p>第3个里面有bfs版本的匈牙利以及两个版本的速率比较，内容详细，带图。不过最后定理错了，定理参考第二个。</p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>scanner类</title>
    <url>/2020/03/11/scanner%E7%B1%BB/</url>
    <content><![CDATA[<p>在做实验时候真的尴尬，我居然把Java的输入法给忘了，我记性真的是狗啊，写一篇博客来记吧。<a id="more"></a></p>
<h1 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h1><p>首先Scanner对象属于java.util.*包里面<br>构造Scanner类对象，附属于System.in保准输入流里面。</p>
<h2 id="创建Scanner类对象"><a href="#创建Scanner类对象" class="headerlink" title="创建Scanner类对象"></a>创建Scanner类对象</h2><p>创建Scanner类对象和创建其他对象过程是一样的。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scanner  in = new Scanner(System.in);</span><br></pre></td></tr></table></figure><br>每一次要输入值的话就调用这个$in$对象就完事了</p>
<h2 id="Scanner对象的方法"><a href="#Scanner对象的方法" class="headerlink" title="Scanner对象的方法"></a>Scanner对象的方法</h2><blockquote>
<p>in.next()<br>输入字符串，从读到第一个有效字符开始，无效字符结束(包括空格，回车)</p>
<p>in.nextLine()<br>输入字符串，从键盘输入第一个字符开始，遇到回车结束</p>
<p>in.nextInt()<br>输入单个整型数字</p>
<p>in.nextFloat<br>输入单个单精度浮点型数字</p>
<p>in.nextDouble<br>输入单个双精度浮点型数字</p>
<p>in.nextLong<br>输入单个长整型数字</p>
<p>in.nextBoolean<br>输入单个布尔型变量</p>
<p>在以上方法前加单词has后可检查后面数字扫描器的下一个标记是否为指定模式<br>例如 in.hasNextInt()则为判断下一个数字是不是int型，是则返回true，否则false；</p>
</blockquote>
<p>in.close()关闭扫描器</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.runoob.com/manual/jdk1.6/" target="_blank" rel="noopener">java的API文档</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>单调栈</title>
    <url>/2020/03/11/%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    <content><![CDATA[<p>这个题目方法貌似很多，但是我在这里介绍一个方法目前已知最快的，利用单调栈！<a id="more"></a></p>
<h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a><a href="https://oi-wiki.org/ds/monotonous-stack/" target="_blank" rel="noopener">单调栈</a></h1><p>不懂请点击上面链接学习，我就不介绍什么是单调栈了。</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="http://39.105.62.44/web/problem.php?id=1035" target="_blank" rel="noopener">题目</a></h2><p>可以到上面链接提交测试。</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>已知一个长度为n的数组，在其中找一个长度为m的子序列，规则如下：<br>首先第一个数字尽量大，然后第二个数字尽量大，第三个数字也要尽量大，等等…. </p>
</blockquote>
<h2 id="思想和解法"><a href="#思想和解法" class="headerlink" title="思想和解法"></a>思想和解法</h2><p>首先按照题意来，我们先求第一个尽量大的值，为了让他能找到m个数字，我们先求1~n-m+1的最大值，那么这个值就会是第一个值，第二个值就是在第一个值的位置到n-m+2的最大值，依次类推，求出所有。<br>可以发现这是一个暴力解法，复杂度是$O(n^2)$</p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>我们利用单调栈实现一个单调不上升栈，那么第一个数就是当栈顶下标到n-m+1时的栈底值。把栈底退出(这个操作用数组模拟吧)，第二个数就是栈顶下标到n-m+2的栈底值，以此类推！</p>
<p>解释一下：因为单调不上升，那么栈底一定最大，且栈内数字顺序没变！符合题意，当把栈底退出以后第二个值就是栈底的下标到n-m+1的最大值咯。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 1e5+5;</span><br><span class="line">int sta[N],a[N];</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    while (scanf(&quot;%d %d&quot;,&amp;n,&amp;m)==2)&#123;</span><br><span class="line">        for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        int l = 0, r = 0;   </span><br><span class="line">        for(i=1;i&lt;=n-m;i++)&#123;</span><br><span class="line">            while(l&lt;r&amp;&amp;a[i]&gt;sta[r]) r--;</span><br><span class="line">            sta[++r] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        for(i=n-m+1;i&lt;=n;i++)&#123;</span><br><span class="line">            while(l&lt;r&amp;&amp;a[i]&gt;sta[r]) r--;</span><br><span class="line">            sta[++r] = a[i];</span><br><span class="line">            l++;</span><br><span class="line">            printf(&quot;%d%c&quot;,sta[l],l==m?&apos;\n&apos;:&apos; &apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="相同题型"><a href="#相同题型" class="headerlink" title="相同题型"></a>相同题型</h2><p><a href="https://nanti.jisuanke.com/t/39614" target="_blank" rel="noopener">双倍快乐</a>,单调栈的大于改小于就完事了，数据很大，卡O(nlogn)!.<br><a href="https://leetcode-cn.com/problems/create-maximum-number/solution/dan-diao-zhan-by-powcai/" target="_blank" rel="noopener">秃头快乐</a></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java修饰符</title>
    <url>/2020/03/11/Java%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    <content><![CDATA[<p>听课听了一会，发现Java对于修饰符的用途过多，先来了解一下。<a id="more"></a><br>写在前面：本文来自对于<a href="https://www.runoob.com/java/java-modifier-types.html#protected-desc" target="_blank" rel="noopener">这篇文章</a>文章的理解</p>
<h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><p>修饰符分为一下两种：</p>
<ol>
<li>访问修饰符</li>
<li>非访问修饰符</li>
</ol>
<h2 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h2><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">修饰符</th>
<th style="text-align:center">当前类</th>
<th style="text-align:center">同一包</th>
<th style="text-align:center">子孙类(同一包)</th>
<th style="text-align:center">子孙类(不同包)</th>
<th style="text-align:center">其他包</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">public</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">protected</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y/N(<a href="https://www.runoob.com/java/java-modifier-types.html#protected-desc" target="_blank" rel="noopener">解释请看</a>)</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:center">default</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:center">private</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
</tbody>
</table>
</div>
<h2 id="非访问控制修饰符"><a href="#非访问控制修饰符" class="headerlink" title="非访问控制修饰符"></a>非访问控制修饰符</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><blockquote>
<p>静态变量：<br>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p>
<p>静态方法：<br>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p>
</blockquote>
<h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><blockquote>
<p>final 变量<br>final 表示”最后的、最终的”含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。</p>
</blockquote>
<p>实践部分：当定义final以后再对final变量修改值编译器会报错！</p>
<blockquote>
<p>final 方法<br>父类中的 final 方法可以被子类继承，但是不能被子类重写。<br>声明 final 方法的主要目的是防止该方法的内容被修改。</p>
</blockquote>
<h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><blockquote>
<p>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</p>
<p>一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。</p>
<p>抽象类可以包含抽象方法和非抽象方法。</p>
</blockquote>
<h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><blockquote>
<p>抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。</p>
<p>抽象方法不能被声明成 final 和 static。</p>
<p>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。</p>
<p>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。</p>
</blockquote>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>transient 修饰符<br>volatile 修饰符<br>synchronized 修饰符</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java对象</title>
    <url>/2020/03/11/Java%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>听课<a id="more"></a></p>
<h1 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h1><h2 id="Java面向对象的基本组成"><a href="#Java面向对象的基本组成" class="headerlink" title="Java面向对象的基本组成"></a>Java面向对象的基本组成</h2><ol>
<li>Java类及类的成员：属性、方法、构造器；代码块、内部类</li>
<li>面向对象三大特征：封装、继承、多态(抽象)</li>
<li>关键字：this、super、static、final、abstract、interface、package、import…</li>
</ol>
<h2 id="类和对象："><a href="#类和对象：" class="headerlink" title="类和对象："></a>类和对象：</h2><p>类是对一类事物共同特点的统一，而对象就是类的实例。(就像水果和苹果一样)<br>比如：手机需要充电，手机可以打电话，等等都是这个手机就是一个类，华为手机就是一个对象。</p>
<h3 id="类的代码定义格式"><a href="#类的代码定义格式" class="headerlink" title="类的代码定义格式"></a>类的代码定义格式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[修饰符] class 类名 [父类名] [implements 接口名] &#123;</span><br><span class="line">    //类体,包括属性和方法</span><br><span class="line">    //属性</span><br><span class="line">    [修饰符] 数据类型 变量名 [ = 值]</span><br><span class="line">    //方法</span><br><span class="line">    [修饰符] [返回值] 方法名([参数类型 参数名1]，[参数类型 参数名2]...)&#123;</span><br><span class="line">        方法体</span><br><span class="line">        return 返回值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>一个类不写构造方法时，类会默认一个<code>public Preson()</code>构造方法<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类名 对象名 = new 类名();</span><br></pre></td></tr></table></figure></p>
<p>在创建对象实例时就把内部字段全部初始化为合适的值时我们需要自定义构造方法。</p>
<h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>在创建类的时候我们同时定义一个方法，同时传入要定义的值，完成初始化<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">        public static void main(String[] args)&#123;</span><br><span class="line">                Preson p = new Preson(18);</span><br><span class="line">                Preson q = new Preson(28);</span><br><span class="line">                p.speak();</span><br><span class="line">                q.speak();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Preson&#123;</span><br><span class="line">    //属性</span><br><span class="line">    private int age;</span><br><span class="line">    public preson(int age)&#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void speak()&#123;</span><br><span class="line">        System.out.println(this.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上就可以自定义构造方法了，但是同时也会废弃默认的<code>Preson p = new Preson()</code>构造方法，想要保存的话，我们可以写两个构造方法。如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类名 对象名 = new 类名();</span><br></pre></td></tr></table></figure></p>
<p>在创建对象实例时就把内部字段全部初始化为合适的值时我们需要自定义构造方法。</p>
<h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><p>在创建类的时候我们同时定义一个方法，同时传入要定义的值，完成初始化<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">        public static void main(String[] args)&#123;</span><br><span class="line">                Preson p = new Preson(18);</span><br><span class="line">                Preson q = new Preson();</span><br><span class="line">                p.speak();</span><br><span class="line">                q.speak();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Preson&#123;</span><br><span class="line">    //属性</span><br><span class="line">    private int age = -18;</span><br><span class="line">    public Preson(int age)&#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    public Preson()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public void speak()&#123;</span><br><span class="line">        System.out.println(this.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>在一个类中，我们可以定义多个方法。如果有一系列方法，它们的功能都是类似的，只有参数有所不同，那么，可以把这一组方法名做成同名方法。<br>就像如下代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">        public static void main(String[] args)&#123;</span><br><span class="line">                Preson p = new Preson();</span><br><span class="line">                Preson q = new Preson();</span><br><span class="line">                p.speak(18);</span><br><span class="line">                q.speak(&quot;小明&quot;);</span><br><span class="line">                p.speak();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Preson&#123;</span><br><span class="line">    //属性</span><br><span class="line">    public int age = 108;</span><br><span class="line">    public String name;</span><br><span class="line">    public void speak(int age)&#123;</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line">    public void speak(String name)&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">    public void speak()&#123;</span><br><span class="line">        System.out.println(age+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>speak方法名就出现了三次，只是各自的参数不同，这就叫方法重载。<br>它存在的意义是让功能类似的方法名字相同，利于记忆，调用更简单。  </p>
<p>对于一个变量来说，如果他定义在类里面会自动赋初值0，存储在堆里面，如果在方法体里面定义的话，必须手动赋值，且存储在栈里面</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯校赛第九题</title>
    <url>/2020/03/10/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E8%B5%9B%E7%AC%AC%E4%B9%9D%E9%A2%98/</url>
    <content><![CDATA[<p>去年蓝桥杯炸了，如果今天省赛，我可能又炸了。。。<a id="more"></a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/2020/03/10/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E8%B5%9B%E7%AC%AC%E4%B9%9D%E9%A2%98/1.png" alt="1"><br>是我凭记忆复现的，链接在这里<a href="http://39.105.62.44/web/problem.php?id=1005" target="_blank" rel="noopener">第九题</a></p>
<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>数据很小，所以第一想法直接把答案全部按照深度优先搜索跑出来，保存下来，然后再交，O(1)输出！<br>深度优先搜索写法：<br>因为每一个数字只与前两个数字有关，那么我们只要每计算一个答案就把这两个数字的答案记录下来，以后在遇到这两个数字就直接使用就好了。(可以学一下记忆化搜索)</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>使用vis二维数组来保存前两个数字，如果vis[x][y]为0的话就没有用过，为0直接就加上就好了<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">//#include&lt;windows.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 1005;</span><br><span class="line">int vis[N][N],a[N];</span><br><span class="line">FILE *fp1 = fopen(&quot;D://program//code//acm//oj//testin.txt&quot;,&quot;w+&quot;);</span><br><span class="line">FILE *fp2 = fopen(&quot;D://program//code//acm//oj//testout.txt&quot;,&quot;w+&quot;);</span><br><span class="line">int dfs(int x,int y)&#123;</span><br><span class="line">	int ans=0;//求前面两个数字为能产生的数列数量</span><br><span class="line">	for(int i=1;i&lt;abs(y-x);i++)&#123;</span><br><span class="line">		if(vis[y][i]==0)&#123;//没有用过则计算出答案并保存</span><br><span class="line">			vis[y][i]=dfs(y,i);//计算呢前前一个数字是i前面第二个数字是y的数列数。</span><br><span class="line">			ans=(ans+vis[y][i])%10000;</span><br><span class="line">		&#125;</span><br><span class="line">		else ans=(ans+vis[y][i])%10000;</span><br><span class="line">	&#125;</span><br><span class="line">	return ans+1;//返回数列值并加上当前值</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">	int i,j,k,n,m;</span><br><span class="line">	for(i=1;i&lt;=1000;i++)&#123;//计算以i开始的数列数量</span><br><span class="line">		int ans=0;</span><br><span class="line">		for(j=1;j&lt;=i;j++)&#123;</span><br><span class="line">			if(vis[i][j]==0)&#123;</span><br><span class="line">				vis[i][j]=dfs(i,j);</span><br><span class="line">				ans=(ans+vis[i][j])%10000;</span><br><span class="line">			&#125;</span><br><span class="line">			else&#123;</span><br><span class="line">				ans=(ans+vis[i][j])%10000;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;%d\n&quot;,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面时间复杂度为<br>因为一个数字开始的话数量与前两个数字有关所以复杂度为O($n^2$)，n个数字是O($n^3$)<br>打出所有答案后复制到另一个程序输出就好了。</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int a[1006]=&#123;1,2,4,7,14,26,53,106,220,452,946,1967,4128,8638,8144,8068,26,8127,3542,3277,3278,7643,5433,5774,8217,4846,687,3097,6887,3556,4840,3454,5378,722,2230,767,1447,1839,4776,7618,7831,6222,5236,7802,5696,1835,1102,9537,1605,1227,3034,2159,1613,6811,3941,6794,5960,4903,75,2158,349,4258,5189,4717,2894,4193,2890,258,2928,6125,2913,1482,8419,7244,1652,3440,2138,9272,4714,3333,3543,8834,6763,9180,1803,4631,6307,9056,3170,8339,6213,1176,3258,272,4257,1893,8020,3682,9531,6961,4145,3086,3455,9057,1346,5768,6907,247,2450,4732,8653,8229,842,3346,9671,7106,3561,4952,9539,1791,6208,6083,8838,7474,6854,198,7300,8219,5912,8884,3976,9650,4821,7317,9720,5572,3834,6326,2281,34,8409,28,445,8155,9846,9944,2504,3954,1639,7243,8502,6926,1609,7449,3769,5695,6683,7531,6275,5827,6184,1982,736,9718,2777,7688,6626,7456,961,5556,7573,6886,4543,3957,2859,4666,9795,305,9052,5350,9827,5445,6970,2599,7566,2848,2987,5179,1537,2392,6375,9621,7376,3301,1357,6545,7838,9390,4284,2631,1814,2566,7666,1110,5694,7595,5000,1290,4735,5994,9401,6475,9012,5877,2867,7912,3509,5505,885,7490,5622,4374,8721,5134,8788,5430,3869,9852,5762,75,5964,262,5565,1599,7525,5388,8612,1143,7938,7580,2953,7901,5629,1456,9852,5216,965,3739,7879,1212,9029,9263,9609,1926,8151,1997,6298,5125,5715,4864,3852,604,7652,313,6248,4077,3875,3816,7046,9525,3798,6959,9366,2216,4463,6546,6367,614,9477,3176,4098,7162,7535,4696,749,2686,8212,9050,255,1389,287,1086,9414,9897,2293,31,9121,4682,7084,8951,834,1051,2236,3712,6426,8642,185,785,8162,6015,658,8923,5741,2551,7629,2095,8882,7695,5629,8684,5116,6362,7701,9441,9403,1108,4395,5688,9466,953,9191,4967,7236,6020,3465,8165,872,4530,3353,7859,1422,1504,6366,126,1246,1530,1777,8970,4590,2195,6920,9086,689,2163,6035,4961,2055,7699,4121,3971,1824,3707,4405,854,6088,6971,1679,1779,7097,5696,2449,2104,3264,796,8595,6183,26,5597,7295,5926,9039,4550,9601,5959,3244,7451,5641,2343,6587,3755,4361,3890,446,8187,1979,7000,7094,8658,1647,6090,8332,4407,4570,2340,3057,5029,5424,2736,4844,2771,5782,5912,3745,2504,2782,7247,1393,5403,7175,9903,1723,7600,7021,4566,9778,5188,46,8542,7915,5043,4983,519,480,8199,1141,73,9316,6248,966,3218,6614,6974,5078,9775,7263,6263,7267,1947,5357,286,674,3876,1985,4731,1850,512,1493,5310,5443,4183,5963,8642,1389,6320,4264,9565,7348,4378,6192,1300,3393,4794,8323,6063,9651,9368,7899,9053,4933,5140,5604,9114,9299,7603,2485,884,7313,4139,9883,1405,9843,7419,1483,2031,8610,4150,3313,6257,3790,1688,994,1357,9660,583,5735,1548,7156,9678,8047,3617,9611,7966,7764,5177,7716,4206,7985,6989,6318,5854,8292,9639,687,370,3252,7104,5813,758,8219,3809,2506,3605,9340,3559,4118,4757,8229,4258,944,1596,4940,622,5832,1270,6948,1744,1125,7895,9348,7601,7426,1975,9611,3722,4143,4979,7904,3221,3817,5755,1798,6549,3463,3190,201,6894,6209,3488,670,7643,7020,6164,5583,5036,6309,8644,7961,3465,7795,1486,4535,3111,5252,4049,4253,7515,1517,6148,2438,1296,8826,7924,7761,9126,6951,7110,7549,1170,8533,793,1633,6451,6261,5887,8694,6447,8993,6398,1289,2925,2362,3935,6744,1358,1743,3937,9942,3696,1601,8295,3086,2595,9554,8566,1465,2109,3474,3950,9216,8948,2020,3536,943,4934,8377,6171,1243,3525,259,3001,4205,4548,4754,2365,8630,4690,7872,5131,3995,2672,728,6532,9785,9379,5865,4774,6660,3721,4451,9085,4771,8008,857,9737,5630,4040,3106,5997,4152,8542,3992,3294,5064,2656,5247,635,1521,3026,1502,9396,2171,7188,2425,9758,2640,8648,9454,274,9471,8972,9301,911,6023,4155,126,7802,2948,5675,6313,69,1374,9925,3685,6901,432,1884,4803,8173,9638,3626,695,4286,3836,8670,8834,1444,5187,6281,2482,8801,7656,9066,5138,5160,9857,906,5235,7243,5281,5103,5826,5023,3637,5607,1204,5697,3422,1192,8753,6087,2083,3256,8201,9853,1886,3953,4732,7351,6387,9148,2299,4843,3891,3572,874,9873,1235,7323,8860,3439,113,5132,6521,1234,7427,4062,1342,2480,641,8802,9788,5336,3649,1301,3268,749,1628,9202,2689,3284,9170,5252,1577,1705,5640,2185,2252,4943,271,5117,8699,2743,8221,2119,3851,701,2740,4247,7037,9764,4445,5848,6135,6166,5328,2584,1131,3005,8817,2783,7749,6112,5567,9688,2549,7929,8650,60,1896,3998,7345,3352,8990,1143,873,1191,5821,9485,5249,3086,8016,9319,4139,3566,8871,7528,7873,4117,1085,7064,8222,5947,4447,1326,5206,12,9703,5711,3951,219,6966,3168,2372,9603,9092,1904,1010,2704,2106,7568,3410,296,6825,9781,637,4465,7953,6861,2142,2035,9743,1921,3051,7424,7112,7676,5245,9531,2284,4498,6423,6977,3106,1367,5696,2003,1291,3025,76,3147,9094,4580,5097,7390,8637,5853,359,3153,4957,6635,5721,3353,2266,3481,7432,3020,7330,1172,5285,1525,2928,5331,8856,2163,5169,1465,4439,1876,7446,2192,5577,726,6599,352,3645,7733,8331,5447,8017,5017,7287,6602,7248,6323,4195,9617,2263,4013,450,4073,6131,3569,9019,1858,9827,8118,4972,7422,9666,5760,9213,2817,7952,3948,8683,3645,6402,3264,1919,9276,2519,190,766,8940,3413,2644,8048,83,9724,7009,3777,9663,2483,5752,4578,8951,5902,2170,9967,894,8556,6049,7254,2746,8962,8317,6848,767,7907,1028,9458,6881,4978,6717,8210,3835,1064,7434,746,9449&#125;;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int x;</span><br><span class="line">    while(scanf(&quot;%d&quot;,&amp;x)==1)&#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,a[x-1]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="我的小结"><a href="#我的小结" class="headerlink" title="我的小结"></a>我的小结</h2><p>emmmm，手机浸水，一边比赛一边晾手机果然写出bug了，第7题血亏！还是不能飘啊。</p>
]]></content>
      <categories>
        <category>思维</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库操作</title>
    <url>/2020/03/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>最近搭建了一个服务器，需要管理数据库了，嗯，其实还有是我数据库也开了课，就一起学吧。这一片单纯介绍数据库常见常用命令<a id="more"></a></p>
<h1 id="数据库常用命令"><a href="#数据库常用命令" class="headerlink" title="数据库常用命令"></a>数据库常用命令</h1><h2 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h2><ol>
<li>mysql -h 主机地址 -u 用户名 -p 用户密码<br>如果是本地登录则不需要-h的主机地址<br>如下是Linux服务器打开方式，本地登录没有h<img src="/2020/03/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/登录.png" alt="登录"><br>windows打开方式：<br>先要进入如图这个目录，不进入的话该命令会无效的，我就不细说，大家应该都是一个目录里面。<br><img src="/2020/03/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/windows.png" alt="1"><h2 id="退出MySQL"><a href="#退出MySQL" class="headerlink" title="退出MySQL"></a>退出MySQL</h2>输入exit然后回车就完事了<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2>退出MySQL以后在同一个目录使用如下命令</li>
<li>mysqlsdmin -u root -p密码 password<br>-p密码那里是连起来的，直接回车如图<br><img src="/2020/03/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/修改密码.png" alt="1"><h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2>首先写在前面：</li>
<li>对于一个数据库操作命令都是以一个英文分号”;”结束。</li>
</ol>
<p>如果你输入命令错误，可以选择先输入一个分号，让他执行错误命令，重新输入。</p>
<h3 id="库的命令"><a href="#库的命令" class="headerlink" title="库的命令"></a>库的命令</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">create database name</td>
<td style="text-align:center">创建数据库</td>
</tr>
<tr>
<td style="text-align:center">use database name</td>
<td style="text-align:center">选择数据库</td>
</tr>
<tr>
<td style="text-align:center">show databases</td>
<td style="text-align:center">显示所有数据库</td>
</tr>
<tr>
<td style="text-align:center">drop database name</td>
<td style="text-align:center">直接删除数据库，不提醒</td>
</tr>
</tbody>
</table>
</div>
<p>具体操作如下：<img src="/2020/03/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/base.png" alt="操作"></p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>这个由于太多我只做简单常用介绍，如想详细了解，<a href="https://www.runoob.com/mysql/mysql-data-types.html" target="_blank" rel="noopener">点击</a>。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">字节长度</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">4字节</td>
<td style="text-align:center">整数</td>
</tr>
<tr>
<td style="text-align:center">bigint</td>
<td style="text-align:center">8字节</td>
<td style="text-align:center">整数</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">8字节</td>
<td style="text-align:center">双精度浮点型</td>
</tr>
<tr>
<td style="text-align:center">date</td>
<td style="text-align:center">3字节</td>
<td style="text-align:center">日期值(格式：YYYY:MM:DD)</td>
</tr>
<tr>
<td style="text-align:center">time</td>
<td style="text-align:center">3字节</td>
<td style="text-align:center">时间值(HH:MM:SS)</td>
</tr>
<tr>
<td style="text-align:center">year</td>
<td style="text-align:center">1字节</td>
<td style="text-align:center">年份值(YYYY)</td>
</tr>
<tr>
<td style="text-align:center">datetime</td>
<td style="text-align:center">8</td>
<td style="text-align:center">混合日期和时间值(YYYY:MM::DD HH:MM:SS)</td>
</tr>
<tr>
<td style="text-align:center">char</td>
<td style="text-align:center">0-255字节</td>
<td style="text-align:center">定长字符串</td>
</tr>
<tr>
<td style="text-align:center">varchar</td>
<td style="text-align:center">0-65535字节</td>
<td style="text-align:center">变长字符串</td>
</tr>
</tbody>
</table>
</div>
<h3 id="表的命令"><a href="#表的命令" class="headerlink" title="表的命令"></a>表的命令</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">create table name(变量 数据类型)</td>
<td style="text-align:center">创建表</td>
</tr>
<tr>
<td style="text-align:center">drop table name</td>
<td style="text-align:center">删除表</td>
</tr>
<tr>
<td style="text-align:center">show tables</td>
<td style="text-align:center">查看当前选定数据库包含的表格</td>
</tr>
</tbody>
</table>
</div>
<h4 id="数据添加"><a href="#数据添加" class="headerlink" title="数据添加"></a>数据添加</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into 表名 (字段1，字段2，...) value (值1，值2，...)</span><br></pre></td></tr></table></figure>
<h4 id="数据修改"><a href="#数据修改" class="headerlink" title="数据修改"></a>数据修改</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update 表名 set (字段1 = 值，字段2 = 值，...) where ...</span><br></pre></td></tr></table></figure>
<h4 id="数据删除"><a href="#数据删除" class="headerlink" title="数据删除"></a>数据删除</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from 表名 where ...</span><br></pre></td></tr></table></figure>
<h4 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from 表名 where ...</span><br></pre></td></tr></table></figure>
<p>解释一下，这一句，其中的$*$是通配符，它会显示所有列，如果只要显示部分列的话，可以将其改为需要的列名。</p>
<h4 id="where-语句"><a href="#where-语句" class="headerlink" title="$where$语句"></a>$where$语句</h4><p>$where$语句类似于C语言的$if$具有判断功能，其中的逻辑符号如下<br>|符号|意义|<br>|:-:|:-:|<br>|not|非|<br>|or|或|<br>|and|且|</p>
<p>语句执行的优先级(无括号)：$not&gt;and&gt;or$<br>同时除了一般的大于、小于、等于的判断语句外增加了一个like语句，可以判断相似。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>python文件操作</title>
    <url>/2020/03/06/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>最近刷题刷的一堆exe文件，实在太多了，我就写了一个脚本操作，用来删除一个文件目录下的所有exe文件，嗯，因为是电脑，所以删错了不管，用的时候再小心吧。<a id="more"></a></p>
<h1 id="文件的一些函数"><a href="#文件的一些函数" class="headerlink" title="文件的一些函数"></a>文件的一些函数</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">参数</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>os.getcwd()</strong></td>
<td style="text-align:center">无参数</td>
<td style="text-align:center">返回当前工作目录</td>
</tr>
<tr>
<td style="text-align:center"><strong>os.chdir()</strong></td>
<td style="text-align:center">地址</td>
<td style="text-align:center">修改当前工作目录到指定文件地址</td>
</tr>
<tr>
<td style="text-align:center"><strong>os.listdir()</strong></td>
<td style="text-align:center">地址</td>
<td style="text-align:center">查看当前目录下所有文件</td>
</tr>
<tr>
<td style="text-align:center"><strong>os.makedirs()</strong></td>
<td style="text-align:center">新建文件夹名称</td>
<td style="text-align:center">新建文件夹</td>
</tr>
<tr>
<td style="text-align:center"><strong>os.remove(path)</strong></td>
<td style="text-align:center">路径</td>
<td style="text-align:center">删除文件</td>
</tr>
<tr>
<td style="text-align:center"><strong>os.rmdir(path)</strong></td>
<td style="text-align:center">路径</td>
<td style="text-align:center">删除空目录，非空目录报错</td>
</tr>
<tr>
<td style="text-align:center"><strong>os.path.join()</strong></td>
<td style="text-align:center">要添加的文件路径(字符串)</td>
<td style="text-align:center">构建一个在所有系统都能运行的文件路径</td>
</tr>
<tr>
<td style="text-align:center"><strong>os.path.abspath()</strong></td>
<td style="text-align:center">路径(可以为相对路径’..’，’.’)</td>
<td style="text-align:center">返回绝对路径</td>
</tr>
<tr>
<td style="text-align:center"><strong>os.path.relpath(path,start)</strong></td>
<td style="text-align:center">start：一个路径，path：路径</td>
<td style="text-align:center">返回从start到path的相对路径，没有start参数时默认当前工作目录</td>
</tr>
<tr>
<td style="text-align:center"><strong>os.path.dirname()</strong></td>
<td style="text-align:center">路径</td>
<td style="text-align:center">返回最后一个斜杠以前的所有字符串</td>
</tr>
<tr>
<td style="text-align:center"><strong>os.path.basename()</strong></td>
<td style="text-align:center">路径</td>
<td style="text-align:center">返回最后一个斜杠以后的字符串</td>
</tr>
<tr>
<td style="text-align:center"><strong>os.path.getsize(path)</strong></td>
<td style="text-align:center">路径</td>
<td style="text-align:center">返回该路径下指定文件的字节数</td>
</tr>
<tr>
<td style="text-align:center"><strong>os.path.exists(path)</strong></td>
<td style="text-align:center">路径</td>
<td style="text-align:center">返回bool值表示路径是否存在</td>
</tr>
<tr>
<td style="text-align:center"><strong>os.path.isdir(path)</strong></td>
<td style="text-align:center">路径</td>
<td style="text-align:center">返回bool值表示路径是否存在且为目录</td>
</tr>
<tr>
<td style="text-align:center"><strong>os.path.isfile(path)</strong></td>
<td style="text-align:center">路径</td>
<td style="text-align:center">返回bool值表示路径是否存在且为文件</td>
</tr>
<tr>
<td style="text-align:center">os.path.rename(str1,str2)</td>
<td style="text-align:center">俩路径</td>
<td style="text-align:center">重命名str1文件位str2文件</td>
</tr>
<tr>
<td style="text-align:center"><strong>f = open(path,x)</strong></td>
<td style="text-align:center">文件路径,x为赋予权限</td>
<td style="text-align:center">打开文件，且f为文件引用<warn></warn></td>
</tr>
<tr>
<td style="text-align:center"><strong>f.read()</strong></td>
<td style="text-align:center">无参数</td>
<td style="text-align:center">返回一个字符串表示文件内容</td>
</tr>
<tr>
<td style="text-align:center"><strong>f.readline</strong></td>
<td style="text-align:center">无参数</td>
<td style="text-align:center">返回一个list表示文件每一行</td>
</tr>
<tr>
<td style="text-align:center"><strong>f.close</strong></td>
<td style="text-align:center">无参数</td>
<td style="text-align:center">关闭文件</td>
</tr>
</tbody>
</table>
</div>
<h2 id="作死之旅"><a href="#作死之旅" class="headerlink" title="作死之旅"></a>作死之旅</h2><p>这是我对于py做的第一个小脚本，使用了类与对象，各种文件操作，学习了一波迭代器，生成器，和异常处理，差不多是对于py的一次小应用了。</p>
<p>对于这个脚本的话我这里功能是：</p>
<ol>
<li>能删除指定后缀文件，只要后缀相同一定删除，无情^-^</li>
<li>能像linux一样操作但是操作指令不同，支持绝对路径与相对路径的输入</li>
<li>可以随时查看当前目录的文件</li>
<li>随时退出</li>
</ol>
<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><ol>
<li>递归遍历判断是否为目录</li>
<li>用os.path.abspath把相对路径转成绝对路径</li>
<li>os.listdir</li>
<li>break</li>
</ol>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>我感觉这个删除脚本十分好用，反正我喜欢，还增加了我对于异常处理的能力，其实是学习了一下，对于迭代器的使用，（一开始不想要递归，毕竟它代价有点大，就学了一下，发现我用不上，菜了）对于文件命令的操作，字符串的处理方式也得到了锻炼，对于py的脚本以后就要开始写其他的了（例如excel操作）</p>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">class Flie(object):</span><br><span class="line">    def list(self):</span><br><span class="line">        print(&quot;当前工作目录：&quot;+os.getcwd())</span><br><span class="line">        file = os.listdir(os.getcwd())</span><br><span class="line">        print(&apos;\n&apos;.join(file))</span><br><span class="line">        pass</span><br><span class="line">    def goto(self, path):</span><br><span class="line">        os.chdir(path)</span><br><span class="line">        pass</span><br><span class="line">    def pathname(self,name):</span><br><span class="line">        print(&quot;请输入你将要进入的文件目录&quot;)</span><br><span class="line">        names = name.split(&quot;\\&quot;)</span><br><span class="line">        x = &apos;\\&apos;.join(names)</span><br><span class="line">        pathnames = os.path.join(x)</span><br><span class="line">        if os.path.isdir(pathnames):</span><br><span class="line">            return pathnames</span><br><span class="line">            pass</span><br><span class="line">        else :</span><br><span class="line">            print(&quot;不存在该目录，请重新尝试^-^&quot;)</span><br><span class="line">        pass</span><br><span class="line">    def erease(self, pathnam,format):</span><br><span class="line">        #os.chdir(pathname)</span><br><span class="line">        pathname=os.path.abspath(pathnam)</span><br><span class="line">        for i in os.listdir(pathname):</span><br><span class="line">            print(pathname)</span><br><span class="line">            pathname1 = os.path.join(pathname,i)</span><br><span class="line">            if os.path.isdir(pathname1):</span><br><span class="line">                self.erease(pathname1,format)</span><br><span class="line">            else:</span><br><span class="line">                file1 = i.split(&apos;.&apos;)</span><br><span class="line">                if file1[-1]==format:</span><br><span class="line">                    try:</span><br><span class="line">                        os.remove(pathname1)</span><br><span class="line">                    except FileNotFoundError as identifier:</span><br><span class="line">                        print(&quot;当前错误删除路径&quot;+os.path.join(os.getcwd(),pathname1))</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    print(&quot;准备完毕，请输入：&quot;)</span><br><span class="line">    os.chdir(&apos;C:\\&apos;)</span><br><span class="line">    print(os.getcwd())</span><br><span class="line">    x = Flie()</span><br><span class="line">    flag  = True</span><br><span class="line">    while flag:</span><br><span class="line">        operate = input().split()</span><br><span class="line">        op = operate[0]</span><br><span class="line">        if op == &quot;goto&quot;:</span><br><span class="line">            name = x.pathname(str(operate[1]))</span><br><span class="line">            try:</span><br><span class="line">                x.goto(name)</span><br><span class="line">            except TypeError as identifier:</span><br><span class="line">                continue</span><br><span class="line">        elif op == &quot;del&quot;:</span><br><span class="line">            name = x.pathname(str(operate[1]))</span><br><span class="line">            print(os.path.getsize(name))</span><br><span class="line">            x.erease(name,operate[2])</span><br><span class="line">            pass</span><br><span class="line">        elif op == &quot;cls&quot;:</span><br><span class="line">            os.system(&apos;cls&apos;)</span><br><span class="line">            print(&quot;当前文件位置：&quot;+os.getcwd())</span><br><span class="line">        elif op == &quot;list&quot;:</span><br><span class="line">            x.list()</span><br><span class="line">        elif op == &quot;help&quot;:</span><br><span class="line">            print(&quot;goto + path：表示进入路径&quot;)</span><br><span class="line">            print(&quot;del + path + str：表示删除该路径下某个特定的文件后缀&quot;)</span><br><span class="line">            print(&quot;cls：清屏&quot;)</span><br><span class="line">            print(&quot;list：打印整个目录下文件&quot;)</span><br><span class="line">            print(&quot;quit：程序退出&quot;)</span><br><span class="line">        elif op == &quot;quit&quot;:</span><br><span class="line">            break</span><br><span class="line">        else :</span><br><span class="line">            print(&quot;输入格式错误，请输入正确格式或输入help寻求帮助&quot;)</span><br><span class="line">            pass</span><br></pre></td></tr></table></figure>
<p>有漏洞可以提出来，我已经成功的删除了我刷题时产生的所有exe文件了，嘿嘿嘿。有个缺陷是有可能进不了文件而报错，我是没有去弄这个异常的，有大佬经过时可否提点我一下？</p>
]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路径图</title>
    <url>/2020/03/04/1320B/</url>
    <content><![CDATA[<p>题意给我们一个图和一条路径询问从当前点到下一个点是否为最短路径上的一个点！<a id="more"></a></p>
<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://codeforces.ml/contest/1320/problem/B" target="_blank" rel="noopener">题目链接</a></h1><h2 id="思路和解法"><a href="#思路和解法" class="headerlink" title="思路和解法"></a>思路和解法</h2><blockquote>
<p>首先其余点到达定点的最短路怎么求:<br>我们直接反向建图，求定点到每个点的最短路就是该点到达定点的最短路。<br>最短路径保存<br>我给一个思想类似于求最短路的条数的板子，直接套上最短路条数板子，把记录最短路条数的数组改为记录这一个点的上一个点(原图的下一个节点)就好了。</p>
</blockquote>
<p>如果不会最短路条数的板子，<a href="https://www.dream-ak.top/2020/02/29/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%92%8C%E6%AC%A1%E7%9F%AD%E8%B7%AF%E7%9A%84%E6%95%B0%E9%87%8F/">看这里</a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N=2e5+5;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id,w;</span><br><span class="line">&#125;ed[N],ed1[N];</span><br><span class="line">int head[N],tot,a[N],vis[N],flag[N],dis[N],head1[N],tot1;</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">    ed[++tot].pre=head[u];</span><br><span class="line">    ed[tot].id=v;</span><br><span class="line">    ed[tot].w=1;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">void add1(int u,int v)&#123;</span><br><span class="line">    ed1[++tot1].pre=head1[u];</span><br><span class="line">    ed1[tot1].id=v;</span><br><span class="line">    head1[u]=tot1;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;int,int&gt; &gt;q;</span><br><span class="line">void dij(int x)&#123;</span><br><span class="line">    memset(dis,0x3f,sizeof dis);</span><br><span class="line">    dis[x]=0;</span><br><span class="line">    q.push(make_pair(0,x));</span><br><span class="line">    while(q.size())&#123;</span><br><span class="line">        int u=q.top().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        if(vis[u]) continue;</span><br><span class="line">        vis[u]=1;</span><br><span class="line">        int i;</span><br><span class="line">        for(i=head[u];~i;i=ed[i].pre)&#123;</span><br><span class="line">            int v=ed[i].id,w=1;</span><br><span class="line">            if(dis[v]&gt;dis[u]+1)&#123;</span><br><span class="line">                head1[v]=-1;//清空该节点的下一个节点</span><br><span class="line">                add1(v,u);//建最短路图</span><br><span class="line">                dis[v]=dis[u]+1;</span><br><span class="line">                q.push(make_pair(-dis[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">            else if(dis[v]==dis[u]+1) add1(v,u);//建最短路图</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    while(scanf(&quot;%d %d&quot;,&amp;n,&amp;m)==2)&#123;</span><br><span class="line">        int u,v;</span><br><span class="line">        memset(head,-1,sizeof head);</span><br><span class="line">        memset(head1,-1,sizeof head1);</span><br><span class="line">        memset(vis,0,sizeof vis);</span><br><span class="line">        tot=1;</span><br><span class="line">        tot1=1;</span><br><span class="line">        for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;u,&amp;v);</span><br><span class="line">            add(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">        int len;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;len);</span><br><span class="line">        for(i=1;i&lt;=len;i++) scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">        dij(a[len]);</span><br><span class="line">        int mi=0,ma=0;</span><br><span class="line">        for(i=1;i&lt;len;i++)&#123;</span><br><span class="line">            int flag1=1;</span><br><span class="line">            mi++;</span><br><span class="line">            for(j=head1[a[i]];~j;j=ed1[j].pre)&#123;</span><br><span class="line">                //printf(&quot;%dvvvv\n&quot;,ed[j].id);</span><br><span class="line">                if(ed1[j].id==a[i+1]) mi--;</span><br><span class="line">                else if(flag1) ma++,flag1=0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;//统计答案</span><br><span class="line">        printf(&quot;%d %d\n&quot;,mi,ma);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>交互1305D</title>
    <url>/2020/03/04/1305D/</url>
    <content><![CDATA[<p>第一次做交互题，题目很简单，就是不熟悉流程，搞得我还蛮兴奋。<br>每一次提问两个点返回他们的LCA，最后能得到树的根，询问次数必须小于n/2！<a id="more"></a></p>
<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://codeforces.ml/contest/1305/problem/D" target="_blank" rel="noopener">题目链接</a></h1><h2 id="思想和题解"><a href="#思想和题解" class="headerlink" title="思想和题解"></a>思想和题解</h2><p>正解：<br>每一次提问叶子节点，求出它们的LCA(w)。</p>
<ol>
<li>如果w == u或者w == v，则w为树的根。<br>因为相等的话，那么证明两个点在同一条路径上面，且两点的度都为1，而$u \rightarrow v$ 本身就要消耗一个度，所以w是没有父节点的，w直接为根节点。</li>
<li>不相等则把该点从图上删掉且把该点的父节点的度减一<br>不相等，证明两点不在同一路径，那么他们存在祖先节点，则这两点删掉(不是根留他何用)然后父节点度减一原因是因为他的一个子节点删掉了，父节点度肯定减一呗。</li>
</ol>
<p>上面的度可以理解为可能为根节点的父节点个数(仅限此题可以这样理解，具体情况，具体分析)</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e5+5;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id;</span><br><span class="line">&#125;ed[N];</span><br><span class="line">int head[N],tot,w;</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">    ed[++tot].id=v;</span><br><span class="line">    ed[tot].pre=head[u];</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">int vis[N];//表示可能为根节点的父节点个数，直接说是度了。</span><br><span class="line">void dfs(int x)&#123;</span><br><span class="line">   // printf(&quot;%d\n&quot;,head[x]);</span><br><span class="line">    for(int i=head[x];i;i=ed[i].pre)&#123;</span><br><span class="line">        vis[ed[i].id]--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int t,n,m,i,j,k;</span><br><span class="line">    while(scanf(&quot;%d&quot;,&amp;n)==1)&#123;</span><br><span class="line">        for(i=1;i&lt;n;i++)&#123;</span><br><span class="line">            int u,v;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;u,&amp;v);</span><br><span class="line">            add(u,v);</span><br><span class="line">            add(v,u);</span><br><span class="line">            vis[u]++,vis[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        int u=0,v=0;</span><br><span class="line">        for(j=1;j&lt;=n/2;j++)&#123;</span><br><span class="line">            //printf(&quot;%d\n&quot;,j);</span><br><span class="line">            for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">                if(vis[i]==1&amp;&amp;u==0)&#123;</span><br><span class="line">                    u=i;</span><br><span class="line">                &#125;</span><br><span class="line">                else if(vis[i]==1)&#123;</span><br><span class="line">                    v=i;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            printf(&quot;? %d %d\n&quot;,u,v);</span><br><span class="line">            fflush(stdout);</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;w);</span><br><span class="line">            if(w==u||w==v)&#123;</span><br><span class="line">                printf(&quot;! %d\n&quot;,w);</span><br><span class="line">                fflush(stdout);</span><br><span class="line">                return 0;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                vis[u]=-1,vis[v]=-1;//-1表示删除该点</span><br><span class="line">                dfs(u);</span><br><span class="line">                dfs(v);</span><br><span class="line">                u=0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            if(vis[i]&gt;=0)&#123;</span><br><span class="line">                printf(&quot;! %d\n&quot;,i);</span><br><span class="line">                fflush(stdout);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>求等差数列的值</title>
    <url>/2020/03/02/%E6%B1%82%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97%E7%9A%84%E5%80%BC/</url>
    <content><![CDATA[<p>在不用乘除，if,while,for 三目运算符的情况下求从1开始的等差数列的值<a id="more"></a></p>
<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://leetcode-cn.com/problems/qiu-12n-lcof/" target="_blank" rel="noopener">题目链接</a></h1><p>对于这个题目的限制来看，他成功的把迭代方法给禁了！</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>利用公差为1和短路的原理递归答案<br>递归的话，很容易想，唯独就是不允许if来特判结束条件，在这里我们可以看到，最后一个值是0，那么我们就可以发现，</p>
<blockquote>
<p>如果为0的话，返回0，<br>不是0的话就继续递归</p>
</blockquote>
<p>那么我们就可以看到我们可以用短路，把后面不是0的部分用短路解决！<br>如果前面是0则短路后面部分，让它不运行。否则就运行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def sumNums(self, n: int) -&gt; int:</span><br><span class="line">        return n and n+self.sumNums(n-1)</span><br></pre></td></tr></table></figure><br>由于if 和while被禁了。。。快速加无法实现，pow函数与**不知道实现方法就不写了（如果里面有乘法或除法就丢脸了）</p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>java程序基础</title>
    <url>/2020/03/02/java/</url>
    <content><![CDATA[<p>突然学校开学了，那我就勉为其难开始学习一波Java吧，这里还是写一些对于廖雪峰大神博客的理解和课堂的理解。<br><a id="more"></a></p>
<h1 id="Java程序基础"><a href="#Java程序基础" class="headerlink" title="Java程序基础"></a>Java程序基础</h1><h2 id="基本单位-Class"><a href="#基本单位-Class" class="headerlink" title="基本单位:Class"></a>基本单位:Class</h2><p>首先对于Java来说他的基本单位是$Class$而不像C语言基本单位是函数！<br>对于每一个类他的定义一般是：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Hello&#123;</span><br><span class="line">    public static void main()&#123;//方法名是main()</span><br><span class="line">        system.out.println()//system.out.print+line整行输出的意思</span><br><span class="line">        //单行注释</span><br><span class="line">        /*</span><br><span class="line">        多行注释</span><br><span class="line">        */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里的public是访问修饰符，表示Class公开</p>
<h3 id="Class的命名规则"><a href="#Class的命名规则" class="headerlink" title="Class的命名规则"></a>Class的命名规则</h3><p>Class的命名规则与py的Class一样，使用大驼峰规则：</p>
<blockquote>
<p>Hello<br>NoteBook<br>VRPlayer</p>
</blockquote>
<h3 id="方法的命名规则"><a href="#方法的命名规则" class="headerlink" title="方法的命名规则"></a>方法的命名规则</h3><p>方法名命名规则是小驼峰：</p>
<blockquote>
<p>main<br>goodMorning<br>playVR</p>
</blockquote>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ol>
<li>直接与C语言相比，Java的int没有变化，long long变成long，用法不变</li>
<li>java整数运算没有误差，与C语言没有什么变化</li>
<li>java浮点数运算有误差，在比较的时候需要表示在一个容错值之中！</li>
<li>java布尔运算的变量名为boolean，且逻辑运算和三元运算符也有相同用法</li>
<li>java字符中和C语言字符差不多，但是由于用的Unicode编码，所以空间占两个字节，显示Unicode编码直接将char放到int就好了，由编码转Unicode编码则加上’\u’</li>
<li>java字符串中和py的string用法相似，都是不可变变量且多行输出用法一样system.out.print(“””…”””);</li>
<li>java数组操作，对于定义一个int[] ns= new int[5]；这样就是定义一个ns数组，可以用ns.length获取数组长度</li>
</ol>
<h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><ol>
<li>从数组下标从0到lenth-1挨个访问</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] ns = &#123; 1, 4, 9, 16, 25 &#125;;</span><br><span class="line">        for (int i=0; i&lt;ns.length; i++) &#123;</span><br><span class="line">            int n = ns[i];</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>用for each迭代答案</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] ns = &#123; 1, 4, 9, 16, 25 &#125;;</span><br><span class="line">        for (int n : ns) &#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>Arrays.sort(数组名称)按升序排序</p>
<h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>对于java来说，以main函数为程序入口，main(string[] args)这里的string[]是传入命令行参数的入口<br>来看代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        for (String arg : args) &#123;</span><br><span class="line">            if (&quot;-version&quot;.equals(arg)) &#123;</span><br><span class="line">                System.out.println(&quot;v 1.0&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>操作方法：<br>首先我们先编译</p>
<ol>
<li>javac 待编译文件</li>
<li>java 文件名 传入参数</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>两数相加</title>
    <url>/2020/03/01/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    <content><![CDATA[<p>第二题，说句实在的，用py模拟的链表，因为不熟悉力扣的测试样例wa了n久，难顶！<br><a id="more"></a><br>对于这一题，说实在的没有啥算法可言，就是暴力模拟，我第一次了解py的链表，感觉还是值得一刷，就写了一下，解法就过了，没说的，竖式相加，逢十进位<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Definition for singly-linked list.定义单链表的意思</span><br><span class="line"># class ListNode:</span><br><span class="line">#     def __init__(self, x):</span><br><span class="line">#         self.val = x</span><br><span class="line">#         self.next = None</span><br><span class="line"></span><br><span class="line">class Solution:</span><br><span class="line">    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -&gt; ListNode:</span><br><span class="line">        key=0</span><br><span class="line">        pre = ListNode(0)</span><br><span class="line">        ans = pre</span><br><span class="line">        while l1!=None and l2!=None:</span><br><span class="line">           x = ((l1.val+l2.val+key)%10)</span><br><span class="line">           cur = ListNode(x)</span><br><span class="line">           pre.next=cur</span><br><span class="line">           pre=cur</span><br><span class="line">           key = (l1.val+l2.val+key)//10</span><br><span class="line">           l1,l2=l1.next,l2.next</span><br><span class="line">        while(l1!=None):</span><br><span class="line">            x = ((l1.val+key)%10)</span><br><span class="line">            key = (l1.val+key)//10</span><br><span class="line">            cur = ListNode(x)</span><br><span class="line">            pre.next=cur</span><br><span class="line">            pre=cur</span><br><span class="line">            l1=l1.next</span><br><span class="line">        while(l2!=None):</span><br><span class="line">            x = ((l2.val+key)%10)</span><br><span class="line">            key = (l2.val+key)//10</span><br><span class="line">            cur = ListNode(x)</span><br><span class="line">            pre.next=cur</span><br><span class="line">            pre=cur</span><br><span class="line">            l2=l2.next</span><br><span class="line">        if key!=0:</span><br><span class="line">            cur = ListNode(key)</span><br><span class="line">            pre.next=cur</span><br><span class="line">        return ans.next</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>两数之和</title>
    <url>/2020/02/29/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<p>leetcode计划开始了，尽量不用ACM本命C与C++(除非实在不会用java或python来写了)。<br><a id="more"></a></p>
<h1 id="第一题：两数之和"><a href="#第一题：两数之和" class="headerlink" title="第一题：两数之和"></a>第一题：两数之和</h1><p>题意：给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>对于这个题目，因为简单，所以这里提供的解法有如下几种</p>
<ol>
<li>暴力$O(n*n)$<br>每一次枚举一个i然后从i开始往后找另一个值与之相加为x的数字，找到则直接返回下标。</li>
<li>字典映射<br>对于每一个数字由于只有两个$(x,y)$数字，那么我们假设其中一个数字为$x$，则另一个数字一定是$target-x$<br>通过这个特性，我们可以选择建立一个dict{x:i},x为差值，i为下标，我们每一次假设一个x时则查看前面是否出现过target-x，出现了直接返回就好了，没出现则加入字典。时间复杂度$O(n)$,特别注意，py字典是哈希映射的，不是字典树。<br>32ms<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:</span><br><span class="line">        num=&#123;&#125;</span><br><span class="line">        pos=0</span><br><span class="line">        for i in nums:</span><br><span class="line">            x = target - i</span><br><span class="line">            if num.get(x,-1)!=-1:</span><br><span class="line">                return [num[x],pos]</span><br><span class="line">            num[i]=pos</span><br><span class="line">            pos+=1</span><br></pre></td></tr></table></figure></li>
<li>二分<br>建立一个$list$存储大小与下标，然后对大小从小到大排序，接下来用二分查找向后查找$target-x$时间复杂度$n*log_2 n$<br>54ms<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:</span><br><span class="line">        lenth=len(nums)</span><br><span class="line">        a=[[nums[pos],pos] for pos in range(0,lenth,1)]</span><br><span class="line">        b = sorted(a,key=lambda x: x[0])</span><br><span class="line">        for i in range(0,lenth,1):</span><br><span class="line">            x = target-b[i][0]</span><br><span class="line">            l , r = i+1,len(b)-1</span><br><span class="line">            while(l&lt;r):</span><br><span class="line">                mid=(l+r)//2</span><br><span class="line">                if b[mid][0]&gt;=x:</span><br><span class="line">                    r=mid</span><br><span class="line">                elif b[mid][0]&lt;x:</span><br><span class="line">                    l=mid+1</span><br><span class="line">            if b[l][0]==x:</span><br><span class="line">                x = [b[i][1],b[l][1]]</span><br><span class="line">                y=sorted(x)</span><br><span class="line">                return y</span><br></pre></td></tr></table></figure>
<h2 id="自我总结"><a href="#自我总结" class="headerlink" title="自我总结"></a>自我总结</h2>对于这一题，我的个人总结是用python实现了一次二分同时学会了排序<br>sorted函数带三个参数：</li>
<li>要排序数组</li>
<li>排序方式，是一个函数<br>写法key=一个函数，这里是lambda x:x[0]按照第一个值排序</li>
<li>reverse反转，让她从小到大与从大到小之间变化</li>
</ol>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路和次短路的数量</title>
    <url>/2020/02/29/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%92%8C%E6%AC%A1%E7%9F%AD%E8%B7%AF%E7%9A%84%E6%95%B0%E9%87%8F/</url>
    <content><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="http://poj.org/problem?id=3463" target="_blank" rel="noopener">题目链接</a></h1><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>给一个图，求1到n的最短路径和比最短路径短一个单位的路径数量有多少<a id="more"></a></p>
<h2 id="思想和解法"><a href="#思想和解法" class="headerlink" title="思想和解法"></a>思想和解法</h2><p>首先看到这个题目，我们第一时间就会想到最短路径数量，直接就暴力跑迪杰斯特拉然后统计一下就完事了，最多加个次短路而已，我们就按照次短路生成的方式，跑迪杰斯特拉，然后记录到达每个点的最短路数量和次短路数量。</p>
<ol>
<li>优化最短路时就把当前次短路的数量赋值给最短路，</li>
<li>通过次短路优化次短路时就把前一个点的次短路数量赋值给下一个点的数量</li>
</ol>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>想法很简单，但是这题如果大量使用空间则会爆优先队列，因此我们要注意对优先队列进行节省空间，对于每一个点能让它少入队，则少让他入队。<br>把优化最短路时最短路和次短路的这两次入队归为一次，就会节省很多空间！所以写法再次修改为如下，分为4个步骤：</p>
<ol>
<li>优化最短路</li>
<li>等于最短路</li>
<li>优化次短路</li>
<li>等于次短路<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e5+5;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id,w;</span><br><span class="line">&#125;ed[N];</span><br><span class="line">int head[N],dis[N],dis2[N],tot=0,num1[N],num2[N];</span><br><span class="line">void init()&#123;</span><br><span class="line">    memset(head,-1,sizeof head);</span><br><span class="line">    memset(dis,0x3f,sizeof dis);</span><br><span class="line">    memset(dis2,0x3f,sizeof dis2);</span><br><span class="line">    memset(num1,0,sizeof num1);</span><br><span class="line">    memset(num2,0,sizeof num2);</span><br><span class="line">    tot=2;</span><br><span class="line">&#125;</span><br><span class="line">void add(int u,int v,int w)&#123;</span><br><span class="line">    ed[++tot].id=v;</span><br><span class="line">    ed[tot].pre=head[u];</span><br><span class="line">    ed[tot].w=w;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;int,int&gt; &gt;q;</span><br><span class="line">void dij(int x)&#123;</span><br><span class="line">    dis[x]=0;</span><br><span class="line">    num1[x]=1;</span><br><span class="line">    q.push(make_pair(0,x));</span><br><span class="line">    while(q.size())&#123;</span><br><span class="line">        int x=q.top().second,w = -q.top().first;</span><br><span class="line">        //printf(&quot;%d %d\n&quot;,x,w);</span><br><span class="line">        q.pop();</span><br><span class="line">        int cnt;</span><br><span class="line">        if(w&gt;dis2[x]) continue;</span><br><span class="line">        if(w == dis[x]) cnt=num1[x];</span><br><span class="line">        else if(w==dis2[x]) cnt=num2[x];</span><br><span class="line">        for(int i=head[x];~i;i=ed[i].pre)&#123;</span><br><span class="line">            int v = ed[i].id,s=ed[i].w;</span><br><span class="line">            int cost = w + s,d=cnt;</span><br><span class="line">            if(dis[v]&gt;cost)&#123;</span><br><span class="line">                dis2[v]=dis[v];</span><br><span class="line">                num2[v]=num1[v];</span><br><span class="line">                dis[v]=cost;</span><br><span class="line">                num1[v]=d;</span><br><span class="line">                //swap(dis[v],cost);</span><br><span class="line">                //swap(d,num1[v]);</span><br><span class="line">                q.push(make_pair(-dis[v],v));</span><br><span class="line">                //printf(&quot;%d %d sss\n&quot;,v,num1[v]);</span><br><span class="line">            &#125;</span><br><span class="line">            else if(dis[v]==cost)&#123;</span><br><span class="line">                num1[v]+=d;</span><br><span class="line">            &#125;</span><br><span class="line">            else if(dis2[v]==cost)&#123;</span><br><span class="line">                num2[v]+=d;</span><br><span class="line">            &#125;</span><br><span class="line">            else if(dis2[v]&gt;cost)&#123;</span><br><span class="line">                dis2[v]=cost;</span><br><span class="line">                num2[v]=d;</span><br><span class="line">                q.push(make_pair(-cost,v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k,t;</span><br><span class="line">    while(scanf(&quot;%d&quot;,&amp;t)==1)&#123;</span><br><span class="line">        while(t--)&#123;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;n,&amp;m);</span><br><span class="line">            init();</span><br><span class="line">            for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">                int u,v,w;</span><br><span class="line">                scanf(&quot;%d %d %d&quot;,&amp;u,&amp;v,&amp;w);</span><br><span class="line">                add(u,v,w);</span><br><span class="line">            &#125;</span><br><span class="line">            int p,q;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;p,&amp;q);</span><br><span class="line">            dij(p);</span><br><span class="line">            int ans=num1[q];</span><br><span class="line">            if(dis[q]==dis2[q]-1) ans+=num2[q];</span><br><span class="line">            printf(&quot;%d\n&quot;,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>poj3694-tarjan</title>
    <url>/2020/02/29/poj3694-tarjan/</url>
    <content><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="http://poj.org/problem?id=3694" target="_blank" rel="noopener">题目链接</a></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个连通图，问每一次加边以后还有多少条桥！<a id="more"></a></p>
<h2 id="思想和解法"><a href="#思想和解法" class="headerlink" title="思想和解法"></a>思想和解法</h2><p>很明显把连通图缩点成$DAG$图，(对DAG图操作)然后每一次加边后$DAG$图里强连通分量继续缩点！桥的数量就是加边前的数量减去缩掉的边的数量。</p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="问题1：缩点"><a href="#问题1：缩点" class="headerlink" title="问题1：缩点"></a>问题1：缩点</h3><p>想法很简单，操作异想天开，如果用染色法对图进行缩点，最坏情况就是一棵N个结点的树，N-1条边每一次添加一条邻边，复杂度卡到$(1+n)* \frac{n}{2}$。所以采用并查集动态缩点！</p>
<h3 id="问题2：路径"><a href="#问题2：路径" class="headerlink" title="问题2：路径"></a>问题2：路径</h3><p>路径寻找也是一个问题，我们已经$tarjan$缩过一次点了，我们接下来是新建一个图继续跑$tarjan$离线$LCA$吗？<br>注意对于tarjan的LCA算法精髓在于哪里？他那么写的原因是经过了tarjan算法以后每个节点其实都有一个时间戳！而两个点$<u,v>$之间的$LCA$他们有一个共同的特点，那就是:</u,v></p>
<blockquote>
<p>$LCA$的左子树上的所有点的时间戳都小于右子树的时间戳！</p>
</blockquote>
<p>根据这个特点我们可以直接用记录当前点的父节点然后爬到$LCA$上去。<br>看下代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void lca(int x,int y)&#123;</span><br><span class="line">    if(dfn[x]&lt;dfn[y]) swap(x,y);</span><br><span class="line">    if(get(x)==get(y)) return ;</span><br><span class="line">    while(dfn[x]&gt;dfn[y])&#123;</span><br><span class="line">        if(join(x,pre[x])) edge--;//缩点成功则桥减一</span><br><span class="line">        x=get(pre[x]);//爬向缩点后的父节点</span><br><span class="line">    &#125;</span><br><span class="line">    while(x!=y)&#123;</span><br><span class="line">        if(join(y,pre[y])) edge--;//缩点成功则桥减一</span><br><span class="line">        y=get(pre[y]);//爬向缩点后的父节点</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>282ms<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 5e5+5;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id;</span><br><span class="line">&#125;ed[N];</span><br><span class="line">int head[N],pre[N],fa[N],dfn[N],low[N],sta[N];</span><br><span class="line">int tot=0,edge=0,tim=0;</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">    ed[++tot].pre=head[u];</span><br><span class="line">    ed[tot].id=v;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">int vis[N];</span><br><span class="line">int get(int x)&#123;</span><br><span class="line">    if(fa[x]!=x) return fa[x]=get(fa[x]);</span><br><span class="line">    else return x;</span><br><span class="line">&#125;</span><br><span class="line">bool join(int x,int y</span><br><span class="line">)&#123;</span><br><span class="line">    int p=get(x),q=get(y);</span><br><span class="line">    if(p!=q)&#123;</span><br><span class="line">        fa[p]=q;//指向父节点</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">int num=1;</span><br><span class="line">void tarjan(int x,int fath)&#123;</span><br><span class="line">    low[x]=dfn[x]=++tim;</span><br><span class="line">    vis[x]=1;</span><br><span class="line">    int flag=1;</span><br><span class="line">    for(int i=head[x];~i;i=ed[i].pre)&#123;</span><br><span class="line">        int v=ed[i].id;</span><br><span class="line">        if(v==fath&amp;&amp;flag) &#123;flag=0;continue;&#125;</span><br><span class="line">        if(!vis[v])&#123;</span><br><span class="line">            pre[v]=x;</span><br><span class="line">            tarjan(v,x);</span><br><span class="line">            low[x]=min(low[v],low[x]);</span><br><span class="line">            if(low[v]&gt;dfn[x])&#123;</span><br><span class="line">                edge++;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                join(v,x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            low[x]=min(low[x],dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void lca(int x,int y)&#123;</span><br><span class="line">    if(dfn[x]&lt;dfn[y]) swap(x,y);</span><br><span class="line">    if(get(x)==get(y)) return ;</span><br><span class="line">    while(dfn[x]&gt;dfn[y])&#123;</span><br><span class="line">        if(join(x,pre[x])) edge--;</span><br><span class="line">        x=get(pre[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    while(x!=y)&#123;</span><br><span class="line">        if(join(y,pre[y])) edge--;</span><br><span class="line">        y=get(pre[y]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    while(scanf(&quot;%d %d&quot;,&amp;n,&amp;m)&amp;&amp;(n||m))&#123;</span><br><span class="line">        for(i=1;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">        for(i=1;i&lt;=n;i++) head[i]=-1,vis[i]=0,dfn[i]=0;</span><br><span class="line">        tim=edge=tot=0;</span><br><span class="line">        int u,v;</span><br><span class="line">        for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;u,&amp;v);</span><br><span class="line">            add(u,v);</span><br><span class="line">            add(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">        tarjan(1,1);</span><br><span class="line">        pre[1]=1;</span><br><span class="line">        int q;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;q);</span><br><span class="line">        printf(&quot;Case %d:\n&quot;,num++);</span><br><span class="line">        for(i=1;i&lt;=q;i++)&#123;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;u,&amp;v);</span><br><span class="line">            lca(u,v);</span><br><span class="line">            printf(&quot;%d\n&quot;,edge);</span><br><span class="line">        &#125;</span><br><span class="line">        puts(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>poj2763,tarjan</title>
    <url>/2020/02/29/poj2763-tarjan/</url>
    <content><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="http://poj.org/problem?id=3728" target="_blank" rel="noopener">题目链接</a></h1><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>给定一个N个节点的树，1&lt;=N&lt;=50000 每个节点都有一个权值，代表商品在这个节点的价格。商人从某个节点a移动到节点b，且只能购买并出售一次商品，问最多可以产生多大的利润。Q次询问<a id="more"></a></p>
<h2 id="思想与解法"><a href="#思想与解法" class="headerlink" title="思想与解法"></a>思想与解法</h2><ol>
<li>首先最暴力的想法就是去找到路径然后判断，找路径的办法就是先找到$LCA$然后暴力就完事了，很明显时间复杂度$O(N*Q)$绝对$tle$</li>
<li>我们思考得到最大利润的方式，首先对于$u \rightarrow v$可以分解为$u \rightarrow LCA \rightarrow v$<br>那么最大利润将会如下三条路径中产生：<br>1.$u \rightarrow LCA$<br>2.$LCA \rightarrow v$<br>3.$u \rightarrow v$<br>这时候可能有很多人会想为什么要把路径3分为路径1与路径2，明显路径3包含1和2啊。<blockquote>
<p>在这里解释一下，如果只观察路径3的话，那么答案就是路径上最大的权值减最小权值，但是，无法记录访问顺序！但是这样分开以后以LCA为参考，获得每个点到$LCA$路径的最大利润，如果$u \rightarrow v$的最大利润不在点到$LCA$的路径而是穿过路径的时，那么商人一定在$u \rightarrow LCA$进货，在$LCA \rightarrow v$出售。直接记录两个路径中的最大最小值然后计算就好了</p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>根据分析我们需要四个数组！一个储存路径1的最大利润$up$，一个储存路径2的最大利润$down$，第三个储存路径的最大值$ma$，第四个存储最小值$mi$。然后并查集，把每一个点并到$LCA$上并更新所有数据。最后统计答案，据说卡vector。。<br>并查集的合并操作</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int get(int x)&#123;</span><br><span class="line">    if(fa[x]==x) return x;</span><br><span class="line">    int root = fa[x];</span><br><span class="line">    fa[x]=get(fa[x]);</span><br><span class="line">    up[x]=max(up[x],max(up[root],ma[root]-mi[x]));</span><br><span class="line">    down[x]=max(down[x],max(down[root],ma[x]-mi[root]));</span><br><span class="line">    mi[x]=min(mi[x],mi[root]);</span><br><span class="line">    ma[x]=max(ma[x],ma[root]);</span><br><span class="line">    return fa[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>卡vector我们就是用链式前向星寸询问，继而离线！$add1$函数<br>由于我们要在合并完以后才能得到答案，所以我的办法是每一次计算完$LCA$，用链式前向星保存在$LCA上(add2)！$访问到时在计算ans。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 3e5+5;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id;</span><br><span class="line">&#125;ed[N],ed1[N];</span><br><span class="line">int head[N],head1[N],tot,tot1,ans[N],fa[N],ma[N],mi[N],vis[N],up[N],down[N],head2[N],tot2=1;</span><br><span class="line">struct NUM&#123;</span><br><span class="line">    int x,y,id,pre;</span><br><span class="line">&#125;num[N];</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">    ed[++tot].pre=head[u];</span><br><span class="line">    ed[tot].id=v;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">void add1(int u,int v)&#123;</span><br><span class="line">    ed1[++tot1].pre=head1[u];</span><br><span class="line">    ed1[tot1].id=v;</span><br><span class="line">    head1[u]=tot1;</span><br><span class="line">&#125;</span><br><span class="line">void add2(int u,int x,int y,int id)&#123;</span><br><span class="line">    num[++tot2].id=id;</span><br><span class="line">    num[tot2].x=x,num[tot2].y=y;</span><br><span class="line">    num[tot2].pre=head2[u];</span><br><span class="line">    head2[u]=tot2;</span><br><span class="line">&#125;</span><br><span class="line">int get(int x)&#123;</span><br><span class="line">    if(fa[x]==x) return x;</span><br><span class="line">    int root = fa[x];</span><br><span class="line">    fa[x]=get(fa[x]);</span><br><span class="line">    up[x]=max(up[x],max(up[root],ma[root]-mi[x]));</span><br><span class="line">    down[x]=max(down[x],max(down[root],ma[x]-mi[root]));</span><br><span class="line">    mi[x]=min(mi[x],mi[root]);</span><br><span class="line">    ma[x]=max(ma[x],ma[root]);</span><br><span class="line">    return fa[x];</span><br><span class="line">&#125;</span><br><span class="line">void LCA(int x)&#123;</span><br><span class="line">    vis[x]=1;</span><br><span class="line">    int i;</span><br><span class="line">    for(i=head[x];~i;i=ed[i].pre)&#123;</span><br><span class="line">        int v=ed[i].id;</span><br><span class="line">        if(vis[v]) continue;</span><br><span class="line">        else &#123;</span><br><span class="line">            LCA(v);</span><br><span class="line">            fa[v]=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=head1[x];~i;i=ed1[i].pre)&#123;</span><br><span class="line">        int v=ed1[i].id;</span><br><span class="line">        if(vis[v]) &#123;</span><br><span class="line">            add2(get(v),x,v,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=head2[x];~i;i=num[i].pre)&#123;</span><br><span class="line">        int u = num[i].x,v=num[i].y,d=num[i].id;</span><br><span class="line">        get(u),get(v);</span><br><span class="line">        if(d%2)&#123;</span><br><span class="line">            ans[d]=ans[d^1]=max(up[v],max(down[u],ma[u]-mi[v]));</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            ans[d]=ans[d^1]=max(down[v],max(up[u],ma[v]-mi[u]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void init()&#123;</span><br><span class="line">    memset(head,-1,sizeof head);</span><br><span class="line">    memset(head1,-1,sizeof head1);</span><br><span class="line">    memset(head2,-1,sizeof head2);</span><br><span class="line">    memset(vis,0,sizeof vis);</span><br><span class="line">    tot=tot1=tot2=1;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    while(scanf(&quot;%d&quot;,&amp;n)==1)&#123;</span><br><span class="line">        int u,v,w;</span><br><span class="line">        init();</span><br><span class="line">        for(i=1;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">        for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;w);</span><br><span class="line">            down[i]=up[i]=0;</span><br><span class="line">            ma[i]=mi[i]=w;</span><br><span class="line">        &#125;</span><br><span class="line">        for(i=1;i&lt;n;i++)&#123;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;u,&amp;v);</span><br><span class="line">            add(u,v);</span><br><span class="line">            add(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">        int q;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;q);</span><br><span class="line">        for(i=1;i&lt;=q;i++)&#123;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;u,&amp;v);</span><br><span class="line">            add1(u,v);</span><br><span class="line">            add1(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">        LCA(1);</span><br><span class="line">        for(i=2;i&lt;=2*q;i+=2)&#123;</span><br><span class="line">            printf(&quot;%d\n&quot;,ans[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完美的考察对于并查集，$tarjan$的理解，对于扩展域的使用在这里像极了$dp$，也让我发现自己对于tarjan的不足。</p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>强连通分量</title>
    <url>/2020/02/28/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/</url>
    <content><![CDATA[<p>强连通分量一般用来对于整个图进行缩点，把一个有向图变成DAG图，这是强连通的一般用途，问题一般是询问要加多少条边能使整个图变成强连通图。<a id="more"></a></p>
<h1 id="tarjan算法"><a href="#tarjan算法" class="headerlink" title="tarjan算法"></a>tarjan算法</h1><p>这个算法十分强大，广泛应用于$LCA$，强连通缩点等问题，他的主要思想是给每一个点打上一个时间戳，然后$dfs$去寻找每一个点$u$所能回到的最小时间戳$v$，在这个区间$<u,v>$内的点是一个连通分量，然后进行缩点，这里的缩点有两种方式。</u,v></p>
<ol>
<li>通过数组映射缩点，同一个连通分量映射同一个值</li>
<li>并查集缩点，同一个连通分量指向同一个根</li>
</ol>
<h1 id="练习题目"><a href="#练习题目" class="headerlink" title="练习题目"></a>练习题目</h1><p>hdu1239<br>求加多少条边使整个图变为强连通图</p>
<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>首先缩点，把图变成DAG图以后去看如何加最少的边使图变为强连通！<br>很明显，对于入度为0的点必须加一条边使他能到达，出度为0的边也要加边使得到了他的边能回去，要加的最少的边就是$max(入度为0,出度为0)$；</p>
<h2 id="题解代码"><a href="#题解代码" class="headerlink" title="题解代码"></a>题解代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N =2e5+5;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id;</span><br><span class="line">&#125;ed[N*2];</span><br><span class="line">int head[N],tot=1;</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">    ed[++tot].pre=head[u];</span><br><span class="line">    ed[tot].id=v;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">int dfn[N],low[N],vis[N],dfp,sta[N],cnt=0,siz=0,col[N],in[N],out[N];</span><br><span class="line">void tarjan(int x)&#123;</span><br><span class="line">    dfn[x]=++dfp;</span><br><span class="line">    low[x]=dfp;</span><br><span class="line">    vis[x]=1;</span><br><span class="line">    sta[++cnt]=x;</span><br><span class="line">    for(int i=head[x];i;i=ed[i].pre)&#123;</span><br><span class="line">        int u=ed[i].id;</span><br><span class="line">        if(!dfn[u])&#123;</span><br><span class="line">            tarjan(u);</span><br><span class="line">            low[x]=min(low[u],low[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(vis[u])&#123;</span><br><span class="line">            low[x]=min(low[x],dfn[u]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(dfn[x]==low[x])&#123;</span><br><span class="line">        col[x]=++siz;</span><br><span class="line">        vis[x]=0;</span><br><span class="line">        while(sta[cnt]!=x)&#123;</span><br><span class="line">            vis[sta[cnt]]=0;</span><br><span class="line">            col[sta[cnt--]]=siz;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k,t;</span><br><span class="line">    while(scanf(&quot;%d&quot;,&amp;t)==1)&#123;</span><br><span class="line">        while(t--)&#123;</span><br><span class="line">            tot=1;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;n,&amp;m);</span><br><span class="line">            memset(head,0,sizeof head);</span><br><span class="line">            memset(dfn,0,sizeof dfn);</span><br><span class="line">            memset(in,0,sizeof in);</span><br><span class="line">            memset(out,0,sizeof out);</span><br><span class="line">            memset(low,0,sizeof low);</span><br><span class="line">            memset(col,0,sizeof col);</span><br><span class="line">            for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">                int u,v;</span><br><span class="line">                scanf(&quot;%d %d&quot;,&amp;u,&amp;v);</span><br><span class="line">                add(u,v);</span><br><span class="line">            &#125;</span><br><span class="line">            dfp=0,cnt=0,siz=0;</span><br><span class="line">            for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">                if(dfn[i]==0)&#123;</span><br><span class="line">                    tarjan(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">                for(j=head[i];j;j=ed[j].pre)&#123;</span><br><span class="line">                    if(col[i]!=col[ed[j].id])&#123;</span><br><span class="line">                        out[col[i]]++;</span><br><span class="line">                        in[col[ed[j].id]]++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            int ans1=0,ans2=0;</span><br><span class="line">            for(i=1;i&lt;=siz;i++)&#123;</span><br><span class="line">                if(in[i]==0) ans1++;</span><br><span class="line">                if(out[i]==0) ans2++;</span><br><span class="line">            &#125;</span><br><span class="line">            printf(&quot;%d\n&quot;,max(ans1,ans2)==1?0:max(ans1,ans2));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于$tarjan$应该灵活使用并查集对其进行各种点集的合并。<br>对于$DAG$来说我们要注意的是要实现强连通只需要计算$max$(出度0，入度0)；<br>关于tarjan的题目之后还会找几个好题再写几次。</p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>分层图和次短路</title>
    <url>/2020/02/16/%E5%88%86%E5%B1%82%E5%9B%BE%E5%92%8C%E6%AC%A1%E7%9F%AD%E8%B7%AF/</url>
    <content><![CDATA[<p>搞了这么久，我终于感觉最短路到头了，快要结束了，来总结一下最短路。<br><a id="more"></a></p>
<h1 id="分层图"><a href="#分层图" class="headerlink" title="分层图"></a>分层图</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>分层图是一个最短路的应用，他一般用来计算在一个连通图里面在可以省K条路的情况下，我们能从S到T的最短距离！<br>做法有两种：</p>
<ol>
<li>dp</li>
<li>建分层图</li>
</ol>
<p>在这里我只介绍做法2</p>
<h2 id="建图"><a href="#建图" class="headerlink" title="建图"></a>建图</h2><p>我们建立k层图，两层图之间的边免费，图里面的连通情况一致。<br>解释一下：<br>对于k层图，如果由S走到T的话，不管是到达哪一个点，他最多经过K次免费！在这个图上面跑迪杰斯特拉，最后找最小值就好了</p>
<p>讲的抽象，在这里我推荐<a href="https://blog.csdn.net/qq_40736036/article/details/85041838" target="_blank" rel="noopener">推荐一篇博客</a></p>
<h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><p>空间占用太大，跑了两个题目差不多都是$40M$左右，dp版本会低一些，但时间复杂度不变。<br>计算边的数组大小：</p>
<blockquote>
<p>一条边要往连向下一层图同时还要连向本层图，所以一条边实际上要有$(k*2)$条边</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://www.luogu.org/problemnew/show/P4568" target="_blank" rel="noopener">题目地址</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int N = 5e5+5;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id,w;</span><br><span class="line">&#125;ed[N*10];</span><br><span class="line">int head[N],tot=1,dis[N];</span><br><span class="line">bool vis[N];</span><br><span class="line">int s,t;</span><br><span class="line">priority_queue&lt;pair&lt;int,int&gt; &gt;q;</span><br><span class="line">void add(int u,int v,int w)&#123;</span><br><span class="line">    ed[++tot].pre=head[u];</span><br><span class="line">    ed[tot].id=v;</span><br><span class="line">    ed[tot].w=w;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">void dij()&#123;</span><br><span class="line">    memset(dis,0x3f,sizeof dis);</span><br><span class="line">    memset(vis,0,sizeof vis);</span><br><span class="line">    dis[s]=0;</span><br><span class="line">    q.push(make_pair(0,s));</span><br><span class="line">    while(q.size())&#123;</span><br><span class="line">        int u=q.top().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        if(vis[u]) continue;</span><br><span class="line">        vis[u]=1;</span><br><span class="line">        //printf(&quot;%dsss\n&quot;,u);</span><br><span class="line">        for(int i=head[u];i;i=ed[i].pre)&#123;</span><br><span class="line">            int v=ed[i].id,w=ed[i].w;</span><br><span class="line">            //printf(&quot;%d %d\n&quot;,u,v);</span><br><span class="line">            if(dis[v]&gt;dis[u]+w)&#123;</span><br><span class="line">                dis[v]=dis[u]+w;</span><br><span class="line">                q.push(make_pair(-dis[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    while(scanf(&quot;%d %d %d&quot;,&amp;n,&amp;m,&amp;k)==3)&#123;</span><br><span class="line">        s=1,t=n;</span><br><span class="line">        for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">            int u,v,w;</span><br><span class="line">            scanf(&quot;%d %d %d&quot;,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            add(u,v,w);</span><br><span class="line">            add(v,u,w);</span><br><span class="line">            for(j=1;j&lt;=k;j++)&#123;</span><br><span class="line">                add(u+j*n,v+j*n,w);</span><br><span class="line">                add(v+j*n,u+j*n,w);</span><br><span class="line">                add(u+j*n-n,v+j*n,0);</span><br><span class="line">                add(v+j*n-n,u+j*n,0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dij();</span><br><span class="line">        int ans=2e9+9;</span><br><span class="line">        for(i=0;i&lt;=k;i++)&#123;</span><br><span class="line">            ans=min(ans,dis[t+i*n]);</span><br><span class="line">            //printf(&quot;%d\n&quot;,dis[t+i*n]);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="次短路"><a href="#次短路" class="headerlink" title="次短路"></a>次短路</h1><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><ol>
<li>通过最短路来求</li>
<li>通过K短路来求</li>
</ol>
<p>在这里我只讲通过最短路来求得解法<br>我们得到次短路的过程分为两种</p>
<ol>
<li>最短路更新得来得来,在更新dis[u]时，原来的$dis[u]$将会是次短路</li>
<li>次短路自身延申得来,在次短路$dis2[u]+min(u \rightarrow v)$,借此更新最短路</li>
</ol>
<p>对于这两种情况来看，1与最短路有关，2的更新方式也与迪杰斯特拉很像！所以我们这里就直接跑最短路！用优先队列维护两条路径，最短路和次短路，每一次取里面最短的。<strong>无论是最短路上的点，还是次短路上的点，因为次短路影响不了最短路，而最短路影响次短路本身就是需要的</strong></p>
<h2 id="题目：POJ3255"><a href="#题目：POJ3255" class="headerlink" title="题目：POJ3255"></a>题目：POJ3255</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e5+5;</span><br><span class="line">struct ED</span><br><span class="line">&#123;</span><br><span class="line">    int pre,id,w;</span><br><span class="line">&#125;ed[N];</span><br><span class="line">int head[N],tot=1,dis[N],dis2[N],n,m;</span><br><span class="line">priority_queue&lt;pair&lt;int,int&gt; &gt; q;</span><br><span class="line">void add(int u,int v,int w)&#123;</span><br><span class="line">    ed[++tot].pre=head[u];</span><br><span class="line">    ed[tot].id=v;</span><br><span class="line">    ed[tot].w=w;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">void dij(int x)&#123;</span><br><span class="line">    memset(dis,0x3f,sizeof dis);</span><br><span class="line">    memset(dis2,0x3f,sizeof dis2);</span><br><span class="line">    dis[x]=0;</span><br><span class="line">    q.push(make_pair(-dis[x],x));</span><br><span class="line">    while(q.size())&#123;</span><br><span class="line">        int u=q.top().second,w=-q.top().first;</span><br><span class="line">        q.pop();</span><br><span class="line">        if(dis2[u]&lt;w) continue;//这里是剪枝，看注释一。</span><br><span class="line">        for(int i=head[u];i;i=ed[i].pre)&#123;</span><br><span class="line">            int v=ed[i].id,d=w+ed[i].w;</span><br><span class="line">            if(d&lt;dis[v])&#123;</span><br><span class="line">                swap(d,dis[v]);//这里只能是交换，因为dis[v]还要给次短路用</span><br><span class="line">                q.push(make_pair(-dis[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">            if(d&lt;dis2[v]&amp;&amp;d&gt;dis[v])&#123;</span><br><span class="line">                dis2[v]=d;</span><br><span class="line">                q.push(make_pair(-dis2[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;,dis2[n]);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int i,j,k;</span><br><span class="line">    while(scanf(&quot;%d %d&quot;,&amp;n,&amp;m)==2)&#123;</span><br><span class="line">        memset(head,0,sizeof head);</span><br><span class="line">        for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">            int u,v,w;</span><br><span class="line">            scanf(&quot;%d %d %d&quot;,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            add(u,v,w);</span><br><span class="line">            add(v,u,w);</span><br><span class="line">        &#125;</span><br><span class="line">        dij(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注释一：因为对于次短路的更新，我们会在优先队列里面增加一些无用边，就像最短路时的vis数组一样的性质，把那些多余的边全部去掉，而这里只需要路径长度小于等于次短路的，所以大于的直接continue！</p>
</blockquote>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>双调欧几里得旅行商问题</title>
    <url>/2020/02/11/%E5%8F%8C%E8%B0%83%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E6%97%85%E8%A1%8C%E5%95%86%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>刷最短路刷着刷着怎么老遇神题，太玄学了，tcl<a id="more"></a></p>
<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2224" target="_blank" rel="noopener">题目链接</a></h2><p>题意，给予n个点的坐标，要求从第1个点走到第n个点然后再走回来且去的时候点的序号单调递增，回来的时候单调递减！</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><del>说句实在的我第一眼居然是弗洛伊德然后掉坑底怕都没爬出来</del>。<br>正解是$dp$,怎么$dp$呢</p>
<ol>
<li>我们假设$dp[i][j]$中$i$为从第i个点回到1号点，$j$为从1号点回到$j$号点，而$dp[i][j]$则是这个过程的最短距离。</li>
<li>按着这个定义来看，$dp[i][j]=dp[j][i]$。解释一下：我们对于这个问题来说$i \rightarrow 1 \rightarrow j \Leftrightarrow j \rightarrow 1 \rightarrow i$</li>
<li>那么首先假设$i&lt;j$的dp方程：<blockquote>
<ol>
<li>$i=j$  时则有$dp[i][j]=dp[i-1][j]+dis(i-1,j)$<br>解释：<script type="math/tex">i \rightarrow 1 \rightarrow j \Leftrightarrow i \rightarrow (i-1) \rightarrow 1 \rightarrow j</script></li>
<li>$i+1 &lt; j $时，则有$dp[i][j]=dp[i][j-1]$<br>解释：<script type="math/tex">i < j(i只能连小于i的边) \Rightarrow (j-1) \rightarrow j</script></li>
<li>$i+1=j$则$dp[i][j]=min(dp[i][j],dp[k][j-1]+dis(k,j))(k=1,2···,j-2 $<br>解释：因为这个时候就是相当于在路径$k \rightarrow 1 \rightarrow i$中加一条边$j\rightarrow k$则会得到$j\rightarrow 1 \rightarrow i$<br>且$k!=j-1$因为$(j-1) \rightarrow 1 \rightarrow (j-1) \rightarrow j$一定不会是最短路径，因为$j-1$点重复一次的话，假设是$x \rightarrow j-1 \rightarrow j$的长度按照三角形边长来看会发现$x\rightarrow j$的边长一定小于等于前一条边。</li>
</ol>
</blockquote>
</li>
</ol>
<p>由上三种状态可以发现我们要得到$dp[i][j]$首先就要知道$dp[i][j-1]$和$dp[i-1][j]$那么我们可以先对$j$进行遍历得到$dp[i][j-1]$，然后再从小到大遍历$i$就会得到$dp[i][j]$。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 300;</span><br><span class="line">double dp[N][N];</span><br><span class="line">struct ed&#123;</span><br><span class="line">    double x,y;</span><br><span class="line">&#125;a[N];</span><br><span class="line"></span><br><span class="line">double dis(int i,int j)&#123;</span><br><span class="line">    return sqrt((a[i].x-a[j].x)*(a[i].x-a[j].x)+(a[i].y-a[j].y)*(a[i].y-a[j].y));</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    while (scanf(&quot;%d&quot;,&amp;n)==1)</span><br><span class="line">    &#123;</span><br><span class="line">        for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            scanf(&quot;%lf %lf&quot;,&amp;a[i].x,&amp;a[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[1][2]=dis(1,2);</span><br><span class="line">        for(j=3;j&lt;=n;j++)&#123;</span><br><span class="line">            for(i=1;i&lt;j-1;i++) dp[i][j]=dp[i][j-1]+dis(j,j-1);</span><br><span class="line">            dp[j-1][j]=2e9+9;</span><br><span class="line">            for(i=1;i&lt;j-1;i++) dp[j-1][j]=min(dp[j-1][j],dp[i][j-1]+dis(i,j));</span><br><span class="line">            dp[j][j]=dp[j-1][j]+dis(j-1,j);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%.2lf\n&quot;,dp[n][n]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>差分约束系统复习</title>
    <url>/2020/02/09/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<ol>
<li>spfa对于模拟队列时，队列数组要开的尽量大！</li>
<li>spfa对于记录一个点的松弛次数应该是入队次数，而不是松弛次数。<a id="more"></a>
来个板子：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool spfa(int t)&#123;</span><br><span class="line">    int l=1,r=0;</span><br><span class="line">    que[++r]=0;</span><br><span class="line">    dis[0]=0;</span><br><span class="line">    while(l&lt;=r)&#123;</span><br><span class="line">        int u=que[l++];</span><br><span class="line">        int i;</span><br><span class="line">        vis[u]=0;</span><br><span class="line">        for(i=head[u];~i;i=ed[i].pre)&#123;</span><br><span class="line">            int v=ed[i].id,w=ed[i].w;</span><br><span class="line">            if(dis[u]+w&gt;=dis[v])&#123;</span><br><span class="line">                dis[v]=dis[u]+w;</span><br><span class="line">                if(num[v]&gt;t) return false;</span><br><span class="line">                if(vis[v]==0) que[++r]=v,vis[v]=1,num[v]++;//(num在这里重点注意);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>扩展域</title>
    <url>/2020/02/09/%E6%89%A9%E5%B1%95%E5%9F%9F/</url>
    <content><![CDATA[<p>看到学弟们都不会，那我就给个题解吧，免得一直不会，留漏洞！<br><a id="more"></a></p>
<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="http://poj.org/problem?id=1733" target="_blank" rel="noopener">题目链接</a></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>题意明显就是给$[l,r]$中有奇数个1还是偶数个1，然后看它第一次在哪里自相矛盾了，输出第一次自相矛盾的位置！</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><strong>首先离散化</strong>这个我就不说了，你们百度一下什么原理。<br>假设$[l,r]$中奇数个1表示为1，偶数个1表示为0。那么我们每一次合并$(l-1,r]$这个区间，这样就可以把所有数据都联系起来。<br>合并并查集：<br>如何合并？我们<br>那么我们就可以通过</p>
<ol>
<li>$x \rightarrow root1$(根节点)的值$d[x]$</li>
<li>$y \rightarrow root2$(根节点)的值$d[y]$</li>
</ol>
<p>得出$root1 \rightarrow root2$的值。<br>假设$root1$和$root2$相同则判断一下去看这组数据是否正确。<br>判断方法：</p>
<blockquote>
<p>$x \rightarrow root1 = d[x]$<br>  $y \rightarrow root1 = d[y]$<br>  $x \rightarrow y = x \rightarrow root1 \rightarrow y = d[x]$^$d[y]$</p>
</blockquote>
<p>不同则是：</p>
<blockquote>
<p>$root1 \rightarrow root2$的值是 $d[x]$ ^ $d[y]$ ^ $n$（$n$为$x \rightarrow y$）这个就会得到关系的值</p>
<p>解释<br>$x \rightarrow y = n$<br>$x \rightarrow root1 = d[x]$<br>$y \rightarrow root2 = d[y]$<br>则$root1 \rightarrow root2 = root1 \rightarrow x \rightarrow y\rightarrow root2 = d[x]$ ^ $d[y]$ ^ $n$</p>
</blockquote>
<p>怎么压缩路径</p>
<blockquote>
<p>$x \rightarrow y = d[x]$<br>$y \rightarrow root = d[y]$<br>那么 $x \rightarrow root = d[x]$^$d[y]$</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 5e3+5;</span><br><span class="line">int fa[2*N],d[2*N];</span><br><span class="line">int get(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(fa[x]==x)</span><br><span class="line">        return x;</span><br><span class="line">    int root = get(fa[x]);</span><br><span class="line">    d[x]^=d[fa[x]];</span><br><span class="line">    return fa[x] = root;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    int l[N],r[N],c[N],a[N*2],b[N*2];</span><br><span class="line">    char s[5];</span><br><span class="line">    int cnt=0;</span><br><span class="line">    for(i=1; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d %d %s&quot;,&amp;l[i],&amp;r[i],s);</span><br><span class="line">        if(s[0]==&apos;o&apos;)</span><br><span class="line">            c[i]=1;</span><br><span class="line">        else</span><br><span class="line">            c[i]=0;</span><br><span class="line">        a[++cnt]=--l[i],a[++cnt]=r[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a+1,a+1+cnt);</span><br><span class="line">    int cnt1=0;</span><br><span class="line">    for(i=1; i&lt;=cnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(i==1||a[i]!=a[i-1])</span><br><span class="line">            b[++cnt1]=a[i];</span><br><span class="line">    &#125;//离散化操作，我就不说了</span><br><span class="line">    for(i=0; i&lt;=cnt1; i++)</span><br><span class="line">        fa[i]=i,d[i]=0;//初始化操作</span><br><span class="line">    for(i=1; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int l1=lower_bound(b+1,b+1+cnt1,l[i])-b;</span><br><span class="line">        int r1=lower_bound(b+1,b+1+cnt1,r[i])-b;</span><br><span class="line">        int fl=get(l1),fr=get(r1);</span><br><span class="line">        if(fl!=fr)//不在同一个集合，不会冲突</span><br><span class="line">        &#123;</span><br><span class="line">            fa[fr]=fl;</span><br><span class="line">            d[fr]=c[i]^d[r1]^d[l1];</span><br><span class="line">        &#125;</span><br><span class="line">        else//在同一个集合，可能冲突！</span><br><span class="line">        &#123;</span><br><span class="line">            if(d[r1]^d[l1]!=c[i])</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;%d\n&quot;,i-1);</span><br><span class="line">                return 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;,n);//如果全部没错，就输出最后一个答案</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫</title>
    <url>/2020/02/08/%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p>爬了几个网站以后感觉自己还有好多不会的，先来看一下爬虫的基础，在复习复习，emmm，没有需求就没有学习的动力啊(或许这就是我菜的原因吧)<a id="more"></a></p>
<h1 id="爬虫的四个步骤"><a href="#爬虫的四个步骤" class="headerlink" title="爬虫的四个步骤"></a>爬虫的四个步骤</h1><ol>
<li>获取数据：爬虫根据我们的输入的网址进行访问，让后返回一系列的数据</li>
<li>解析数据：对于数据我们需要把返回的数据进行解析成我们能读懂的表达式</li>
<li>提取数据：从我们需要的地方，我们需要对这些数据进行提炼，获取我们所需要的数据。</li>
<li>保存数据：把我们已经获得的数据保存起来，方便阅读！</li>
</ol>
<p>爬虫的原理一般都是这样，<del>而反爬虫一般都是利用js等各种诡异的框架来妨碍我们获取需要的数据，当然还有通过直接封IP的，但是他的误伤率很高，因为IP换人的速度太快，不知道封多久。</del>（等以后真正确定了，再把删除线叉掉）</p>
<h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p>我们一般是通过$requests$模块来获取数据。<br>这里说明一下$requests$的功能：</p>
<ol>
<li>发起get(‘url’,**kw)请求，这是常用的获取数据的方法，kw一共是12个参数！在后面有介绍。</li>
<li>post()提交请求，对应于HTTP的post部分</li>
<li>put()请求，对应于HTTP的PUT部分</li>
<li>patch()，向html网页提交局部修改请求，对应于HTTP的patch</li>
<li>delete()，向html网页提交删除请求，对应于HTTP的delete</li>
<li>head(),获取头信息的方法，对应于HTTP的get</li>
<li>requests()，构造请求，支撑以下所有基础方法</li>
</ol>
<h3 id="requests的get调用"><a href="#requests的get调用" class="headerlink" title="requests的get调用"></a>requests的get调用</h3><p>$get(‘url’,params=None,**kwargs)$其中$kwargs$一共有12个参数：<br><img src="/2020/02/08/%E7%88%AC%E8%99%AB/4.png" alt="kw"></p>
<h2 id="response-对象"><a href="#response-对象" class="headerlink" title="$response$对象"></a>$response$对象</h2><p>在对于一个请求后返回的对象就是$response$对象，这种对象支持4种操作</p>
<ol>
<li>首先编码response.status_code()返回一个状态值，其中200为获取成功</li>
<li>response.context()获取的数据返回。</li>
<li>response.encoding定义了编码，我们可以使用response.apparent_encoding来自动获取编码，也可以自己从网站自己找编码方式</li>
<li>response.text()返回一个字符串</li>
</ol>
<h3 id="通过headers来模拟浏览器向网站发起请求"><a href="#通过headers来模拟浏览器向网站发起请求" class="headerlink" title="通过headers来模拟浏览器向网站发起请求"></a>通过headers来模拟浏览器向网站发起请求</h3><p>我们先获得自己的代理然后添加header<br>get(‘url’,headers = user-agent)</p>
<h3 id="通过修改params参数提交"><a href="#通过修改params参数提交" class="headerlink" title="通过修改params参数提交"></a>通过修改params参数提交</h3><p>我们在获取网页时加上一个自己想要访问的参数，kw=’want’<br>get(“url”,kw)<br>就会在网页上获得自己想要的数据了哟</p>
<h2 id="解析数据"><a href="#解析数据" class="headerlink" title="解析数据"></a>解析数据</h2><p>我们获取了一个数据要怎么解析呢？<br>这里我用的是$beautifulsoup$解析的网页。<br>首先$beautifulsoup$不是标准库，所以我们先安装：</p>
<blockquote>
<p>pip install beautifulsoup4</p>
</blockquote>
<p>使用简单我们直接调用就好了<br>text = BeautifulSoup(str,’html.parser’)<br>这样子我们就会把text变成一个BeautifulSoup对象，这样操作的原因<strong>BeautifulSoup对象在后面的提取数据中成了必要条件，所以必须要转对象</strong><br>同时str必须为字符串！</p>
<h2 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h2><p>emmm，这里用beatifulsoup提取数据。这里提取是通过find与find_all来提取<br>他俩的功能是匹配html的标签和属性，把BeautifulSoup对象里符合要求的数据都提取出来。<strong>区别在于，find()只提取首个满足要求的数据，而find_all()提取出的是所有满足要求的数据。</strong><br><img src="/2020/02/08/%E7%88%AC%E8%99%AB/5.png" alt="爬虫"><br>示例中是class_的原因是与类(class)区别，除了对class属性的匹配以外，还可以与其他的例如style进行匹配哦。这个函数返回的值是一个Tag对象！<br>Tag属性请参考：<br><img src="/2020/02/08/%E7%88%AC%E8%99%AB/6.png" alt="爬虫"><br>首先Tag的find和find_all返回的也是Tag对象！<br>Tag.attrs生成一个字典[‘id’:key]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import os</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">def get(id):</span><br><span class="line">    headers = &#123;&apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36&apos;&#125;</span><br><span class="line">    url = &apos;https://movie.douban.com/top250?start=&apos; + str(id) + &apos;&amp;filter=&apos;</span><br><span class="line">    rem = requests.get(url,headers = headers)</span><br><span class="line">    rem.encoding = &quot;utf-8&quot;</span><br><span class="line">    print(rem.status_code)</span><br><span class="line">    html = rem.text</span><br><span class="line">    path = os.path.abspath(&apos;.&apos;)</span><br><span class="line">    #with open(path+&apos;/豆瓣电影/html1.txt&apos;,&apos;w&apos;,encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">    #    f.write(html)</span><br><span class="line">    link = re.findall(r&apos;&lt;a href=&quot;(.*?)&quot; class=&quot;&quot;&gt;&apos;,html)</span><br><span class="line">    num=0</span><br><span class="line">    for x in link:</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        num+=1</span><br><span class="line">        rem = requests.get(x,headers = headers)</span><br><span class="line">        rem.encoding=&apos;utf-8&apos;</span><br><span class="line">        html2 = BeautifulSoup(rem.text,&apos;html.parser&apos;)</span><br><span class="line">        title = html2.find_all(&apos;span&apos;,property=&quot;v:itemreviewed&quot;)</span><br><span class="line">        print(title[0].text)</span><br><span class="line">        post = html2.find_all(&apos;span&apos;,class_ = &apos;all hidden&apos;)</span><br><span class="line">        #print(post)</span><br><span class="line">        if not post:</span><br><span class="line">            post=html2.find_all(&apos;span&apos;,property=&quot;v:summary&quot;)</span><br><span class="line">        playvideo = html2.find_all(&apos;a&apos;,class_=&quot;playBtn&quot;)</span><br><span class="line">        free = html2.find_all(&apos;span&apos;,class_=&quot;buylink-price&quot;)</span><br><span class="line">        flag = &apos;￥&apos;</span><br><span class="line">        for i in free:</span><br><span class="line">            s = str(i.text)</span><br><span class="line">            if len(s)==50:</span><br><span class="line">                flag=&apos;@&apos;</span><br><span class="line">        with open(path+&apos;/豆瓣电影/&apos;+str(num)+str(flag+title[0].text)+&apos;.txt&apos;,&apos;w&apos;,encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">            for i in post:</span><br><span class="line">                f.write(str(i.text)+&apos;\n&apos;)</span><br><span class="line">            for i in playvideo:</span><br><span class="line">                i.attrs//生成一个字典[&apos;id&apos;:&quot;key&quot;]</span><br><span class="line">                f.write(str(i[&apos;data-cn&apos;]))</span><br><span class="line">                f.write(str(i[&apos;href&apos;])+&apos;\n&apos;)</span><br><span class="line">                #print(i[&apos;data-cn&apos;],i[&apos;href&apos;])</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    get(0)</span><br></pre></td></tr></table></figure>
<h2 id="爬虫伦理"><a href="#爬虫伦理" class="headerlink" title="爬虫伦理"></a>爬虫伦理</h2><p>任何一个领域都有一些公约，那么爬虫也是如此，对于一个网站我们的公约是在网站后面添加一个$robots.txt$，你就可以查阅了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>爬虫过程<br><img src="/2020/02/08/%E7%88%AC%E8%99%AB/7.png" alt="pac"><br>find适用对象<br><img src="/2020/02/08/%E7%88%AC%E8%99%AB/8.png" alt="pac"><br>最后感谢<a href="https://blog.csdn.net/Theo93/article/details/104114352" target="_blank" rel="noopener">大佬</a>带我入坑</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>类的学习</title>
    <url>/2020/02/08/%E7%B1%BB%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>本来打算继续学习爬虫的，但是看了一下好多对象的东西要用，就还是决定先学一下$python$的类与对象算了。也算是我第一次接触对象和类了。大学一年多了，都没碰过对象和类，我真的菜！<a id="more"></a></p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="什么是类？"><a href="#什么是类？" class="headerlink" title="什么是类？"></a>什么是类？</h2><p>类就是一种抽象的模板，就像月饼的模具一样，我们要做月饼，那么就有一个模具，在这里我们称之为类。</p>
<h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><p>类的定义是由一个class定义的，一般应用时我们如下面代码一般定义<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Cat(object):</span><br><span class="line">    # 类的属性</span><br><span class="line"></span><br><span class="line">    # 类的行为</span><br></pre></td></tr></table></figure></p>
<ol>
<li>一个类的命名通常采用大驼峰式，也就是第一个字母大写。</li>
<li>对于一个类来说，我们通常定义两种类别的东西，一个叫做类的属性，一个叫做类的行为。既然是一个类那么一定有自己的属性，例如：颜色，外观，味道等等。也会有自己的行为，例如：跑，运，发霉，生锈等等动作。</li>
<li>我们对于一个类定义时后面的参数是类的父类，当没有父类时，我们选择放上$object(python3)$</li>
</ol>
<h2 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h2><p>对于一个类的属性写法在这里我们了解下面这个函数<br>$def$ $__init__$ ($self$,自定义参数):<br>这个函数的用途从单词词义来看就知道叫做初始化。我们在声明对象时，我们会默认运行此函数，那么我们就可以用这个来定义默认类的属性，对于$self$这里暂时不解释，提醒一下，类的所有函数都必须含有此参数。</p>
<h2 id="类的行为"><a href="#类的行为" class="headerlink" title="类的行为"></a>类的行为</h2><p>我们对于这个类的行为可以看成我们要这个类的所有的东西可以做什么，比如我们要月饼都运往安徽，那么我们只需要在模板里面写上一个行为“运往安徽”，那么按照这个模板生成的月饼都会运往安徽咯！<br>写法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def 函数名(self,自定义参数):</span><br><span class="line">    xxxxx</span><br></pre></td></tr></table></figure><br>下面xxx代表具体行为，看上去除了$self$以外和其他的函数没有什么差别了。这样就会产生一个简单的类</p>
<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>说了那么久的类，那么对象又是什么呢？那就是一个由月饼模板做的月饼了，直接由模板复制出来的。<br>那么对象有是怎么定义的呢？<br>我们一般采用：<strong>对象名 = 类()</strong>注意后面有个括号哟。<br>我们对于这个对象有些什么操作呢？因为$python$是动态语言，其实我们可以随时对这个对象进行增加属性！</p>
<h1 id="看代码"><a href="#看代码" class="headerlink" title="看代码"></a>看代码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Moon(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.price = &quot;10￥&quot;</span><br><span class="line">        self.to = &quot;安徽&quot;</span><br><span class="line">    def sold(self,price1):</span><br><span class="line">        print(&quot;原价：%s&quot; % self.price)</span><br><span class="line">        print(&quot;售价：%s&quot; % price1)</span><br><span class="line">        return</span><br><span class="line">if __name__ == &quot;__main__&quot;:  </span><br><span class="line">    moon = Moon()</span><br><span class="line">    moon.sold(&quot;12￥&quot;)</span><br></pre></td></tr></table></figure>
<p>这样$__init__$就是定义属性,$sold$就是一个行为函数了</p>
<h2 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h2><p>看了一下<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017496031185408" target="_blank" rel="noopener">廖雪峰</a>大神的博客，封装就是执行操作时，不需要对一个类里面的数据进行访问，直接把操作放在类里面，以后调用时就不用考虑类里面的行为咯，像极了我的行为函数啊。hhh</p>
]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>zoj2770差分约束</title>
    <url>/2020/02/07/zoj2770%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<p>emmm,好久没刷题，手感都快没了，先来养下手感<a id="more"></a></p>
<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://vjudge.net/problem/ZOJ-2770#author=zuodiedai" target="_blank" rel="noopener">题目链接</a></h2><p>题意大概就是给我们$n$个营地，$c[i]$表示第$i$个营地最多的人数，第$u$-第$v$个营地一共有$w$个人。问最少有多少人。<br>对于这种题型，我们一般做法是首先确定一个数组表示前面$i$个营地的总人数</p>
<blockquote>
<p>挖掘隐藏条件，每一个营地的人数不可能为负数，所以$a[i]-a[i-1]\geq0$<br>每个营地最多有$i$人，我们可以知道，$a[i]-a[i-1]\leq c[i]$<br>$u-v$一共最少有$w$人，我们可以得出，$a[u]-a[v-1]\geq w$</p>
</blockquote>
<p>我们可以把第二个条件化简为</p>
<script type="math/tex; mode=display">a[i]-a[i-1]\leq a[i] \rightarrow a[i-1]-a[i] \geq -c[i]</script><p>由上化简，我们就把所有的代数式换成了大于等于的形式，开始建图了<br>题目要求的是最小的人数，那么也就是$min(a[n]-a[0])$那么我们就可以这么建图：</p>
<blockquote>
<p>我们按照从被减数向减数建一条边，边权为右边的值。</p>
</blockquote>
<p>这样建图有什么好处？因为我们要求的是$min(a[n]-a[0])$，而我们这么建图就会使源点$0$到达的任意一个$v$最长路长度都是最少的人数，为什么是最长路？大于等于符号决定的呀，<strong>当大于等于时，只有最长路不会和其他方向的边冲突，小于等于时，我们只有最短路不会和其他方式的边冲突</strong>。<br>接下来看代码，spfa版本<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">//#include&lt;windows.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e5+5;</span><br><span class="line">int deq[N*2],a[N],head[N],tot=0;</span><br><span class="line">struct ED</span><br><span class="line">&#123;</span><br><span class="line">    int pre,to,w;</span><br><span class="line">&#125;ed[2*N];</span><br><span class="line">int vis[N],dis[N],num[N];</span><br><span class="line">void spfa(int x)&#123;</span><br><span class="line">    memset(dis,-1,sizeof dis);</span><br><span class="line">    memset(vis,0,sizeof vis);</span><br><span class="line">    memset(deq,0,sizeof deq);</span><br><span class="line">    memset(num,0,sizeof num);</span><br><span class="line">    dis[0]=0;</span><br><span class="line">    int l=1,r=0;</span><br><span class="line">    deq[++r]=0;</span><br><span class="line">    while(l&lt;=r)&#123;</span><br><span class="line">        int u=deq[l];</span><br><span class="line">        l++;</span><br><span class="line">        vis[u]=0;</span><br><span class="line">        //printf(&quot;%dsss\n&quot;,u);</span><br><span class="line">        for(int i=head[u];~i;i=ed[i].pre)&#123;</span><br><span class="line">            int v=ed[i].to;</span><br><span class="line">            //printf(&quot;%d %d %d %d %d\n&quot;,u,v,dis[u],ed[i].w,dis[v]);</span><br><span class="line">            if(dis[v]&lt;dis[u]+ed[i].w) &#123;</span><br><span class="line">                dis[v]=dis[u]+ed[i].w;</span><br><span class="line">                if(vis[v]) continue;</span><br><span class="line">                deq[++r]=v;</span><br><span class="line">                num[v]++;</span><br><span class="line">                if(num[v]&gt;=x) &#123;</span><br><span class="line">                    printf(&quot;Bad Estimations\n&quot;);</span><br><span class="line">                    return ;</span><br><span class="line">                &#125;</span><br><span class="line">                vis[v]=1;</span><br><span class="line">                //printf(&quot;%d %d\n&quot;,u,v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(dis[x]==-1)&#123;</span><br><span class="line">        printf(&quot;Bad Estimations\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,dis[x]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void add(int u,int v,int w)&#123;</span><br><span class="line">    ed[++tot].pre=head[u];</span><br><span class="line">    ed[tot].to=v;</span><br><span class="line">    ed[tot].w=w;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m,i,j,k;</span><br><span class="line">    while (scanf(&quot;%d %d&quot;,&amp;n,&amp;m)==2)</span><br><span class="line">    &#123;</span><br><span class="line">        tot=0;</span><br><span class="line">        for(i=0;i&lt;=n;i++)&#123;</span><br><span class="line">            head[i]=-1;</span><br><span class="line">        &#125;</span><br><span class="line">        for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">            add(i-1,i,0);</span><br><span class="line">            add(i,i-1,-a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        int u,v,w;</span><br><span class="line">        for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">            scanf(&quot;%d %d %d&quot;,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            add(u-1,v,w);</span><br><span class="line">        &#125;</span><br><span class="line">        spfa(n);</span><br><span class="line">    &#125;</span><br><span class="line">    //system(&quot;pause&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>不用队列，方便优化</p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬取王者数据</title>
    <url>/2020/02/06/python%E7%88%AC%E5%8F%96%E7%8E%8B%E8%80%85%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>正则已经学完了，就要开始玩爬虫了呀，我们首先爬一个王者的数据，来好好看看吧<a id="more"></a></p>
<h1 id="requests"><a href="#requests" class="headerlink" title="$requests$"></a>$requests$</h1><p>首先我们安装这一个requests模块，在终端输入</p>
<ol>
<li>pip install requests</li>
</ol>
<p>利用$r=requests.get()$来进行对一个网页的获取，返回一个二进制字符串，为了不把字符转乱码，我们一般使用正确的编码格式，这个编码格式一般在网页上写着！或者使用$r.apparent_encoding$的函数自动获取，不过不保证完全准确！<br>转字符串时可以使用$html=r.text$返回字符串，<strong>详情请看<a href="https://dream-ak.top/2020/02/08/爬虫" target="_blank" rel="noopener">爬虫</a>这篇博客</strong></p>
<h2 id="强行爬虫"><a href="#强行爬虫" class="headerlink" title="强行爬虫"></a>强行爬虫</h2><p>在爬<a href="https://www.vmgirls.com" target="_blank" rel="noopener">https://www.vmgirls.com</a> 时会发现不允许爬取，那么有一个玄学的爬取方法，这个网站是通过判断代理服务来判断是不是爬虫，在requests时会发送一个爬虫请求，该网站如果发现是爬虫时，那么我们就可以把requests发送的代理服务改掉,通过在$requests(‘<a href="https://vmgirls.com/&#39;,headers=&quot;本地代理&quot;)$。" target="_blank" rel="noopener">https://vmgirls.com/&#39;,headers=&quot;本地代理&quot;)$。</a><br>本地代理可以在网页上查看！</p>
<h1 id="re-findall"><a href="#re-findall" class="headerlink" title="$re.findall()$"></a>$re.findall()$</h1><p>我们一般使用这个来获取自己需要的信息。</p>
<ol>
<li>()括号内表示需要的信息，没有括号则表示不需要的信息</li>
<li>[]匹配时我们需要写一个自己的字符分类，然后去选择自己的信息</li>
<li>findall(r’’,txt)是格式,r后跟着自己的匹配方式。</li>
</ol>
<h1 id="os"><a href="#os" class="headerlink" title="os"></a>os</h1><p>文件读写：</p>
<ol>
<li>对于文件读写我们一般是使用$with$ $open(“文件路径”,’读写方式’,’encoding=编码规则’) as f:$</li>
<li>对于文件路径可以使用绝对路径，编码规则须和字符串的编码规则相同。</li>
</ol>
<h1 id="time"><a href="#time" class="headerlink" title="time"></a>time</h1><p>为了网站的稳定性能我们一般要去使用$time.sleep()$来控制爬取速度。</p>
<h1 id="最后来看一下我们是如何爬取王者的："><a href="#最后来看一下我们是如何爬取王者的：" class="headerlink" title="最后来看一下我们是如何爬取王者的："></a>最后来看一下我们是如何爬取王者的：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">r = requests.get(&apos;https://pvp.qq.com/web201605/herolist.shtml&apos;)</span><br><span class="line">r.encoding=&quot;gbk&quot;</span><br><span class="line">html = r.text</span><br><span class="line">http = &quot;https://pvp.qq.com/web201605/&quot;</span><br><span class="line">dirs = os.path.abspath(&apos;.&apos;)</span><br><span class="line">dir_name = re.findall(r&apos;&lt;li&gt;&lt;a href=&quot;([a-z0-9/.]*)&quot; target=&quot;_blank&quot;&gt;&lt;img+\s&apos;,html)</span><br><span class="line">for i in dir_name:</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    r = requests.get(http+i)</span><br><span class="line">    r.encoding=&apos;gbk&apos;</span><br><span class="line">    html1=r.text</span><br><span class="line">    hero = re.findall(r&apos;&lt;h2 class=&quot;cover-name&quot;&gt;(.*?)&lt;/h2&gt;&apos;,html1)</span><br><span class="line">    print(hero)</span><br><span class="line">    skin = re.findall(r&apos;&lt;ul class=&quot;pic-pf-list pic-pf-list3&quot; data-imgname=&quot;([\S]*)&quot;&gt;&apos;,html1)</span><br><span class="line">    skill_name = re.findall(r&apos;&lt;p class=&quot;skill-name&quot;&gt;&lt;b&gt;(.*?)&lt;/b&gt;&lt;span&gt;(.*?)&lt;/span&gt;&lt;span&gt;(.*?)&lt;/span&gt;&lt;/p&gt;&apos;,html1)</span><br><span class="line">    skill_decs = re.findall(r&apos;&lt;p class=&quot;skill-desc&quot;&gt;(.*?)&lt;/p&gt;&apos;,html1)</span><br><span class="line">    skill_tips = re.findall(r&apos; &lt;div class=&quot;skill-tips&quot;&gt;(.*?)&lt;/div&gt;&apos;,html1)</span><br><span class="line">    lens = len(skill_tips)</span><br><span class="line">    with open(dirs+&apos;/&apos;+&apos;王者荣耀&apos;+&apos;/&apos;+hero[0]+&apos;.txt&apos;,&apos;w&apos;,encoding=&apos;gbk&apos;) as f:</span><br><span class="line">        f.write(&quot;英雄名称：&quot;+hero[0]+&apos;\n&apos;)</span><br><span class="line">        f.write(&quot;皮肤：&quot;+skin[0]+&apos;\n\n&apos;)</span><br><span class="line">        for j in range(0,lens,1):</span><br><span class="line">            f.write(&quot;技能名称：&quot;+skill_name[j][0]+&apos;\n&apos;)</span><br><span class="line">            f.write(&quot;技能冷却：&quot;+skill_name[j][1]+&apos;\n&apos;)</span><br><span class="line">            f.write(&quot;技能消耗：&quot;+skill_name[j][2]+&apos;\n&apos;)</span><br><span class="line">            f.write(&quot;技能描述：&quot;+skill_decs[j]+&apos;\n&apos;)</span><br><span class="line">            f.write(&quot;技能用途：&quot;+skill_tips[j]+&apos;\n&apos;)</span><br><span class="line">            f.write(&apos;\n&apos;)</span><br></pre></td></tr></table></figure>
<p>还是有点不会写文件的保存格式，呜呜呜，只会狂写编码了。。。<br>最后来看一下效果：<br><img src="/2020/02/06/python%E7%88%AC%E5%8F%96%E7%8E%8B%E8%80%85%E6%95%B0%E6%8D%AE/1.png" alt="信息"><br><img src="/2020/02/06/python%E7%88%AC%E5%8F%96%E7%8E%8B%E8%80%85%E6%95%B0%E6%8D%AE/2.png" alt="东西"></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2020/02/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>$emmmm$，开始来学一些能够飘得的玩意了，虽然以前我玩过这个$python$的爬虫，但是今天来系统学习一下，$hhh$<br><a id="more"></a></p>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="匹配方式"><a href="#匹配方式" class="headerlink" title="匹配方式"></a>匹配方式</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">字符表达</th>
<th style="text-align:center">意义</th>
<th style="text-align:center">例子</th>
<th style="text-align:center">例子解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\d</td>
<td style="text-align:center">匹配一个数字</td>
<td style="text-align:center">\d{3}</td>
<td style="text-align:center">匹配三个数字</td>
</tr>
<tr>
<td style="text-align:center">\w</td>
<td style="text-align:center">匹配一个字母</td>
<td style="text-align:center">\w{3}</td>
<td style="text-align:center">匹配三个字母</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td style="text-align:center">可选匹配，前面括号内符号可以匹配一次或者零次</td>
<td style="text-align:center">(wo)?man</td>
<td style="text-align:center">匹配man或者woman</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">匹配零次或多次</td>
<td style="text-align:center">(wo)*man</td>
<td style="text-align:center">代表可以匹配man、wowoman等等</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">匹配一次或多次</td>
<td style="text-align:center">((wo)+man)</td>
<td style="text-align:center">代表可以匹配woman、wowoman等等</td>
</tr>
<tr>
<td style="text-align:center">{}</td>
<td style="text-align:center">指定匹配次数</td>
<td style="text-align:center">(wo){2,5}man</td>
<td style="text-align:center">可以匹配wo重复2到5遍的此类字符串</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">管道，指定多种字符模式，返回第一次出现的文本它是一竖</td>
<td style="text-align:center">‘Batman 1 Tina Fey’</td>
<td style="text-align:center">表示查找Batman和Tina Fey的第一次出现的字符</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">直接从头开始匹配</td>
<td style="text-align:center">^hello</td>
<td style="text-align:center">从头开始匹配hello</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td style="text-align:center">必须以该字符结束</td>
<td style="text-align:center">3$</td>
<td style="text-align:center">必须以3结尾</td>
</tr>
</tbody>
</table>
</div>
<p><strong>正则匹配是一种贪心匹配(能长则长)，而花括号的匹配是一种非贪心匹配(能短则短)</strong></p>
<ol>
<li>search：每一次返回第一次找到的字符串</li>
<li>findall：返回整个text的所有的字符串</li>
</ol>
<h2 id="字符分类"><a href="#字符分类" class="headerlink" title="字符分类"></a>字符分类</h2><h3 id="字符表达式"><a href="#字符表达式" class="headerlink" title="字符表达式"></a>字符表达式</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">字符分类</th>
<th style="text-align:center">表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\d</td>
<td style="text-align:center">0到9的任何数字</td>
</tr>
<tr>
<td style="text-align:center">\D</td>
<td style="text-align:center">除0到9的任何数字</td>
</tr>
<tr>
<td style="text-align:center">\w</td>
<td style="text-align:center">任何字母、数字、下划线字符</td>
</tr>
<tr>
<td style="text-align:center">\W</td>
<td style="text-align:center">除字母、数字、下划线字符外的任意字符</td>
</tr>
<tr>
<td style="text-align:center">\s</td>
<td style="text-align:center">空格、制表符、换行符</td>
</tr>
<tr>
<td style="text-align:center">\S</td>
<td style="text-align:center">除空格、制表符、换行符以外的任意字符</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">匹配除换行以外所有字符</td>
</tr>
<tr>
<td style="text-align:center">.*</td>
<td style="text-align:center">匹配所有字符</td>
</tr>
</tbody>
</table>
</div>
<h3 id="建立自己的字符分类"><a href="#建立自己的字符分类" class="headerlink" title="建立自己的字符分类"></a>建立自己的字符分类</h3><ol>
<li>[quit]表达可以匹配quit里面的任意一个字符</li>
<li>[ ^quit ]表达非quit里面任意一个字符的字符<br><strong>可以通过短横来表达字母或数字的范围[a-zA-Z0-9]将匹配所有字母和数字</strong></li>
</ol>
<h2 id="文本替换"><a href="#文本替换" class="headerlink" title="文本替换"></a>文本替换</h2><p>正则表达式不仅能找到文本模式，而且能够用新的文本替换掉这些模式。$Regex$对象的 $sub()$方法需要传入两个参数。第一个参数是一个字符串，用于取代发现的匹 配。第二个参数是一个字符串，即 正则表达式。$ sub()$方法返回替换完成后的字符串。<br>举个例子：</p>
<pre><code>&gt;&gt;&gt; namesRegex = re.compile(r&#39;Agent \w+&#39;) 
&gt;&gt;&gt; namesRegex.sub(&#39;CENSORED&#39;, &#39;Agent Alice gave the secret documents to Agent Bob.&#39;)
&#39;CENSORED gave the secret documents to CENSORED.&#39;
</code></pre>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python刷题</title>
    <url>/2020/02/04/python%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<p>终于$python$有点上道了，开始我的磕磕绊绊刷题计划<a id="more"></a></p>
<h1 id="一行内多次输入"><a href="#一行内多次输入" class="headerlink" title="一行内多次输入"></a>一行内多次输入</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n,m=int(input.slipt())</span><br></pre></td></tr></table></figure>
<p>这样就可以一行输入两个数了，hhh(抄的)</p>
<h1 id="一行多输出"><a href="#一行多输出" class="headerlink" title="一行多输出"></a>一行多输出</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&apos; &apos;.join(map(str,a)))</span><br></pre></td></tr></table></figure>
<p>这个能把一个数组中间加入空格并输出。</p>
<h2 id="看题目"><a href="#看题目" class="headerlink" title="看题目"></a>看题目</h2><p>现在来看$Nod51$题目：<br>冒办法，我找了半天就只有$codeforce$和$Nod51$支持$python3$了</p>
<h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a><a href="51nod.com/Challenge/Problem.html#problemId=2738">全排列</a></h3><p>题面很好懂，解法很好想，就是被输出卡了。。。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = []</span><br><span class="line">n,m=map(int,input().split())</span><br><span class="line">def dfs(l,r):</span><br><span class="line">    if m==r:</span><br><span class="line">        print(&apos; &apos;.join(map(str,a)))</span><br><span class="line">        return </span><br><span class="line">    else :</span><br><span class="line">        for i in range(l+1,n+1,1):</span><br><span class="line">            a.insert(r,i)</span><br><span class="line">            dfs(i,r+1)</span><br><span class="line">            a.pop(r)</span><br><span class="line">        return </span><br><span class="line">dfs(0,0)</span><br></pre></td></tr></table></figure></p>
<p>a序列放前面一点就能被后面函数调用了，hhh，强行全局</p>
]]></content>
      <categories>
        <category>python刷题</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>map与reduce</title>
    <url>/2020/02/04/map%E4%B8%8Ereduce/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>函数</title>
    <url>/2020/02/03/%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>终于到激动人心的时刻了，我们开始学习$python$函数了，有点小快啊，hhh<a id="more"></a></p>
<h1 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h1><h2 id="def"><a href="#def" class="headerlink" title="$def$"></a>$def$</h2><p>定义一个函数要使用$def$语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。<br>拿一个从$l$加到$r$的和的函数来讲<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def sum(l,r):</span><br><span class="line">    sum = 0</span><br><span class="line">    for i in range(l,r+1,1):</span><br><span class="line">        sum += i</span><br><span class="line">    return sum</span><br><span class="line">l = int(input(&quot;l=&quot;))</span><br><span class="line">r = int(input(&quot;r=&quot;))</span><br><span class="line">print(sum(l,r))</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>$output$<br>l=1<br>r=100<br>5050</p>
</blockquote>
<h2 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h2><p>比如上面的参数就叫做位置参数，调用$sum$函数时，必须给予两个固定参数</p>
<h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>看一个代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def mul(a,b = 3):</span><br><span class="line">    print(a*b)</span><br><span class="line">mul(2)</span><br><span class="line">mul(2,4)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>$output$<br>6<br>8</p>
</blockquote>
<p>这个和上面的参数比较不同点在于，在定义参数的时候对一个参数赋值，这种写法叫做默认参数</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>我们调用函数时，对于默认参数可以选择性增加调用值。更大的符合了用户的情况</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol>
<li>对于默认参数我们一般默认，变化大的在前，变化小的在后</li>
<li>且对于默认参数放在位置参数以后</li>
<li>对于默认参数赋值必须赋为不变对象</li>
</ol>
<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>可变参数：调用时，输入的长度可以是任意个。在传入以后自动组成一个$tuple$<br>比如我们要对一个$list$或$tuple$进行和运算，由于每一个$list$的长度不定。所以我们需要一个可变参数。<br>来看一个代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def sum1(*lis):</span><br><span class="line">    sum = 0</span><br><span class="line">    for i in lis:</span><br><span class="line">        sum += i</span><br><span class="line">    return sum</span><br><span class="line">a = [1,2,5,7]</span><br><span class="line">b = [5,9,8]</span><br><span class="line">print(sum1(*a))</span><br><span class="line">print(sum1(*b))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>$output$<br>15<br>22</p>
</blockquote>
<p>可以发现，好像就是C语言传入指针了，对的，C语言遮掩好像也可以，就是长度问题而已。<br>下面这些要用的时候再补充吧，暂时请参考<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017261630425888" target="_blank" rel="noopener">廖雪峰</a></p>
<h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><p>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。<br>他的功能，给与用户想给的一些多余的信息，也可以进行收集。</p>
<h2 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h2><p>对于关键字参数进行一定的限制</p>
]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>dict和set</title>
    <url>/2020/02/03/dict%E5%92%8Cset/</url>
    <content><![CDATA[<p>$dict$我发现与$c++$的$map$十分相似,而$set$好像名字都没变，由于$c++$只学皮毛，就不瞎说了，慢慢学吧<a id="more"></a></p>
<h1 id="dict"><a href="#dict" class="headerlink" title="$dict$"></a>$dict$</h1><h2 id="dict-的结构"><a href="#dict-的结构" class="headerlink" title="$dict$的结构"></a>$dict$的结构</h2><p>这里按照廖雪峰的介绍给出两种方式</p>
<ol>
<li>按照字典树的方式建立一棵字典树，优点不会出现冲突，可直接使用，缺点相较于哈希来说，查找较慢</li>
<li>直接建立一个哈希表，每一次按照$key$直接哈希地址然后得到答案，优点，查找方便。缺点：容易出现哈希冲突。</li>
</ol>
<p>$dict$是第二种建立方式，因此$key$的值是唯一的，不可重复，<strong>如果重复了那么就会将前面得到的数据丢失冲掉。</strong></p>
<h2 id="dict-的建立"><a href="#dict-的建立" class="headerlink" title="$dict$的建立"></a>$dict$的建立</h2><p>首先来看一段代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a=&#123;&#125;</span><br><span class="line">a[&apos;peng&apos;] = 4</span><br><span class="line">a[&apos;我&apos;] = 5</span><br><span class="line">print(a[&apos;我&apos;])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>$output$<br>5</p>
</blockquote>
<p>可以看到我们是通过大括号{}来定义一个空$dict$然后添加直接赋值就好了。调用直接访问$key$就行了，但是一定要保证这个$key$存在。<br>判断$key$存在性的办法：</p>
<blockquote>
<ol>
<li>$print(‘我’\ in\ a) $<br>如果存在，返回$true$。不存在返回false。</li>
<li>$print(a.get( ‘我’,x))$<br>当不存在‘我’时返回$x$值</li>
</ol>
</blockquote>
<h2 id="dict-的删除"><a href="#dict-的删除" class="headerlink" title="$dict$的删除"></a>$dict$的删除</h2><p>这个的删除我们前提是$key$存在,如果存在，我们就可以像$list$一样删除它。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.pop(&apos;peng&apos;)</span><br><span class="line">print(a.get(&apos;peng&apos;,777))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>$output$<br>777</p>
</blockquote>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>$dict$可以用在需要高速查找的很多地方，在$Python$代码中几乎无处不在，正确使用$dict$非常重要，需要牢记的第一条就是$dict$的key必须是不可变对象。</p>
<p>这是因为$dict$根据$key$来计算$value$的存储位置，如果每次计算相同的$key$得出的结果不同，那$dict$内部就完全混乱了。这个通过$key$计算位置的算法称为哈希算法$（Hash）$。</p>
<p>要保证$hash$的正确性，作为$key$的对象就不能变。在$Python$中，字符串、整数等都是不可变的，因此，可以放心地作为$key$。而$list$是可变的，就不能作为$key$</p>
<h1 id="set"><a href="#set" class="headerlink" title="$set$"></a>$set$</h1><p>$set$一般用于去重和集合操作，它可以对集合进行”与”、”或”操作.</p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>创建一个空$set$<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = set()</span><br></pre></td></tr></table></figure></p>
<p>创建一个$set$我们一般是要一个$list$做输入集合<br>看一段代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">l = [1,1,5,9,3,8,9]</span><br><span class="line">a = set(l)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>$output$<br>{1, 3, 5, 8, 9}</p>
</blockquote>
<p>很明显它自己去重了，同时<strong>不要被表面所迷惑$set$是无序的</strong></p>
<h2 id="set-怎么添加元素？"><a href="#set-怎么添加元素？" class="headerlink" title="$set$怎么添加元素？"></a>$set$怎么添加元素？</h2><p>答案下行揭晓<br>$a.add(x)$参数$x$是你要添加的$key$<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.add(2)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>$output$<br>{1, 2, 3, 5, 8, 9}</p>
</blockquote>
<h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><p>我们一般通过$a.remove(x)$删除,$x$是你要删除的$key$<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.remove(2)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>$output$<br>{1, 3, 5, 8, 9}</p>
</blockquote>
<h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><p>直接&amp;或者|就好了<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b=set([1,2])</span><br><span class="line">print(a&amp;b)</span><br><span class="line">print(a|b)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>$output$<br>{1}<br>{1, 2, 3, 5, 8, 9}</p>
</blockquote>
<h2 id="不可变变量"><a href="#不可变变量" class="headerlink" title="不可变变量"></a>不可变变量</h2><p>字符串属于不可变变量，同时$list$是一个可变变量。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = &quot;abc&quot;</span><br><span class="line">print(a.replace(&apos;a&apos;,&apos;A&apos;))</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>条件与循环</title>
    <url>/2020/02/03/%E6%9D%A1%E4%BB%B6%E4%B8%8E%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<p>$hhh$还记得我之前说的$python$是如何将区分作用域划分代码块吗？没错就是$’:’$这个，他会自动缩进<a id="more"></a></p>
<h1 id="if-判断"><a href="#if-判断" class="headerlink" title="$if$判断"></a>$if$判断</h1><p>首先我们来看一段代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socre=int(input())</span><br><span class="line">if score&gt;=60:</span><br><span class="line">    print(&quot;pass\n&quot;)</span><br><span class="line">else :</span><br><span class="line">    print(&quot;No pass\n&quot;)</span><br></pre></td></tr></table></figure><br>这个就可以把你的分数转化成过和没过了，挂科了没，一目了然！<br>对于这段代码的解释我就对他与C语言的比较了。<br><strong>没有C语言的小括号，$if$后面全是判断一直到$’:’$</strong><br>对于else 我们也需要$’:’$<br>如果进行多次判断由C语言的$else if$ $\rightarrow$ $elif 判断:$</p>
<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="for-…-in-循环"><a href="#for-…-in-循环" class="headerlink" title="$for$ … $in$循环"></a>$for$ … $in$循环</h2><p>这种循环我们一般是用一个变量每一次迭代$in$里面的内容(可以是$list,tuple$等数据结构)，比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x=(5,2,0)</span><br><span class="line">for i in x:</span><br><span class="line">    print(i)</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">&gt; $output$</span><br><span class="line">5</span><br><span class="line">2</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">## $for$ ... $in$ $range(x,y,z)$循环</span><br><span class="line">我们看这个循环 其中省略号代表变量，我们假设为$i$</span><br><span class="line">现在来解释一下参数</span><br><span class="line">1. $x$代表$i$的初始值</span><br><span class="line">2. $y$代表$i$的上界或下界,**不得小于等于$y$**</span><br><span class="line">3. $z$代表$i$的步进大小每一次加上多少</span><br><span class="line"></span><br><span class="line">来看一段代码</span><br></pre></td></tr></table></figure>
<p>for i in range(3,1,-1):<br>    print(i)<br>```</p>
<blockquote>
<p>$output$<br>3<br>2</p>
</blockquote>
]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>list和tuple</title>
    <url>/2020/02/02/list%E5%92%8Ctuple/</url>
    <content><![CDATA[<p>对于这个list的了解我一直感觉就和C语言数组一样，但是仔细看了一下，到底不同，就让本蒟蒻带您去看看那些地方不同吧。<a id="more"></a></p>
<h1 id="list"><a href="#list" class="headerlink" title="$list$"></a>$list$</h1><p>这种数据类型使列表<strong> $list$是一种有序的集合，可以随时添加和删除其中的元素。</strong><br>对于这个我们可以看下面这个例子<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a=[&apos;s&apos;,&apos;a&apos;,&apos;r&apos;,&apos;s&apos;]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>$ output$:<br>$[‘s’, ‘a’, ‘r’, ‘s’]$</p>
</blockquote>
<p>而一个$list$的长度怎么看？还记得看字符串长度的$len$函数吗？<br>我们就是通过$len$来查看list的长度<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(len(a))</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>$output:$<br>4</p>
</blockquote>
<p>同时我们还可以通过像C语言一样的手法访问下标来查看元素，同样不能越上界<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(a[0])</span><br><span class="line">print(a[3])</span><br><span class="line">print(a[-1])</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>$output$<br>s<br>s<br>s<br>应该发现了，可以有负数，-1的意思就是倒数第一个咯。但是也不能超过$list$的长度</p>
<h2 id="list-包含的数据类型"><a href="#list-包含的数据类型" class="headerlink" title="$list$包含的数据类型"></a>$list$包含的数据类型</h2><p><strong>$list$里面包含的数据类型可以混合加入</strong><br>例如我们可以在一个list里面放入数字、字符串甚至是一个$list$也行！</p>
</blockquote>
<h2 id="list-的操作"><a href="#list-的操作" class="headerlink" title="$list$的操作"></a>$list$的操作</h2><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.pop(0)</span><br><span class="line">print(a)</span><br><span class="line">print(a[0])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>$output:$<br>$[‘a’, ‘r’, ‘s’]$<br>$a$</p>
</blockquote>
<p>我们可以看到，要删除第i个数字就是直接$pop(i)$，同时会把后面的往前面移动</p>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.insert(0,a)</span><br><span class="line">print(a)</span><br><span class="line">print(a[0])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>$output:$<br>$[‘s’, ‘a’, ‘r’, ‘s’]$<br>$s$<br>每一次插入，我们都是把第$i$个元素之后往后移动，然后插入</p>
<h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><p>$a.append(strr)$默认从尾部增加元素</p>
<h1 id="tuple"><a href="#tuple" class="headerlink" title="$tuple$"></a>$tuple$</h1><p>$tuple$也是一种有序列表，它的特点是一旦初始化成功后就不得修改</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = (&apos;s&apos;,&apos;a&apos;,&apos;r&apos;,&apos;s&apos;);</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<p>$output$<br>(‘s’, ‘a’, ‘r’, ‘s’)</p>
</blockquote>
<p>大家可能发现了，$list$的定义时中括号$[]$而$tuple$是$()$<br><strong>注意</strong>我们定义空$tuple$时我们是$a=()$,但是如果定义一个元素时例如$a=(1,)$时，我们注意要打逗号，不然会被误解为$a=1$为$int$型变量</p>
<h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>$tuple$因其不可修改的性质所以从安全角度上来说比$list$更加安全，我们一般能用$tuple$绝不用$list$</p>
<h2 id="一个“可变的”-tuple"><a href="#一个“可变的”-tuple" class="headerlink" title="一个“可变的”$tuple$"></a>一个“可变的”$tuple$</h2><p>首先注意引号，他还是不可变的，可为什么又可以变呢？<br>我们尝试如下定义</p>
<blockquote>
<p>$a=(‘a’,’b’,[‘a’,’b’])$</p>
</blockquote>
<p>可以发现这一个$tuple$所指向的内容含有字符和一个$list$<br>$tuple$里面的内容的确不可以变，但$list$改变了之后list的地址还是不变的，所以就改了撒，看不懂可评论。</p>
]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python字符串和数组元组</title>
    <url>/2020/02/02/python%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>首先我得说一句，这里得字符串编码有点玄学，如果讲开了有点可怕，所以我就在最开始得地方放一个大佬的链接算了，方便以后查阅<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017075323632896" target="_blank" rel="noopener">廖雪峰的笔记</a><br><a id="more"></a></p>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>对于$python3$的编码格式是一个$Unicode$编码</p>
<h2 id="unicode-编码"><a href="#unicode-编码" class="headerlink" title="$unicode$编码"></a>$unicode$编码</h2><p>粗略解释一下，详情请访问廖雪峰的笔记：</p>
<blockquote>
<p>$Unicode$解决了各国语言的编码冲突，利用两个字节。<br>$UTF-8$编码是因为$Unicode$对于空间来说浪费高，所以折中出现了utf-8编码</p>
</blockquote>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>在计算机内存中，统一使用$Unicode$编码，当需要保存到硬盘或者需要传输的时候，就转换为$UTF-8$编码。</p>
<ol>
<li>用记事本编辑的时候，从文件读取的$UTF-8$字符被转换为$Unicode$字符到内存里，编辑完成后，保存的时候再把$Unicode$转换为$UTF-8$保存到文件。</li>
<li>浏览网页的时候，服务器会把动态生成的$Unicode$内容转换为$UTF-8$再传输到浏览器：<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2>$python3$的字符串是$Unicode$编码，也就是适合各种语言啦<blockquote>
<p>对于单个字符来说，我们支持$ord()$获得字符整数表示，$chr()$把编码转为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(chr(20320))</span><br><span class="line">print(ord(&apos;你&apos;))</span><br></pre></td></tr></table></figure>
<p>输出<br>你<br>20320</p>
</blockquote>
</li>
</ol>
<h3 id="len-计算字符串的字符数"><a href="#len-计算字符串的字符数" class="headerlink" title="$len$计算字符串的字符数"></a>$len$计算字符串的字符数</h3><p>$len(str)$返回一个整数，表示$str$所含有的字符数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strr=&quot;我爱你&quot;</span><br><span class="line">print(len(strr))</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>$output:$<br>3</p>
<h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><p>$python$的格式化和C语言的大致相同<br>|占位符|替换内容|<br>|:-:|:-:|<br>|%s|字符串|<br>|%d|整数|<br>|%f|浮点数|<br>|%x|16进制整数|<br>不过有个区别我表示的重点提醒：<strong>print(“%s” % strr),不像C语言中间用逗号分隔</strong><br>顺带一个妙招，当你忘了要用什么的时候可以使用%s哦，他会自动转字符串，hhh<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&quot;%s %s&quot; % (520,False))</span><br></pre></td></tr></table></figure></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>对于$python$里的字符中不能直接相加，需要先把它用$ord$转成数字然后再用$chr$转回来！</li>
<li>对于字符串里面字符修改必须使用$repalce(old,new,count)$进行生成新的字符串对象！</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def index(head):</span><br><span class="line">    head=str(head)</span><br><span class="line">    if head[0]&gt;=&apos;a&apos;and head[0]&lt;=&apos;z&apos;:</span><br><span class="line">        return head.replace(head[0],chr(ord(head[0])-32),1)#返回一个新的字符串对象</span><br><span class="line">    return head</span><br><span class="line">L1 = [&apos;adam&apos;, &apos;LISA&apos;, &apos;barT&apos;]</span><br><span class="line">L2 = map(index,L1)</span><br><span class="line">print(list(L2))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python启动</title>
    <url>/2020/02/02/python%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p>在家无聊，想到python貌似挺好玩的，我就来试试，hhh，祝病毒早日被消灭<a id="more"></a></p>
<h1 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h1><h2 id="python编码格式"><a href="#python编码格式" class="headerlink" title="python编码格式"></a>python编码格式</h2><p>python的编码格式是按照缩进方式，代码就像下面这个一样：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = 100</span><br><span class="line">if a &gt;= 0:</span><br><span class="line">    print(a)</span><br><span class="line">else:</span><br><span class="line">    print(-a)</span><br></pre></td></tr></table></figure><br>和C语言的差别是c语言用大括号等价于这里的缩进</p>
<h2 id="python的注释"><a href="#python的注释" class="headerlink" title="python的注释"></a>python的注释</h2><blockquote>
<p>python的注释是通过#,以#开头全部注释掉<br>每遇到一个’$:$’号都会进行自动缩进，视为一个代码块<br>python大小写敏感。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><p>范围和C语言的$longlong$一致，应用方式和C语言用法一致</p>
<h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>字符串，他的用法和C语言的字符串用法类似，但是<strong>增加了$a[-x]$表示从后开始第x个字符</strong>，一般是由’或者”组成。</p>
<h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><p>在一个字符串(仅包含数字)前加上int则会自动转换为int型数据类型,如下代码检测<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = &apos;123456&apos;</span><br><span class="line">print(type(a))</span><br><span class="line">a=int(a)</span><br><span class="line">print(type(a))</span><br></pre></td></tr></table></figure></p>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>python的输入使input();<br>在输入的时候加上提示的话就是在input(“hello world”);<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = input(&quot;please input a math:&quot;)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><br>注意input输入的东西为字符串,以下验证<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a=input()</span><br><span class="line">print(type(a));</span><br></pre></td></tr></table></figure><br>对于这种情况我们一般直接在input前面加上一个int就好了<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a=int(input())</span><br><span class="line">print(type(a))</span><br></pre></td></tr></table></figure></p>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>与C语言相似的是我们一样可以采用”\n”换行，<strong>但增加了一个…换行的方式</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&quot;hhh...hhh...hhh&quot;)</span><br></pre></td></tr></table></figure><br>今日份复习到此结束，hhh，晚上在介绍一下其他的基础。</p>
</blockquote>
]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>迪杰斯特拉堆优化</title>
    <url>/2020/02/01/%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E5%A0%86%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="迪杰斯特拉算法的堆优化"><a href="#迪杰斯特拉算法的堆优化" class="headerlink" title="迪杰斯特拉算法的堆优化"></a>迪杰斯特拉算法的堆优化</h1><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>使得最短路算法时间复杂度再次加快了一个档次变成了$n*\log_2 n$，让人更加头秃<a id="more"></a></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>来说原理的话我建议可以讲一下迪杰斯特拉的算法思想，利用贪心，每一次走距离当前点$u$最近的点$v$，那么我们由原点到$v$一定会是最近的，因为$u$一开始就是最近的，那么<script type="math/tex">dis[u]+min(u\rightarrow v)\leq dis[u]+!min(u\rightarrow v)</script>根据这个我们可以知道我们只需</p>
<ol>
<li>维护一个最小堆来得到当前最小的$dis[u]$得到$u$的位置，然后找到$u$能到的点$v$的最短路径，得到$dis[v]$然后加入堆</li>
<li>循环1操作直到堆为空就好了。<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e+5;</span><br><span class="line">struct ED&#123;</span><br><span class="line">    int pre,id,w;</span><br><span class="line">&#125;ed[N];</span><br><span class="line">int head[N],tot=0,dis[N],vis[N];</span><br><span class="line">void add(int u,int v,int w)&#123;</span><br><span class="line">    ed[++tot].pre=head[u];</span><br><span class="line">    ed[tot].id=v;</span><br><span class="line">    ed[tot].w=w;</span><br><span class="line">    head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;int,int&gt; &gt;q;</span><br><span class="line">void dij_heap(int x)&#123;</span><br><span class="line">    int i;</span><br><span class="line">    memset(dis,0x3f,sizeof dis);</span><br><span class="line">    memset(vis,0,sizeof vis);</span><br><span class="line">    dis[x]=0;</span><br><span class="line">    q.push(make_pair(0,x));</span><br><span class="line">    while(!q.empty())&#123;</span><br><span class="line">        int u=q.top().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        if(vis[u]) continue;</span><br><span class="line">        vis[u]=1;</span><br><span class="line">        for(i=head[u];i;i=ed[i].pre)&#123;</span><br><span class="line">            if(dis[u]+ed[i].w&lt;=dis[ed[i].id])&#123;</span><br><span class="line">                dis[ed[i].id]=dis[u]+w;</span><br><span class="line">                q.push(-dis[ed[i].id],ed[i].id);//这里用负数使最大堆变最小堆</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    dij_heap();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>差分约束</title>
    <url>/2020/01/30/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<h1 id="差分约束"><a href="#差分约束" class="headerlink" title="差分约束"></a>差分约束</h1><p>hhh，这几天病毒感染，真的不敢乱溜达，干脆狂写blog算了，hhh<br><a id="more"></a></p>
<h2 id="一般形式"><a href="#一般形式" class="headerlink" title="一般形式"></a>一般形式</h2><p>差分约束题一般是给出大量的一些不等式</p>
<script type="math/tex; mode=display">a_i-b_i\leq x \rightarrow a_i\leq x + b_i</script><p>由上面这个不等式我们应该可以联想到最短路的不等式</p>
<script type="math/tex; mode=display">dis[u]\leq dis[v] + x(u \rightarrow v)</script><p>因此，我们可以将差分约束化成一个最短路来求，我们的$dis[u]$保存由远点到$u$的可以选择的最大范围!<br>==为什么是最大范围？==<br>我们每一次选择的是$min(u \rightarrow v)$，那么一开始我们就会选择一个从原点$s$最小的范围，且没有其他路径会是她变得更小(三角形)，那么这个由原点出发的范围将会是$s \rightarrow u$的范围，选择最大的话，就是这个范围啦。</p>
<h2 id="求最长路"><a href="#求最长路" class="headerlink" title="求最长路"></a>求最长路</h2><p>当求最大的范围时是最短路，已经说过了，但是如果求最小范围呢？<br>看一下基本形式</p>
<script type="math/tex; mode=display">a_i-b_i\geq x \rightarrow a_i \geq x + b_i</script><p>这个又是什么意思呢？试着把$a_i，b_i$也当作两个点，那么这就是</p>
<script type="math/tex; mode=display">dis[a_i]\geq dis[b_i] + x</script><p>也就是最长路的样子啦</p>
<h3 id="最长路"><a href="#最长路" class="headerlink" title="最长路"></a>最长路</h3><p>实现最长路的办法，我们试着用最短路的办法去试</p>
<ol>
<li>floyd $O(n^3)$很明显暴力枚举下面肯定是可以的，但是复杂度实在太高，放弃</li>
<li>dijstra基于贪心的算法，我们最长路的贪心是做不到的，从三角形来看是很明显的，遂继续放弃</li>
<li>bellman_ford差不多就是暴力对所有的边进行n-1次遍历了==一条最长路最多经过$n-1$次松弛==，在这里最长路也是这样啊，时间复杂度的话，我们可以考虑<s>已经死了的</s> spfa呀，<s>死了不要紧</s>我们可以优化<h3 id="spfa玄学优化"><a href="#spfa玄学优化" class="headerlink" title="spfa玄学优化"></a>spfa玄学优化</h3></li>
<li>双端队列优化，一个非常常见的优化，当边权小于队首时从队首加入，否则队尾！</li>
<li>双端慢了？没事我们可以数组模拟，强行加速！</li>
<li>啊，还是tle？淡定加容错优化，我们首先把所有边权加起来开个根号后加上一个容错值$x$然后当当前边权小于队首边权加上容错时从队首加入，否则队尾，继续强行加速！</li>
<li>听说还是tle？emmm，等死吧</li>
</ol>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode背景配置</title>
    <url>/2020/01/30/vscode%E8%83%8C%E6%99%AF%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="vscode背景"><a href="#vscode背景" class="headerlink" title="vscode背景"></a>vscode背景</h1><p>vscode花里胡哨的背景怎么能却得了？我也来瞎搞俩！<br><a id="more"></a></p>
<h2 id="安装background"><a href="#安装background" class="headerlink" title="安装background"></a>安装background</h2><p>扩展商店安装就好了<br>这里会弹出code损坏，莫急，往下看</p>
<h2 id="下载-Fix-vscode-checksum"><a href="#下载-Fix-vscode-checksum" class="headerlink" title="下载 Fix vscode checksum"></a>下载 Fix vscode checksum</h2><p>扩展商店下载好以后按下ctrl+shift+p<br>输入 Fix checksum 选择apply就行了<br><img src="/2020/01/30/vscode%E8%83%8C%E6%99%AF%E9%85%8D%E7%BD%AE/2.png" alt="2"></p>
<h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><p>管理员运行vscode，打开以后按如下图操作打开setting.json<img src="/2020/01/30/vscode%E8%83%8C%E6%99%AF%E9%85%8D%E7%BD%AE/3.png" alt="1"></p>
<h2 id="编辑setting-json"><a href="#编辑setting-json" class="headerlink" title="编辑setting.json"></a>编辑setting.json</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;background.enabled&quot;: true,</span><br><span class="line">    &quot;background.useDefault&quot;: false,</span><br><span class="line">    &quot;background.customImages&quot;: [</span><br><span class="line">        &quot;file:///E:background/vscode.png&quot;//你的图片的绝对路径</span><br><span class="line">    ],</span><br><span class="line">  &quot;background.style&quot;: &#123;</span><br><span class="line">    &quot;content&quot;: &quot;&apos;&apos;&quot;,</span><br><span class="line">    &quot;pointer-events&quot;: &quot;none&quot;,</span><br><span class="line">    &quot;position&quot;: &quot;absolute&quot;,</span><br><span class="line">    &quot;z-index&quot;: &quot;99999&quot;,</span><br><span class="line">    &quot;width&quot;: &quot;100%&quot;,</span><br><span class="line">    &quot;height&quot;: &quot;100%&quot;,</span><br><span class="line">    &quot;background-size&quot;: &quot;cover&quot;,</span><br><span class="line">    &quot;background-position&quot;: &quot;50% 50%&quot;,</span><br><span class="line">    &quot;background-repeat&quot;: &quot;no-repeat&quot;,</span><br><span class="line">    &quot;opacity&quot;: 0.1</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;workbench.iconTheme&quot;: &quot;vscode-icons&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来可能会要求你重启就完成了</p>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>安装指南</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode配置c</title>
    <url>/2020/01/29/vscode%E9%85%8D%E7%BD%AEc/</url>
    <content><![CDATA[<h1 id="vscodec-c-环境配置"><a href="#vscodec-c-环境配置" class="headerlink" title="vscodec/c++环境配置"></a>vscodec/c++环境配置</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>vscode编辑器比较强大，被朋友介绍以后感觉不错，至少不用一个语言就开一个编辑器了，省心，目录也看着挺方便的，我就捣鼓一会也弄了一个。<br><a id="more"></a></p>
<h2 id="1-下载DEV"><a href="#1-下载DEV" class="headerlink" title="1.下载DEV"></a>1.下载DEV</h2><p>也许有人会问不是vscode嘛？为啥下载这个，因为vscode是编辑器我们需要下载一个编译器，我们就把DEV里面的mingw单独拿出来添加环境变量，提供编译环境。<br>下载网址：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://dl.pconline.com.cn/download/908942-1.html</span><br></pre></td></tr></table></figure><br>进入后点击普通下载，安装好。</p>
<h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h2><p>1.右击电脑属性后<br>2.进入高级设置点击环境变量<br>3.在系统变量Path里面增加mingw64/bin的路径<br>声明一下mingw64/bin就在之前下的DEV文件里面，桌面右击快捷方式打开文件所在地址就可以找到该文件了<br><img src="/2020/01/29/vscode%E9%85%8D%E7%BD%AEc/1.png" alt="1"><br>从左至右逐一执行后<strong>点击确定</strong>。<br>打开cmd输入gcc如果返回的是<br>gcc: fatal error: no input files<br>compilation terminated.<br>那么环境就配好了，否则重启一下电脑再试一下，再不行的话就是环境配置失败，再来吧</p>
<h2 id="3-下载vscode"><a href="#3-下载vscode" class="headerlink" title="3.下载vscode"></a>3.下载vscode</h2><p>下载地址<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://code.visualstudio.com/Download</span><br></pre></td></tr></table></figure><br>下载过程中一路确定就好了。<br>声明：<strong>安装路径不得含有中文！不然之后的操作会有玄学错误，gdb退出代码为-3</strong></p>
<h2 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h2><p>chinese 汉化工具<br>打开vscode工具，使用快捷键组合【command+Shift+p】，在搜索框中输入“configure display language”，点击确定后；修改locale.json文件下的属性“locale”为“zh-CN”;</p>
<p>重启vscode工具</p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>c/c++ c配置必须的<br>vscode-icons美化图标工具<br>chinese 汉化工具<br>Bracket Pair Colorizer 一起安装算了<br>beautify 美化工具</p>
<p><img src="/2020/01/29/vscode%E9%85%8D%E7%BD%AEc/5.png" alt="5"></p>
<h2 id="4-文件配置"><a href="#4-文件配置" class="headerlink" title="4.文件配置"></a>4.文件配置</h2><p>1.我们首先写一个test.cpp文件<br><strong>代码里面必须含有一个输入getchar或者scanf都行</strong>,不然后面看不到输出效果，直接说返回值为1</p>
<h3 id="launch文件"><a href="#launch文件" class="headerlink" title="launch文件"></a>launch文件</h3><p>2.从左到右操作，创建launch.json文件<br><img src="/2020/01/29/vscode%E9%85%8D%E7%BD%AEc/2.png" alt="2"><br>3.使用gdb创建<br><img src="/2020/01/29/vscode%E9%85%8D%E7%BD%AEc/3.png" alt="3"><br>之后点击gcc.exe生成一个文件，在该文件里面添加下面这段代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    // 悬停以查看现有属性的描述。</span><br><span class="line">    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;g++.exe build and debug active file&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: true,</span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,</span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;D:\\progress\\Dev-Cpp\\MinGW64\\bin\\gdb.exe&quot;,//gdb.exe的文件地址</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: true</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;g++.exe build active file&quot;//与task.json一致</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>两个要注意的地方</strong><br>1.miDebuggerPath这是你的gdb.exe文件地址，注意要修改正确！（好像还有一个gdb32.exe你看那一个成功用那个吧）<br>2.externalConsole这里是true！</p>
<h3 id="tasks-json文件"><a href="#tasks-json文件" class="headerlink" title="tasks.json文件"></a>tasks.json文件</h3><p>这个文件我们手动添加，在.vscode文件里面创建<strong>tasks.json</strong>注意别打错了添加如下代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;label&quot;: &quot;g++.exe build active file&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;D:\\progress\\Dev-Cpp\\MinGW64\\bin\\g++.exe&quot;,//g++.exe的位置</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-g&quot;,</span><br><span class="line">                &quot;$&#123;file&#125;&quot;,</span><br><span class="line">                &quot;-o&quot;,</span><br><span class="line">                &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;options&quot;: &#123;</span><br><span class="line">                &quot;cwd&quot;: &quot;D:\\progress\\Dev-Cpp\\MinGW64\\bin&quot;//bin文件夹位置</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面代码两个地方需要修改，请仔细看！</p>
<ol>
<li>“command”: “D:\\progress\\Dev-Cpp\\MinGW64\\bin\\g++.exe”,//g++.exe的位置</li>
<li>“cwd”: “D:\\progress\\Dev-Cpp\\MinGW64\\bin”//bin文件夹位置<br>此时再回到test.cpp里面按F5运行一下，应该能输出了。<br><img src="/2020/01/29/vscode%E9%85%8D%E7%BD%AEc/4.png" alt="4"><h2 id="到此环境安装结束！撒花"><a href="#到此环境安装结束！撒花" class="headerlink" title="到此环境安装结束！撒花"></a>到此环境安装结束！撒花</h2></li>
</ol>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>安装指南</tag>
      </tags>
  </entry>
  <entry>
    <title>欧拉函数</title>
    <url>/2020/01/28/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h1><blockquote>
<p><code>欧拉函数是一个用于求1~n里面所有的与n互质数字的个数</code><br><a id="more"></a></p>
<h2 id="欧拉函数的性质"><a href="#欧拉函数的性质" class="headerlink" title="欧拉函数的性质"></a>欧拉函数的性质</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">公式</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$φ(x <em> y) = φ(x) </em> φ(y)$</td>
<td style="text-align:center"><strong>当且(x,y)==1</strong></td>
</tr>
<tr>
<td style="text-align:center">$φ(x) = x - 1$</td>
<td style="text-align:center"><strong>当且仅当x为质数时</strong></td>
</tr>
<tr>
<td style="text-align:center">$φ(n) = (p-1) * p^{k-1}$</td>
</tr>
<tr>
<td style="text-align:center">$φ(n)=n∗∏(1−1/p_i)$</td>
<td style="text-align:center"><strong>pi是n的质因子</strong></td>
</tr>
<tr>
<td style="text-align:center">$a^{φ(m)}==1%m$</td>
<td style="text-align:center"><strong>当且仅当(a,m)==1</strong></td>
</tr>
<tr>
<td style="text-align:center">$s = n * (φ(n)/2)$</td>
<td style="text-align:center"><strong>s：小于n且与n互质的数之和</strong></td>
</tr>
<tr>
<td style="text-align:center">$φ(n <em> p)=φ(n) </em> p$</td>
<td style="text-align:center"><strong>当p为质数且n%p==0</strong></td>
</tr>
<tr>
<td style="text-align:center">$φ(n <em> p)=φ(n) </em> (p-1)$</td>
<td style="text-align:center"><strong>当p为质数且n%p!=0</strong></td>
</tr>
</tbody>
</table>
</div>
</blockquote>
<h2 id="计算欧拉值的打表代码-时间复杂度O-n"><a href="#计算欧拉值的打表代码-时间复杂度O-n" class="headerlink" title="计算欧拉值的打表代码,时间复杂度O(n)"></a>计算欧拉值的打表代码,时间复杂度O(n)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">phi[1]=1;</span><br><span class="line">	for(int i=2;i&lt;n;i++)&#123;</span><br><span class="line">		if(vis[i]==0) pri[++tot]=i,phi[i]=i-1;</span><br><span class="line">		for(int j=1;j&lt;=tot&amp;&amp;1ll*i*pri[j]&lt;n;j++)&#123;</span><br><span class="line">			vis[i*pri[j]]=1;//标记此点经过非质数</span><br><span class="line">			if(i%pri[j]==0) &#123;</span><br><span class="line">				phi[i*pri[j]]=phi[i]*pri[j];//性质7</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">			else phi[i*pri[j]]=phi[i]*(pri[j]-1);//性质8</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="用性质4计算单个欧拉值"><a href="#用性质4计算单个欧拉值" class="headerlink" title="用性质4计算单个欧拉值"></a>用性质4计算单个欧拉值</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int ph(int n)&#123;</span><br><span class="line">	int res=n,i;</span><br><span class="line">    for(i=2;i*i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(n%i==0)</span><br><span class="line">        &#123;</span><br><span class="line">            res=res-res/i;</span><br><span class="line">            while(n%i==0) n/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(n&gt;1)</span><br><span class="line">        res=res-res/n;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
  </entry>
  <entry>
    <title>割点与割边</title>
    <url>/2020/01/20/%E5%89%B2%E7%82%B9/</url>
    <content><![CDATA[<h1 id="割点"><a href="#割点" class="headerlink" title="割点"></a>割点</h1><h3 id="割点定义："><a href="#割点定义：" class="headerlink" title="割点定义："></a>割点定义：</h3><p>对于一个无向图，如果把一个点删除后这个图的极大连通分量数增加了，那么这个点就是这个图的割点（又称割顶）。<br><br><a id="more"></a><br><img src="/2020/01/20/%E5%89%B2%E7%82%B9/bridge1.png" alt="割点"><br><br>易得割点是2号点。</p>
<h3 id="具体操作："><a href="#具体操作：" class="headerlink" title="具体操作："></a>具体操作：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.用dfs给每一个点打上一个时间戳，把每一个点的时间戳保存至num【】里面；</span><br><span class="line">2.通过dfs来统计每一个点能到达的最小的时间戳。&lt;br&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/01/20/%E5%89%B2%E7%82%B9/bridge2.png" alt="时间戳"><br></p>
<h3 id="割点的判定方式："><a href="#割点的判定方式：" class="headerlink" title="割点的判定方式："></a>割点的判定方式：<br></h3><ol>
<li>如果存在一个点他的子节点能到达的最小时间戳大于等于父节点的时间戳那么这个点是一个割点。(也就是不能回到祖先，那么当前点就是割点咯)</li>
<li>假设一个点存在两个子节点，那么该点就是割点。<br><br><img src="/2020/01/20/%E5%89%B2%E7%82%B9/bridge3.png" alt="判定2"><br><br>我们在访问 1 的儿子时候，假设先 DFS 到了 2，然后标记用过，然后递归往下，来到了 4，4 又来到了 3，当递归回溯的时候，会发现 3 已经被访问过了，所以不是割点。<br><br>更新 low 的伪代码如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果 v 是 u 的儿子 low[u] = min(low[u], low[v]);</span><br><span class="line">否则</span><br><span class="line">low[u] = min(low[u], num[v]);//这里是num[v]而不是low[v]的原因是如下图</span><br><span class="line">//按照节点编号从小到大遍历，4节点先到1，如果是low[v]的话，节点6的low值等于1，很明显是不可以的，所以是num</span><br></pre></td></tr></table></figure>
<img src="/2020/01/20/%E5%89%B2%E7%82%B9/gedian.png" alt="这是栗子"><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><a href="https://www.luogu.com.cn/problem/P3388" target="_blank" rel="noopener">板子题</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;stack&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N=2e5+5;</span><br><span class="line">typedef long long ll;</span><br><span class="line">struct ED&#123;</span><br><span class="line">	int pre,id;</span><br><span class="line">&#125;ed[N];</span><br><span class="line">int head[N],tot=1,cnt=0;</span><br><span class="line">int vis[N],num[N],low[N],inde,res,flag[N];</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">	ed[++tot].id=v;</span><br><span class="line">	ed[tot].pre=head[u];</span><br><span class="line">	head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line">void tarjan(int u,int fa)&#123;</span><br><span class="line">	vis[u]=1;</span><br><span class="line">	low[u]=num[u]=++inde;</span><br><span class="line">	int ch=0,i;</span><br><span class="line">	for(i=head[u];i;i=ed[i].pre)&#123;</span><br><span class="line">		int v=ed[i].id;</span><br><span class="line">		if(!vis[v])&#123;</span><br><span class="line">			ch++;</span><br><span class="line">			tarjan(v,u);</span><br><span class="line">			low[u]=min(low[u],low[v]);</span><br><span class="line">			if(fa!=u&amp;&amp;low[v]&gt;=num[u]&amp;&amp;!flag[u]) flag[u]=1,res++;</span><br><span class="line">		&#125;</span><br><span class="line">		else if(v!=fa)&#123;</span><br><span class="line">			low[u]=min(low[u],num[v]);//这里非常关键，如果写成low[u]=min(low[u],low[v])在题目里面会wa</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	if(ch&gt;= 2&amp;&amp;fa==u&amp;&amp;!flag[u])&#123;</span><br><span class="line">		flag[u]=1;</span><br><span class="line">		res++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n,m,i,j,k;</span><br><span class="line">	scanf(&quot;%d %d&quot;,&amp;n,&amp;m);</span><br><span class="line">	for(i=1;i&lt;=n;i++) head[i]=0,vis[i]=0;</span><br><span class="line">	int u,v;</span><br><span class="line">	for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">		scanf(&quot;%d %d&quot;,&amp;u,&amp;v);</span><br><span class="line">		add(u,v);</span><br><span class="line">		add(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">		if(!vis[i])&#123;</span><br><span class="line">			inde=0;</span><br><span class="line">			tarjan(i,i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%d\n&quot;,res);</span><br><span class="line">	for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">		if(flag[i]) printf(&quot;%d &quot;,i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="割边"><a href="#割边" class="headerlink" title="割边"></a>割边</h1>对于割边其实与割点差不多只有判断条件变了一丢丢，也就是$low[v]&gt;dfn[u]$时边$<v,u>$一定是割边。</v,u></li>
</ol>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>扩展欧几里得</title>
    <url>/2020/01/14/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/</url>
    <content><![CDATA[<h1 id="扩展欧几里得"><a href="#扩展欧几里得" class="headerlink" title="扩展欧几里得"></a>扩展欧几里得</h1><p>应用：计算逆元，解方程<br><a id="more"></a></p>
<h2 id="证明方式："><a href="#证明方式：" class="headerlink" title="证明方式："></a>证明方式：</h2><p>首先贝祖原理我大概就不解释了，直接照搬结论：<br></p>
<ol>
<li>$ax+by=(a,b)$;贝祖原理<br></li>
<li>$ax+by=(b,a \% b) $;辗转相除法<br></li>
<li>假设解为$x1$,$y1$则有$a * x1+b * y1=(b,a\%b)$</li>
<li>由3式从右往左代替可得$b * x1+(a\%b) * y1=(b,a\%b)$;<br>$b * x1 + (a-(a/b)  *  b) * y1 = (b,a\%b)$;<br>$a * y1 +b * (x1 - (a/b) * y1) = a * x + b * y$<br>由上可知$x = y1,y = x1 - (a/b) * y1$。</li>
</ol>
<p>对于上式，我们可以比较一下欧几里得求最大公约数的算法：</p>
<ol>
<li>$(a,b)=(b,a\%b)$，一直到b等于0时结束递归，而当b等于0时的x=1,y=0;</li>
</ol>
<p>然后又可以通过上面代数式4回退时计算出x与y的值！</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ll x,y;</span><br><span class="line">ll ex_gcd(ll a,ll b)&#123;</span><br><span class="line">	if(!b)&#123;</span><br><span class="line">		x=1,y=0;</span><br><span class="line">		return a;</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans=ex_gcd(b,a%b);</span><br><span class="line">	ll t=x;</span><br><span class="line">	x=y;</span><br><span class="line">	y=t-a/b * y;</span><br><span class="line">	return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h3><p>当求一个数字x对于p的逆元时，我们将其写成代数式将是如下形式：</p>
<ol>
<li>a * x=1%p;</li>
</ol>
<p>对其进行化简可得a  *  x+y  *  p=1，已知x,p求a就好了化简成这样以后再看，简直就是扩展欧几里得板子！</p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>欧拉筛</title>
    <url>/2020/01/14/%E6%AC%A7%E6%8B%89%E7%AD%9B/</url>
    <content><![CDATA[<h1 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h1><p>欧拉函数打表简单版！<br><a id="more"></a></p>
<h2 id="欧拉筛证明："><a href="#欧拉筛证明：" class="headerlink" title="欧拉筛证明："></a>欧拉筛证明：</h2><p>首先介绍一下算术基本原理：$x=p_1^{e1} <em> p_2^{e_2} </em> p_3^{e_3}$…(p为质数，e为正数，x为任意不为1的正整数)<br>由上可以知道任意一个合数都是由一个质数乘以一个其他数字组成！<br>所以我们可以通过枚举一个质数和一个其他非$1$的正整数来判断来其他合数。<br>但是为了提高其运算速率，我们想要对于任意一个合数仅判断一次时我们可以考虑，采用其最小的质数就行了，因为<strong>最小的质数只有一个且另一个非$1$正整数数仅用一次，那么任意一个合数只会判断一次</strong>咯</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void erlu(int n)&#123;</span><br><span class="line">	int i,j,k;</span><br><span class="line">  for(i=1;i&lt;=n;i++) vis[i]=pri[i]=0;</span><br><span class="line">	for(i=2;i&lt;=n;i++)&#123;枚举非1正整数</span><br><span class="line">		if(!vis[i])&#123;</span><br><span class="line">			pri[++tot]=i;</span><br><span class="line">		&#125;</span><br><span class="line">		for(j=1;j&lt;=tot&amp;&amp;(i*pri[j]&lt;=n);j++)&#123;//枚举素数</span><br><span class="line">			vis[i*pri[j]]=pri[j];//保存质数表，每一个空间表示该下标的最小质数！</span><br><span class="line">			if(i%pri[j]==0) break;//原因在下注明</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>break的原因是如果该循环继续下去的话(i*pri[j]的最小素数其实不是pri[j]，而是之前能被整除的那个素数，不break的话，一个合数的判断次数就会增加)</p>
</blockquote>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>差分数组实例</title>
    <url>/2019/11/26/IncDec%E5%BA%8F%E5%88%97%20%20%20%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="题目链接请点击此处"><a href="#题目链接请点击此处" class="headerlink" title="题目链接请点击此处"></a><a href="https://www.acwing.com/problem/content/description/102/" target="_blank" rel="noopener">题目链接请点击此处</a></h2><p>大致讲一下题意，给一个数组，让我用最少的次数将这个数组重置为相同的值，也就是数组内所有数字大小必须相同，<strong>而每一次操作仅允许对一个区间进行+1或者-1的操作。</strong><br><a id="more"></a><br>区间修改，而且是修改相同的值，就让我想到了差分数组，<a href="https://blog.csdn.net/qq_42937891/article/details/97548366" target="_blank" rel="noopener">差分数组不熟悉的请点击</a>让每一个值都相同其实就是让<strong>差分数组从第二个开始都为0！当从第二个开始都为0时那么整个数组都会变成第一个值的大小。</strong><br>那么首先就先将这一题所给原数组转化为差分数组，然后计算从第二个位置开始数组元素全部转化为0的步数。这里可以<strong>逆向思考，从0恢复到原数组元素的步数就是题目所问的最少步数，而恢复原数组的最快步数就是ans=max(正数之和，负数之和的绝对值)</strong>；解释一下：因为差分数组每一次变化都会产生一对相反数，而那么我只需要注意绝对值大的就行了，至于多出来的正数或者负数其实是可以放在最后的也就是n+1或者放到<strong>第一个位置(这里一开始没有运算</strong>!)的位置。至此步数就解决了！！！<br>现在解决有多少种的问题：首先我之前说了一句，在经过最少次数变化以后，整个数组都会变成第一个数字的值，那么种类个数只需要考虑一下第一个数字有多少种可能就行了！<strong>在之前说过可以放第一个位置，为什么呢，因为放到这里可以改变整个数组的值，也就是中间可以放多少个，就可以改变多少次，所以答案就是（正数-负数）的绝对值+1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[100009],n,m,i,j,k;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(i=1;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    int c[100009],ko=a[1];</span><br><span class="line">    for(i=2;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i]=a[i]-ko;</span><br><span class="line">        ko=a[i];</span><br><span class="line">    &#125;//差分数组</span><br><span class="line">    long long sum2=0,sum1=0,maxx=0,minn=c[1];</span><br><span class="line">    for(i=2;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(c[i]&gt;0) sum1+=c[i];</span><br><span class="line">        else sum2-=c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%lld\n&quot;,max(sum1,sum2));</span><br><span class="line">    printf(&quot;%lld\n&quot;,abs(sum1-sum2)+1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>树状数组加二分维护区间第k大值</title>
    <url>/2019/11/26/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%8A%A0%E4%BA%8C%E5%88%86%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E7%AC%ACk%E5%A4%A7%E5%80%BC/</url>
    <content><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="http://codeforces.com/contest/1227/problem/D2" target="_blank" rel="noopener">题目链接</a></h2><p><img src="/2019/11/26/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%8A%A0%E4%BA%8C%E5%88%86%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E7%AC%ACk%E5%A4%A7%E5%80%BC/cf1227d.png" alt="cf1227d2">&lt;/br&gt;<br>按题意每一次查询和最大的p个数的最小字典序中第q个位置的数字；<br><a id="more"></a><br>首先我们可以把所有数字的按从大到小进行一级排序，位置按从前往后进行二级排序，那么在排序以后p个数的最大和且最小字典序就是前p个数，那么我==只要输出前面按照位置从小到大的第q个数就行了==。<br>显然，问题转化后就是求前p个数中的第q大值；<br>树状数组维护数字x是第几大，然后在有单调性的情况下选择二分第q大值就好了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e5+5;</span><br><span class="line">typedef long long ll;</span><br><span class="line">int a[N],ans[N],n,sum[N];</span><br><span class="line">struct ab&#123;</span><br><span class="line">	int x,y;</span><br><span class="line">&#125;c[N];</span><br><span class="line">struct sc&#123;</span><br><span class="line">	int x,y,z;</span><br><span class="line">&#125;b[N];</span><br><span class="line">bool cmp(ab p,ab q)&#123;</span><br><span class="line">	if(p.x&gt;q.x) return true;</span><br><span class="line">	if(p.x==q.x&amp;&amp;p.y&lt;q.y) return true;</span><br><span class="line">	return false;</span><br><span class="line">&#125;</span><br><span class="line">bool cmp1(sc p,sc q)&#123;</span><br><span class="line">	return p.x&lt;q.x;</span><br><span class="line">&#125;</span><br><span class="line">void add(int x)&#123;</span><br><span class="line">	while(x&lt;=n)&#123;</span><br><span class="line">		//printf(&quot;%dxxx\n&quot;,x);</span><br><span class="line">		sum[x]++;</span><br><span class="line">		x+=(x&amp;(-x));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int get(int x)&#123;</span><br><span class="line">	int ans=0;</span><br><span class="line">	while(x)&#123;</span><br><span class="line">		ans+=sum[x];</span><br><span class="line">		x-=(x&amp;(-x));</span><br><span class="line">	&#125;</span><br><span class="line">	return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int t,m,i,j;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	for(i=1;i&lt;=n;i++)&#123;</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">		c[i].x=a[i];</span><br><span class="line">		c[i].y=i;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(c+1,c+1+n,cmp);</span><br><span class="line">	for(i=1;i&lt;=n;i++) sum[i]=0;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">	for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">		scanf(&quot;%d %d&quot;,&amp;b[i].x,&amp;b[i].y);</span><br><span class="line">		b[i].z=i;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(b+1,b+1+m,cmp1);</span><br><span class="line">	int p=b[m].x,q=1;</span><br><span class="line">	for(i=1;i&lt;=p;i++)&#123;</span><br><span class="line">		add(c[i].y);</span><br><span class="line">		//printf(&quot;%dss\n&quot;,c[i].y);</span><br><span class="line">		while(b[q].x==i)&#123;</span><br><span class="line">			int l=1,r=n,mid=0;</span><br><span class="line">			while(l&lt;r)&#123;</span><br><span class="line">				mid=(l+r)/2;</span><br><span class="line">				//printf(&quot;%d %d\n&quot;,mid,get(mid));</span><br><span class="line">				if(get(mid)&gt;=b[q].y) r=mid;</span><br><span class="line">				else l=mid+1;</span><br><span class="line">			&#125;</span><br><span class="line">			ans[b[q].z]=a[r];</span><br><span class="line">			q++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	for(i=1;i&lt;=m;i++)&#123;</span><br><span class="line">		printf(&quot;%d\n&quot;,ans[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
</search>
